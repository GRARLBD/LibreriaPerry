/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.libreria.gral.system.ui;

import com.mycompany.libreria.gral.system.controller.GestorLibreriaGralSystem;
import com.mycompany.libreria.gral.system.model.Inventario;
import java.math.BigDecimal;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import utiles.Clave;
import utiles.Mensaje;
import utiles.Utiles;

/**
 *
 * @author KEVIN
 */
public class FAltaInventarioLote extends javax.swing.JFrame {

    private static final String CODIGO_PROHIBIDO = "-1";
    private static final int COL_COD_BUSQ = 0;
    private static final int COL_COD_LOTE = 1;
    private static final int COL_COD = 2;
    private static final int COL_DESC = 3;
    private static final int COL_UNID_OF = 4;
    private static final int COL_COST_UNIT = 5;
    private static final int COL_PREC_UNIT = 6;
    private static final int COL_STOCK = 7;
    private static final Date fechaActual = Utiles.obtenerFechaActualM4();

    private GestorLibreriaGralSystem gestor;
    private MainFrame mainFrame;
    private List<Inventario> listaInventario;

    /**
     * Creates new form FAltaInventarioLote
     */
    public FAltaInventarioLote() {
        initComponents();
    }

    public FAltaInventarioLote(MainFrame mainFrame, GestorLibreriaGralSystem gestor) {
        this.mainFrame = mainFrame;
        this.gestor = gestor;
        initComponents();
        limpiarFormulario();
        inicializarComponentesLogicos();
        inicializarComponentesFisicos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaInventarioLote = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        edtCodigo = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        btnCancelar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        edtFecha = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Alta de Inventario por Lote");
        setAlwaysOnTop(true);
        setResizable(false);

        tablaInventarioLote.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tablaInventarioLote.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Cod. de Busq.", "Cod. lote", "Codigo", "Descripción", "Unid. ofert.", "Costo unt.", "Precio venta", "Stock"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaInventarioLote.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tablaInventarioLote.setRequestFocusEnabled(false);
        tablaInventarioLote.setRowHeight(32);
        tablaInventarioLote.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tablaInventarioLote.getTableHeader().setReorderingAllowed(false);
        tablaInventarioLote.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaInventarioLoteMouseClicked(evt);
            }
        });
        tablaInventarioLote.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tablaInventarioLoteKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tablaInventarioLoteKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tablaInventarioLoteKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(tablaInventarioLote);
        if (tablaInventarioLote.getColumnModel().getColumnCount() > 0) {
            tablaInventarioLote.getColumnModel().getColumn(0).setPreferredWidth(120);
            tablaInventarioLote.getColumnModel().getColumn(1).setPreferredWidth(120);
            tablaInventarioLote.getColumnModel().getColumn(2).setPreferredWidth(200);
            tablaInventarioLote.getColumnModel().getColumn(3).setPreferredWidth(400);
            tablaInventarioLote.getColumnModel().getColumn(5).setPreferredWidth(100);
            tablaInventarioLote.getColumnModel().getColumn(6).setPreferredWidth(100);
        }

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel5.setText("Código :");

        edtCodigo.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        edtCodigo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                edtCodigoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                edtCodigoFocusLost(evt);
            }
        });
        edtCodigo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                edtCodigoMouseClicked(evt);
            }
        });
        edtCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                edtCodigoKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                edtCodigoKeyTyped(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Fecha de ingreso :");

        edtFecha.setEditable(false);
        edtFecha.setBackground(new java.awt.Color(255, 255, 255));
        edtFecha.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(edtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(edtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 251, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel1)
                    .addComponent(edtFecha, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(edtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        try {
            iniciarProc2();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
        Clave result = Clave.RESULT_SIN_DEFINIR;

        try {
            result = iniciarProc4();
        } catch (Exception e) {
            result = Clave.RESULT_ERROR;
        }

        switch (result) {
            case RESULT_LISTA_VACIA: {
                Mensaje.mostrarMensaje16(rootPane);
                break;
            }
            case RESULT_ERROR_CAMPOS_INVALIDOS: {
                Mensaje.mostrarMensaje7(rootPane);
                break;
            }
            case RESULT_OK: {
                Mensaje.mostrarMensaje18(rootPane);
                this.dispose();
                try {
                    mainFrame.actualizar();
                } catch (Exception e) {
                }                
                break;
            }
            case RESULT_ERROR: {
                Mensaje.mostrarMensaje5(rootPane);
                break;
            }
            case RESULT_ERROR_BD: {
                Mensaje.mostrarMensaje5(rootPane);
                break;
            }
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void edtCodigoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtCodigoFocusGained
        // TODO add your handling code here:
        Utiles.establecerFocusActivoG(edtCodigo);
    }//GEN-LAST:event_edtCodigoFocusGained

    private void edtCodigoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtCodigoFocusLost
        // TODO add your handling code here:
        Utiles.establecerFocusInactivo(edtCodigo);
    }//GEN-LAST:event_edtCodigoFocusLost

    private void edtCodigoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCodigoKeyTyped
        // TODO add your handling code here:
        Utiles.suprimirComilla(evt);
        Utiles.suprimirComilla(edtCodigo);
    }//GEN-LAST:event_edtCodigoKeyTyped

    private void tablaInventarioLoteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaInventarioLoteMouseClicked
        // TODO add your handling code here:
        Utiles.establecerFocusActivoG(edtCodigo);
    }//GEN-LAST:event_tablaInventarioLoteMouseClicked

    private void edtCodigoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCodigoKeyPressed
        // TODO add your handling code here:

        int key = evt.getKeyCode();

        switch (key) {
            case com.sun.glass.events.KeyEvent.VK_ENTER: {
                try {
                    iniciarProc1();
                } catch (Exception e) {
                }
                break;
            }
            case com.sun.glass.events.KeyEvent.VK_UP: {
                Utiles.anterior(tablaInventarioLote);
                break;
            }
            case com.sun.glass.events.KeyEvent.VK_DOWN: {
                Utiles.siguiente(tablaInventarioLote);
                break;
            }
            default:
                Utiles.seleccionarYBorrar(evt, edtCodigo);
        }

    }//GEN-LAST:event_edtCodigoKeyPressed

    private void tablaInventarioLoteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tablaInventarioLoteKeyReleased
        // TODO add your handling code here:
        Utiles.modoTabM1(tablaInventarioLote);
    }//GEN-LAST:event_tablaInventarioLoteKeyReleased

    private void edtCodigoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_edtCodigoMouseClicked
        // TODO add your handling code here:
        Utiles.pararEdicion(tablaInventarioLote);
        Utiles.seleccionar(edtCodigo);
    }//GEN-LAST:event_edtCodigoMouseClicked

    private void tablaInventarioLoteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tablaInventarioLoteKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tablaInventarioLoteKeyPressed

    private void tablaInventarioLoteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tablaInventarioLoteKeyTyped
        // TODO add your handling code here:

    }//GEN-LAST:event_tablaInventarioLoteKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JTextField edtCodigo;
    private javax.swing.JTextField edtFecha;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaInventarioLote;
    // End of variables declaration//GEN-END:variables

    //************************* Formulario *******************************
    /**
     * Limpieza de formulario
     */
    private void limpiarFormulario() {
        limpiarTL();
        this.edtCodigo.setText("");
    }

    private void limpiarTL() {
        String[] columnNames = {
            "<html><center> <br> Código de búsqueda <br> <br></html>",
            "<html><center> <br> Código de lote <br> <br></html>",
            "<html><center> <br> Código <br> <br></html>",
            "<html><center> Descripción <br></html>",
            "<html> Unid. <br>ofert.</html>",
            "<html> <center>Costo unit. </html>",
            "<html> <center>Precio unit. <br></html>",
            "<html><center> Stock <br></html>"
        };

        Utiles.limpiarTabla(tablaInventarioLote, columnNames);
    }

    private void mostrarListaEnTabla(List<Inventario> lista) {
        int INDEX = -1;
        DefaultTableModel model = (DefaultTableModel) this.tablaInventarioLote.getModel();

        for (Inventario i : lista) {
            INDEX++;
            Object[] rowData = {
                i.getProducto().getCodigoBusq1(),
                i.getProducto().getCodigoLote(),
                i.getProducto().getCodigo(),
                i.getProducto().getDescripcion(),
                Utiles.formatearM2(i.getUnidOf()),
                Utiles.formatear(i.getCostoUnitario()),
                Utiles.formatear(i.getpVenta()),
                String.valueOf(i.getProducto().getStock())
            };

            model.insertRow(INDEX, rowData);
        }
    }

    private void inicializarComponentesLogicos() {
        this.listaInventario = new LinkedList<>();
    }

    private void inicializarComponentesFisicos() {
        DefaultTableModel model = (DefaultTableModel) this.tablaInventarioLote.getModel();

        this.edtFecha.setText(Utiles.toStringM3(fechaActual));
        model.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {

                if (e.getType() == TableModelEvent.UPDATE) {
                    iniciarProc3();
                }
            }
        });

        Utiles.suprimirComilla(tablaInventarioLote);
    }

    private void actualizar() {
        limpiarTL();
        mostrarListaEnTabla(listaInventario);
    }

    //*********************** Procedimientos ***********************************
    private void iniciarProc1() {
        Clave result = Clave.RESULT_SIN_DEFINIR;
        String codigo = Utiles.obtenerValor(edtCodigo);

        if (codigo.isEmpty()) {
            result = Clave.RESULT_CAMPO_BLANCO;
        } else {
            if (consultar(codigo)) {
                result = Clave.RESULT_EXISTE_EN_LISTA;
            } else {
                if (gestor.consultarInvPorCodigo(codigo)) {
                    result = Clave.RESULT_EXISTE;
                } else {
                    result = Clave.RESULT_OK;
                }
            }
        }

        switch (result) {
            case RESULT_CAMPO_BLANCO: {
                // Haecer nada.
                break;
            }
            case RESULT_EXISTE_EN_LISTA: {
                Utiles.seleccionarFila(tablaInventarioLote, COL_COD, codigo);
                Utiles.establecerFocusActivoG(edtCodigo);
                break;
            }
            case RESULT_EXISTE: {
                Mensaje.mostrarMensajeExisteProducto(rootPane);

                FConsultaInventario form = new FConsultaInventario();

                form.cargarInventario(gestor.obtenerInvPorCodigoM2(codigo));
                form.mostrarInformacion();
                form.setVisible(true);

                break;
            }
            case RESULT_OK: {
                Inventario inv = new Inventario();

                inv.getProducto().setCodigo(codigo);
                inv.getProducto().setDescripcion("Sin información.");
                inv.setUnidOf(1);
                inv.incrementarAcumuladorEntrada(1);

                boolean ESTADO_ALTA = true;

                inv.setEstado(ESTADO_ALTA);
                inv.actualizarParametros();

                listaInventario.add(inv);

                limpiarTL();
                mostrarListaEnTabla(listaInventario);
                Utiles.seleccionarFila(tablaInventarioLote, COL_COD, codigo);
                Utiles.establecerFocusActivoG(edtCodigo);
                break;
            }
            default:
        }
    }

    private void iniciarProc2() {
        Clave result = Clave.RESULT_SIN_DEFINIR;
        int INDEX = this.tablaInventarioLote.getSelectedRow();

        if (INDEX < 0) {
            result = Clave.RESULT_NO_ENCONTRADO;
        } else {
            String codigo = Utiles.obtenerValor(tablaInventarioLote, INDEX, COL_COD);

            if (consultar(codigo)) {
                eliminar(codigo);
                result = Clave.RESULT_ENCONTRADOS;
            } else {
                result = Clave.RESULT_NO_ENCONTRADO;
            }
        }

        switch (result) {
            case RESULT_NO_ENCONTRADO: {
                Mensaje.mostrarMensajeNoEncontrado(rootPane);
                break;
            }
            case RESULT_ENCONTRADOS: {
                limpiarTL();
                mostrarListaEnTabla(listaInventario);
                break;
            }
            default:
        }
    }

    private boolean consultar(String codigo) {
        boolean bandera = false;

        for (Inventario e : listaInventario) {
            if (e.getProducto().getCodigo().equals(codigo)) {
                bandera = true;
                break;
            }
        }

        return bandera;
    }

    private Inventario obtener(List<Inventario> l, String codigo) {
        Inventario inv;

        inv = null;

        for (Inventario element : l) {
            if (element.getProducto().getCodigo().equals(codigo)) {
                inv = element;
                break;
            }
        }

        return inv;
    }

    private void eliminar(String codigo) {
        Inventario inv = null;

        for (Inventario e : listaInventario) {
            if (e.getProducto().getCodigo().equals(codigo)) {
                inv = e;
                break;
            }
        }

        if (inv == null) {
            // Hacer nada.
        } else {
            listaInventario.remove(inv);
        }
    }

    private void modificar(Inventario inv, String value, int columna) {

        switch (columna) {
            case COL_COD_BUSQ:
            {
                inv.getProducto().setCodigoBusq1(value);
                break;
            }
            case COL_COD_LOTE: {
                inv.getProducto().setCodigoLote(value);
                break;
            }
            case COL_DESC: {
                if (value == null || value.isEmpty()) {
                    // Hacer nada.
                } else {
                    inv.getProducto().setDescripcion(value);
                }
                break;
            }
            case COL_UNID_OF: {
                int unidOfet = 0;

                try {
                    unidOfet = Integer.valueOf(value);
                } catch (Exception e) {
                }
                inv.setUnidOf(unidOfet);
                break;
            }
            case COL_COST_UNIT: {
                try {
                    if (value.contains(",")) {
                        value = value.replace(",", ".");
                    }
                    
                    BigDecimal costoUnit = new BigDecimal(value);

                    if (costoUnit.doubleValue() < 0) {
                        // Hacer nada.
                    } else {
                        inv.setCostoUnitario(costoUnit);
                        inv.actualizarParametros();
                    }
                } catch (Exception ex) {
                }
                break;
            }
            case COL_PREC_UNIT: {
                try {
                    if (value.contains(",")) {
                        value = value.replace(",", ".");
                    }
                    
                    BigDecimal ventaUnit = new BigDecimal(value);

                    if (ventaUnit.doubleValue() < 0) {
                        // Hacer nada.
                    } else {
                        inv.setpVenta(ventaUnit);
                        inv.actualizarParametros();
                    }
                } catch (Exception ex) {
                }
                break;
            }
            case COL_STOCK: {
                int stock = 0;

                try {
                    stock = Integer.valueOf(value);
                } catch (Exception e) {
                }
                inv.setAcumEntrada(stock);
                break;
            }
        }
        inv.actualizarParametros();
    }

    private void iniciarProc3() {
        Clave result = Clave.RESULT_SIN_DEFINIR;
        String codigo = Utiles.obtenerValor(tablaInventarioLote, COL_COD);

        if (codigo.isEmpty()) {
            result = Clave.RESULT_CAMPO_BLANCO;
        } else {
            if (consultar(codigo)) {
                Inventario i = obtener(listaInventario, codigo);
                String value = Utiles.obtenerCambios(tablaInventarioLote);

                modificar(i, value, tablaInventarioLote.getSelectedColumn());

                result = Clave.RESULT_ENCONTRADOS;
            } else {
                result = Clave.RESULT_NO_ENCONTRADO;
            }
        }

        switch (result) {
            case RESULT_CAMPO_BLANCO: {
                actualizar();
                break;
            }
            case RESULT_ENCONTRADOS: {
                actualizar();
                Utiles.seleccionarFila(tablaInventarioLote, COL_COD, codigo);
                break;
            }
            case RESULT_NO_ENCONTRADO: {
                actualizar();
                break;
            }
        }
    }

    private Clave iniciarProc4() {
        Clave result = Clave.RESULT_SIN_DEFINIR;

        if (listaInventario.isEmpty()) {
            result = Clave.RESULT_LISTA_VACIA;
        } else {
            if (existenCamposNoHomogeneos()) {
                result = Clave.RESULT_ERROR_CAMPOS_INVALIDOS;
            } else {
                result = Clave.RESULT_OK;
            }
        }

        if (result == Clave.RESULT_OK) {
            try {
                gestor.guardarInventario(listaInventario);
                gestor.guardarEntNueva(listaInventario);
            } catch (Exception e) {
                result = Clave.RESULT_ERROR_BD;
            }
        }

        return result;
    }

    private boolean existenCamposNoHomogeneos() {
        boolean bandera = false;
        int INDEX = -1;

        if (listaInventario.isEmpty()) {
            bandera = true;
        } else
        {
            for (INDEX = 0; INDEX < listaInventario.size(); INDEX++) {
                Inventario i = listaInventario.get(INDEX);
                int acumEnt = i.getAcumEntrada();

                if (acumEnt < 0) {
                    bandera = true;
                }

                BigDecimal precioVenta = i.getpVenta();
                BigDecimal costo = i.getCostoUnitario();

                if (precioVenta.doubleValue() < 0) {
                    bandera = true;
                }

                if (costo.doubleValue() < 0) {
                    bandera = true;
                }

                if (precioVenta.doubleValue() <= costo.doubleValue()) {
                    bandera = true;
                }
                
                String codigo = i.getProducto().getCodigo();
                
                if (codigo.equals(CODIGO_PROHIBIDO))
                {
                    bandera = true;
                    break;
                }
            }
        }
        
        return bandera;
    }
    
    public void iniciarProc5(String codBusq, String descripcion, String precioCont)
    {
        Inventario inv = new Inventario();
        
        inv.getProducto().setCodigoBusq1(codBusq);
        inv.getProducto().setDescripcion(descripcion);
        
        if (precioCont.contains(","))
        {
            precioCont = precioCont.replace(",", ".");
        }
        
        try {
            inv.setCostoUnitario(new BigDecimal(precioCont));
        } catch (Exception e) {
        } 
        
        agregarALista(inv);
        actualizar();
        Utiles.seleccionarFila0(tablaInventarioLote);
    }
    
    private void agregarALista(Inventario inv)
    {
        if (consultar(inv.getProducto().getCodigo()))
        {
            // Hacer nada.
        } else
        {
            listaInventario.add(inv);
        }
    }
}

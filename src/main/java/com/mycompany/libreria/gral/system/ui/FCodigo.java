/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.libreria.gral.system.ui;

import com.mycompany.libreria.gral.system.controller.GestorLibreriaGralSystem;
import com.mycompany.libreria.gral.system.model.Codigo;
import com.sun.glass.events.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import utiles.Clave;
import utiles.Mensaje;
import utiles.Utiles;

/**
 *
 * @author KEVIN
 */
public class FCodigo extends javax.swing.JFrame {

    private final boolean ESTADO_ALTA = true;
    private final boolean ESTADO_BAJA = false;
    private final int COL_CODIGO = 0;
    private String codigoInv;
    private List<Codigo> listaCodigo;
    private List<Codigo> listaCopia;
    private Clave mensaje;
    private FAltaInventario formInv;
    private FModificarInventario formModInv;
    private GestorLibreriaGralSystem gestor;
    
    public FCodigo(GestorLibreriaGralSystem gestor, List<Codigo> listaCodigo, String codigo, Clave mensaje, FAltaInventario formInv) {
        initComponents();
        
        this.gestor = gestor;
        this.listaCodigo = listaCodigo;
        this.codigoInv = codigo;
        this.listaCopia = new ArrayList<>(listaCodigo);
        this.mensaje = mensaje;
        this.formInv = formInv;
        this.formModInv = null;
        limpiarFormulario();
        iniciarFormulario();        
    }
  
    public FCodigo(GestorLibreriaGralSystem gestor, List<Codigo> listaCodigo, String codigo, Clave mensaje, FModificarInventario formModInv) {
        initComponents();
        
        this.gestor = gestor;
        this.listaCodigo = listaCodigo;
        this.codigoInv = codigo;
        this.listaCopia = new ArrayList<>(listaCodigo);
        this.mensaje = mensaje;
        this.formInv = null;
        this.formModInv = formModInv;
        limpiarFormulario();
        iniciarFormulario();        
    }
  

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaCodigo = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        btnCancelar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        edtCodigo = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Lista de Inventarios");
        setAlwaysOnTop(true);
        setResizable(false);

        tablaCodigo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tablaCodigo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Código"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaCodigo.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tablaCodigo.setRequestFocusEnabled(false);
        tablaCodigo.setRowHeight(32);
        tablaCodigo.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablaCodigo.getTableHeader().setReorderingAllowed(false);
        tablaCodigo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaCodigoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaCodigo);
        if (tablaCodigo.getColumnModel().getColumnCount() > 0) {
            tablaCodigo.getColumnModel().getColumn(0).setPreferredWidth(400);
        }

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        edtCodigo.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        edtCodigo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        edtCodigo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                edtCodigoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                edtCodigoFocusLost(evt);
            }
        });
        edtCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                edtCodigoKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                edtCodigoKeyTyped(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel11.setText("Código :");
        jLabel11.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(edtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 96, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(edtCodigo, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                .addGap(17, 17, 17)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
        switch (mensaje)
        {
            case MENSAJE_NUEVO_INVENTARIO:
            {
                try {
                    iniciarProc1();
                } catch (Exception e) {
                }
                break;
            }
            case MENSAJE_MODIFICAR_INVENTARIO:
            {
                iniciarProc5();
                break;
            }
        }
        
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void edtCodigoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtCodigoFocusGained
        // TODO add your handling code here:
        Utiles.establecerFocusActivoG(edtCodigo);
    }//GEN-LAST:event_edtCodigoFocusGained

    private void edtCodigoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtCodigoFocusLost
        // TODO add your handling code here:
        Utiles.establecerFocusInactivo(edtCodigo);
    }//GEN-LAST:event_edtCodigoFocusLost

    private void edtCodigoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCodigoKeyPressed
        // TODO add your handling code here:
        int key = evt.getKeyCode();

        switch (key)
        {
            case KeyEvent.VK_ENTER:
            {
                iniciarProc0(evt);
                break;
            }
            default:
        }
    }//GEN-LAST:event_edtCodigoKeyPressed

    private void edtCodigoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCodigoKeyTyped
        // TODO add your handling code here:
        Utiles.suprimirComilla(evt);
        Utiles.suprimirComilla(edtCodigo);
    }//GEN-LAST:event_edtCodigoKeyTyped

    private void tablaCodigoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaCodigoMouseClicked
        // TODO add your handling code here:
        Utiles.seleccionar(edtCodigo);
    }//GEN-LAST:event_tablaCodigoMouseClicked

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        try {
            iniciarProc2();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnEliminarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JTextField edtCodigo;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaCodigo;
    // End of variables declaration//GEN-END:variables
    
    //**********************    Acciones ************************
    
    private boolean consultar(List<Codigo> list, String codigo) {
        boolean band;

        band = false;

        for (Codigo obj : list) {
            if (obj.getCodigo().equals(codigo)) {
                band = true;
                break;
            }
        }

        return band;
    }
   
    private Codigo obtener(List<Codigo> list, String codigo) {
        Codigo objRet = null;

        for (Codigo obj : list) {
            if (obj.getCodigo().equals(codigo)) {
                objRet = obj;
                break;
            }
        }

        return objRet;
    }
    
    private boolean isCodigoInv(String value)
    {
        return this.codigoInv.equals(value);
    }
    
    private void iniciarProc0(java.awt.event.KeyEvent evt)
    {
        String codigo = Utiles.obtenerValor(edtCodigo);
        
        if (codigo.isEmpty())
        {
            // Hacer nada.
        } else
        {         
            if (consultar(listaCopia, codigo) || isCodigoInv(codigo)) {
                Utiles.seleccionarFila(tablaCodigo, COL_CODIGO, codigo);
            } else {
                
                if (gestor.consultarInvPorCodigo(codigo)) {
                    // Hacer nada.
                    Mensaje.mostrarMensajeExisteProducto(rootPane);
                    
                    FConsultaInventario form = new FConsultaInventario();

                    form.cargarInventario(gestor.obtenerInvPorCodigoM2(codigo));
                    form.mostrarInformacion();
                    form.setVisible(true);
                } else {
                    Codigo objCod = new Codigo(codigo);
                    
                    objCod.setEstado(ESTADO_ALTA);
                    listaCopia.add(objCod);
                    actualizar();
                    Utiles.seleccionarFilaM2(tablaCodigo, listaCopia.size() - 1);
                }                
            }
        }
        Utiles.seleccionarYBorrar(evt, edtCodigo);
    }
    
    private void iniciarProc1()
    {
        listaCodigo.clear();
        listaCodigo.addAll(listaCopia);
        formInv.actualizar();
        this.dispose();
    }
    
    private void iniciarProc2()
    {
        switch(mensaje)
        {
            case MENSAJE_NUEVO_INVENTARIO:
            {
                iniciarProc3();
                break;
            }
            case MENSAJE_MODIFICAR_INVENTARIO:
            {
                iniciarProc4();
                break;
            }
        }
    }
    
    private void iniciarProc3()
    {
        String codigo = Utiles.obtenerValor(tablaCodigo, COL_CODIGO);
        
        if (codigo.isEmpty())
        {
            // Hacer nada.
        } else
        {
            if (consultar(listaCopia, codigo))
            {
                Codigo obj = obtener(listaCopia, codigo);
                
                listaCopia.remove(obj);
                this.actualizar();
                Utiles.seleccionarFila0(tablaCodigo);
            }
        }
        Utiles.seleccionar(edtCodigo);
    }
    
    private void iniciarProc4()
    {
        String codigo = Utiles.obtenerValor(tablaCodigo, COL_CODIGO);
        
        if (codigo.isEmpty())
        {
            // Hacer nada.
        } else
        {
            if (consultar(listaCopia, codigo))
            {
                Codigo obj = obtener(listaCopia, codigo);
                
                obj.setEstado(ESTADO_BAJA);
                this.actualizar();
                Utiles.seleccionarFila0(tablaCodigo);
            }
        }
        Utiles.seleccionar(edtCodigo);
    }
    
    private void iniciarProc5()
    {
        listaCodigo.clear();
        listaCodigo.addAll(listaCopia);
        formModInv.actualizar();
        this.dispose();
        
    }
    
     //*************************** Formulario *********************
    
    private void iniciarFormulario() {
        if (listaCopia.isEmpty()) {
            // Hacer nada.
        } else {
            mostrarListaEnTabla(tablaCodigo, listaCopia);
            Utiles.seleccionarFila0(tablaCodigo);
        }
    }

    /**
     * Carga la nueva lista en tabla.
     *
     * @param tabla
     * @param l 
     */
    private void mostrarListaEnTabla(JTable tabla, List<Codigo> l)
    {
        if (l == null || l.isEmpty())
        {
            // Hacer nada.
        } else
        {
            int index = -1;
            DefaultTableModel model = (DefaultTableModel) tabla.getModel();
            
            for (Codigo codigo : l) {
                if (codigo.isEstado()) {
                    index++;
                    String p0 = codigo.getCodigo();
                    String[] datos = {p0};

                    model.insertRow(index, datos);
                }
            }
        }
    }
    
    private void limpiarTabla()
    {
        Utiles.limpiarTabla(tablaCodigo);
    }
    
    private void limpiarFormulario() {
        limpiarTabla();
    }
    
    private void actualizar()
    {
        limpiarTabla();
        mostrarListaEnTabla(tablaCodigo, listaCopia);
    }
}

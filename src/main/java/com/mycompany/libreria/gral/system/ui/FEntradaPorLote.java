/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.libreria.gral.system.ui;

import com.mycompany.libreria.gral.system.controller.GestorLibreriaGralSystem;
import com.mycompany.libreria.gral.system.model.Entrada;
import com.mycompany.libreria.gral.system.model.Inventario;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import utiles.Clave;
import utiles.Mensaje;
import utiles.Utiles;

/**
 *
 * @author KEVIN
 */
public class FEntradaPorLote extends javax.swing.JFrame {

    private final int COL_CODIGO_LOTE = 0;
    private final int COL_CODIGO = 1;
    private final int COL_DETALLE = 2;
    private final int COL_CANT_ENTRADA = 3;
    private final int COL_UNID_OFERT = 4;
    private final int COL_COSTO_UNIT = 5;
    private final int COL_PRECIO_VENTA = 6;

    private GestorLibreriaGralSystem gestor;
    private MainFrame mainFrame;
    private List<Entrada> listaEntradas;

    public FEntradaPorLote(MainFrame mainFrame, GestorLibreriaGralSystem gestor) {
        this.mainFrame = mainFrame;
        this.gestor = gestor;
        initComponents();

        limpiarFormulario();
        iniciarConfiguraciones();
        inicializarComponentesLogicos();
        inicializarComponentesFisicos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PopMTablaEntrada = new javax.swing.JPopupMenu();
        mItemModificarInv = new javax.swing.JMenuItem();
        mItemCopiarCod = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaEntradaLote = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        edtCodigo = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        btnCancelar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        edtCodigoLote = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();

        mItemModificarInv.setText("Modificar inventario");
        mItemModificarInv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemModificarInvActionPerformed(evt);
            }
        });
        PopMTablaEntrada.add(mItemModificarInv);

        mItemCopiarCod.setText("Copiar c贸digo");
        mItemCopiarCod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemCopiarCodActionPerformed(evt);
            }
        });
        PopMTablaEntrada.add(mItemCopiarCod);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Entrada por Lote");
        setAlwaysOnTop(true);
        setResizable(false);

        tablaEntradaLote.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tablaEntradaLote.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Cod. de Lote", "C贸digo", "Descripci贸n", "Cant. de entrada", "Unid. ofet.", "Costo unit.", "Precio unit."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaEntradaLote.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tablaEntradaLote.setFocusCycleRoot(true);
        tablaEntradaLote.setRowHeight(32);
        tablaEntradaLote.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tablaEntradaLote.getTableHeader().setReorderingAllowed(false);
        tablaEntradaLote.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaEntradaLoteMouseClicked(evt);
            }
        });
        tablaEntradaLote.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tablaEntradaLoteKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tablaEntradaLote);
        if (tablaEntradaLote.getColumnModel().getColumnCount() > 0) {
            tablaEntradaLote.getColumnModel().getColumn(0).setPreferredWidth(120);
            tablaEntradaLote.getColumnModel().getColumn(1).setPreferredWidth(200);
            tablaEntradaLote.getColumnModel().getColumn(2).setPreferredWidth(400);
            tablaEntradaLote.getColumnModel().getColumn(3).setPreferredWidth(100);
            tablaEntradaLote.getColumnModel().getColumn(4).setPreferredWidth(80);
            tablaEntradaLote.getColumnModel().getColumn(5).setPreferredWidth(100);
            tablaEntradaLote.getColumnModel().getColumn(6).setPreferredWidth(100);
        }

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel5.setText("C贸digo : ");

        edtCodigo.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        edtCodigo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                edtCodigoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                edtCodigoFocusLost(evt);
            }
        });
        edtCodigo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                edtCodigoMouseClicked(evt);
            }
        });
        edtCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                edtCodigoKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                edtCodigoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                edtCodigoKeyTyped(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        edtCodigoLote.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        edtCodigoLote.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                edtCodigoLoteFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                edtCodigoLoteFocusLost(evt);
            }
        });
        edtCodigoLote.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                edtCodigoLoteMouseClicked(evt);
            }
        });
        edtCodigoLote.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                edtCodigoLoteKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                edtCodigoLoteKeyTyped(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel6.setText("C贸digo de lote :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(edtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(96, 96, 96)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(edtCodigoLote, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 112, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(edtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(edtCodigoLote, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        Clave result = Clave.RESULT_OK;

        try {
            result = iniciarProc1();
        } catch (Exception e) {
            e.printStackTrace();
            result = Clave.RESULT_ERROR;
        }

        switch (result) {
            case RESULT_ERROR: {
                Mensaje.mostrarMensaje5(rootPane);
                break;
            }
            case RESULT_ERROR_BD: {
                Mensaje.mostrarMensaje3(this);
                dispose();
                break;
            }
            case RESULT_CAMPO_BLANCO: {
                Mensaje.mostrarMensajeSeleccion(rootPane);
                break;
            }
            case RESULT_NO_EXISTE: {
                Mensaje.mostrarMensajeNoEncontrado(rootPane);
                break;
            }
            case RESULT_OK: {
                actualizar();
                Utiles.establecerFocusActivoG(edtCodigo);
                break;
            }
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
        Clave result;

        try {
            result = iniciarProc4();
        } catch (Exception e) {
            e.printStackTrace();
            result = Clave.RESULT_ERROR;
        }

        switch (result) {
            case RESULT_ERROR: {
                Mensaje.mostrarMensaje5(rootPane);
                dispose();
                break;
            }
            case RESULT_ERROR_CAMPOS_INVALIDOS: {
                Mensaje.mostrarMensaje2(this);
                break;
            }
            case RESULT_ERROR_BD: {
                Mensaje.mostrarMensaje3(this);
                dispose();
                break;
            }
            case RESULT_LISTA_VACIA: {
                Mensaje.mostrarMensaje16(rootPane);
                break;
            }
            case RESULT_OK: {

                Mensaje.mostrarMensaje18(rootPane);
                try {
                    mainFrame.actualizar();
                } catch (Exception e) {
                }
                dispose();
                break;
            }
            case RESULT_INCONSISTENCIA: {
                Mensaje.mostrarMensaje30(rootPane);
                break;
            }
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void edtCodigoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCodigoKeyPressed
        // TODO add your handling code here:

        int key = evt.getKeyCode();

        if (key == KeyEvent.VK_ENTER) {
            Clave result = Clave.RESULT_OK;
            String codigo = "";

            try {
                codigo = this.edtCodigo.getText().trim();

                if (codigo == null || codigo.isEmpty()) {
                    result = Clave.RESULT_CAMPO_BLANCO;
                } else {
                    result = iniciarProc3(codigo);
                }

            } catch (Exception e) {
                e.printStackTrace();
                result = Clave.RESULT_ERROR;
            }

            switch (result) {
                case RESULT_ERROR: {
                    Mensaje.mostrarMensaje5(rootPane);
                    break;
                }
                case RESULT_ERROR_BD: {
                    Mensaje.mostrarMensaje3(this);
                    dispose();
                    break;
                }
                case RESULT_CAMPO_BLANCO: {
                    // Hacer nada.
                    break;
                }
                case RESULT_EXISTE: {
                    Utiles.limpiarSeleccion(tablaEntradaLote);
                    final int COL_CODIGO = 1;

                    Utiles.seleccionarFila(tablaEntradaLote, COL_CODIGO, codigo);
                    break;
                }
                case RESULT_NO_EXISTE: {
                    Mensaje.mostrarMensajeNoEncontrado(rootPane);
                    break;
                }
                case RESULT_OK: {
                    actualizar();
                    Utiles.establecerFocusActivoG(edtCodigo);
                    final int COL_CODIGO = 1;

                    Utiles.seleccionarFila(tablaEntradaLote, COL_CODIGO, codigo);
                    break;
                }
            }
        }
    }//GEN-LAST:event_edtCodigoKeyPressed

    private void edtCodigoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtCodigoFocusGained
        // TODO add your handling code here:
        Utiles.establecerFocusActivoG(edtCodigo);
    }//GEN-LAST:event_edtCodigoFocusGained

    private void edtCodigoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtCodigoFocusLost
        // TODO add your handling code here:
        Utiles.establecerFocusInactivo(edtCodigo);
    }//GEN-LAST:event_edtCodigoFocusLost

    private void tablaEntradaLoteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaEntradaLoteMouseClicked
        // TODO add your handling code here:
        if (evt.getButton() == MouseEvent.BUTTON3) {
            //Se presiono el boton derecho
            PopMTablaEntrada.show(evt.getComponent(),
                    evt.getX(), evt.getY()); //... mostramos el menu en la ubicacion del raton
        } else {
            this.PopMTablaEntrada.setVisible(false);
        }
    }//GEN-LAST:event_tablaEntradaLoteMouseClicked

    private void mItemModificarInvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemModificarInvActionPerformed
        // TODO add your handling code here:
        String codigo = Utiles.obtenerValor(tablaEntradaLote, COL_CODIGO);

        if (codigo == null || codigo.trim().isEmpty()) {
            Mensaje.mostrarMensajeSeleccion(rootPane);
        } else {
            FModificarInventario form = new FModificarInventario(mainFrame, gestor, codigo);

            form.setVisible(true);
        }

    }//GEN-LAST:event_mItemModificarInvActionPerformed

    private void mItemCopiarCodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemCopiarCodActionPerformed
        // TODO add your handling code here:
        final int COL_CODIGO = 1;

        Utiles.copiarAPortapapeles(tablaEntradaLote, COL_CODIGO);
    }//GEN-LAST:event_mItemCopiarCodActionPerformed

    private void edtCodigoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCodigoKeyTyped
        // TODO add your handling code here:
        int comilla = 39;

        if (evt.getKeyChar() == comilla) {
            evt.consume();
        }

        Utiles.suprimirComilla(edtCodigo);
        Utiles.seleccionarYBorrar(evt, edtCodigo);
    }//GEN-LAST:event_edtCodigoKeyTyped

    private void edtCodigoLoteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtCodigoLoteFocusGained
        // TODO add your handling code here:
        Utiles.establecerFocusActivoG(edtCodigoLote);
    }//GEN-LAST:event_edtCodigoLoteFocusGained

    private void edtCodigoLoteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtCodigoLoteFocusLost
        // TODO add your handling code here:
        Utiles.establecerFocusInactivo(edtCodigoLote);
    }//GEN-LAST:event_edtCodigoLoteFocusLost

    private void edtCodigoLoteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCodigoLoteKeyPressed
        // TODO add your handling code here:

        int key = evt.getKeyCode();

        if (key == KeyEvent.VK_ENTER) {
            Clave result = Clave.RESULT_OK;
            String codigoLote = "";

            try {
                codigoLote = this.edtCodigoLote.getText().trim();

                if (codigoLote == null || codigoLote.isEmpty()) {
                    result = Clave.RESULT_CAMPO_BLANCO;
                } else {
                    result = iniciarProc5(codigoLote);
                }
            } catch (Exception e) {
                e.printStackTrace();
                result = Clave.RESULT_ERROR;
            }

            switch (result) {
                case RESULT_ERROR: {
                    Mensaje.mostrarMensaje5(rootPane);
                    break;
                }
                case RESULT_ERROR_BD: {
                    Mensaje.mostrarMensaje3(this);
                    dispose();
                    break;
                }
                case RESULT_CAMPO_BLANCO: {
                    // Hacer nada.
                    break;
                }
                case RESULT_NO_EXISTE: {
                    Mensaje.mostrarMensajeNoEncontrado(rootPane);
                    break;
                }
                case RESULT_OK: {
                    actualizar();
                    final int COL_CODIGO_LOTE = 0;

                    Utiles.seleccionarFila(tablaEntradaLote, COL_CODIGO_LOTE, codigoLote);
                    break;
                }
            }
        }
    }//GEN-LAST:event_edtCodigoLoteKeyPressed

    private void edtCodigoLoteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCodigoLoteKeyTyped
        int comilla = 39;

        if (evt.getKeyChar() == comilla) {
            evt.consume();
        }

        Utiles.suprimirComilla(edtCodigoLote);
        Utiles.seleccionarYBorrar(evt, edtCodigoLote);
    }//GEN-LAST:event_edtCodigoLoteKeyTyped

    private void tablaEntradaLoteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tablaEntradaLoteKeyReleased
        // TODO add your handling code here:
        Utiles.establecerFocusActivoG(edtCodigo);
    }//GEN-LAST:event_tablaEntradaLoteKeyReleased

    private void edtCodigoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCodigoKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_edtCodigoKeyReleased

    private void edtCodigoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_edtCodigoMouseClicked
        // TODO add your handling code here:
        Utiles.pararEdicion(tablaEntradaLote);
    }//GEN-LAST:event_edtCodigoMouseClicked

    private void edtCodigoLoteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_edtCodigoLoteMouseClicked
        // TODO add your handling code here:
        Utiles.pararEdicion(tablaEntradaLote);
    }//GEN-LAST:event_edtCodigoLoteMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPopupMenu PopMTablaEntrada;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JTextField edtCodigo;
    private javax.swing.JTextField edtCodigoLote;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem mItemCopiarCod;
    private javax.swing.JMenuItem mItemModificarInv;
    private javax.swing.JTable tablaEntradaLote;
    // End of variables declaration//GEN-END:variables

    //**************************** Formulario *****************************************
    private void limpiarFormulario() {
        limpiarTablaLote();
        limpiarCamposEntradaLote();
    }

    private void limpiarTablaLote() {
        String[] columnNames = {
            "<html><center><br>C贸digo de lote<br> <br></html>",
            "<html> C贸digo <br></html>",
            "<html> Descripci贸n <br></html>",
            "<html> Cant. de <br>entrada </html>",
            "<html> Unid. <br>ofert. </html>",
            "<html> <center>Costo unit. <br></html>",
            "<html> <center>Precio unit. <br></html>"
        };

        Utiles.limpiarTabla(tablaEntradaLote, columnNames);
    }

    private void limpiarCamposEntradaLote() {
        this.edtCodigo.setText("");
    }

    private void iniciarConfiguraciones() {
        Utiles.suprimirComilla(tablaEntradaLote);
    }

    private void mostrarListaEnTabla(List<Entrada> lista) {
        int INDEX = -1;
        DefaultTableModel model = (DefaultTableModel) tablaEntradaLote.getModel();

        for (Entrada e : lista) {

            String[] datos = {
                e.getInventario().getProducto().getCodigoLote(),
                e.getInventario().getProducto().getCodigo(),
                e.getInventario().getProducto().getDescripcion(),
                String.valueOf(e.getCantidadEntrada()),
                Utiles.formatearM2(e.getInventario().getUnidOf()),
                Utiles.formatear(e.getPrecioCosto()),
                Utiles.formatear(e.getPrecioVenta())
            };

            INDEX++;
            model.insertRow(INDEX, datos);
        }
    }

    /**
     * Inicializacion
     */
    private void inicializarComponentesLogicos() {
        this.listaEntradas = new ArrayList<>();
    }

    private void inicializarComponentesFisicos() {
        DefaultTableModel model = (DefaultTableModel) this.tablaEntradaLote.getModel();

        model.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == TableModelEvent.UPDATE) {
                    try {
                        iniciarProc2();
                    } catch (Exception ex) {
                    }
                }
            }
        });

        this.tablaEntradaLote.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                Utiles.establecerFocusActivoG(edtCodigo);
            }

            @Override
            public void mousePressed(MouseEvent e) {
            }

            @Override
            public void mouseReleased(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
        });
    }

    private boolean existenCamposNoHomogeneos() {
        boolean bandera = false;

        for (Entrada e : listaEntradas) {

            Integer cantidadEntrada = e.getCantidadEntrada();
            BigDecimal precioVenta = e.getPrecioVenta();
            BigDecimal precioCosto = e.getPrecioCosto();

            if (cantidadEntrada < 0) {
                bandera = true;
                break;
            }

            if (precioCosto.doubleValue() < 0 || precioVenta.doubleValue() < 0) {
                bandera = true;
                break;
            } else {
                if (precioCosto.doubleValue() >= precioVenta.doubleValue()) {
                    bandera = true;
                    break;
                }
            }
        }

        return bandera;
    }

    private void actualizar() {
        Utiles.pararEdicion(tablaEntradaLote);
        this.limpiarTablaLote();
        this.mostrarListaEnTabla(listaEntradas);
    }

    //********************************** Procedimientos ***********************************
    private Clave iniciarProc1() {
        Clave result = Clave.RESULT_OK;

        String codigo = Utiles.obtenerValor(tablaEntradaLote, COL_CODIGO);

        if (codigo == null || codigo.isEmpty()) {
            return Clave.RESULT_CAMPO_BLANCO;
        } else {
            if (consultar(listaEntradas, codigo)) {
                Entrada ent = obtener(listaEntradas, codigo);

                eliminar(listaEntradas, ent);
            } else {
                return Clave.RESULT_NO_EXISTE;
            }
        }

        return result;
    }

    private void iniciarProc2() {
        // Se obtiene el modelo de la tabla y la fila/columna que han cambiado.
        int fila = tablaEntradaLote.getSelectedRow();
        int columna = tablaEntradaLote.getSelectedColumn();

        if (fila < 0 || columna < 0) {

        } else {
            String codigo = ((String) tablaEntradaLote.getValueAt(fila, COL_CODIGO));

            if (consultar(listaEntradas, codigo)) {

                String value = (String) tablaEntradaLote.getValueAt(fila, columna);
                Entrada entrada = obtener(listaEntradas, codigo);

                modificar(entrada, value, columna);
            }

            actualizar();
            Utiles.establecerFocusActivoG(edtCodigo);
        }
    }

    private Clave iniciarProc3(String codigo) {
        Clave result = Clave.RESULT_OK;
        Inventario inv = null;

        if (consultar(listaEntradas, codigo)) {
            result = Clave.RESULT_EXISTE;
        } else {
            if (gestor.consultarInvPorCodigo(codigo)) {
                inv = gestor.obtenerInvPorCodigoM2(codigo);
            }

            if (inv == null) {
                result = Clave.RESULT_NO_EXISTE;
            } else {
                agregarALista(inv);
            }
        }

        return result;
    }

    /**
     * Procedimiento que guarda la entrada de inventarios.
     *
     * @return
     */
    private Clave iniciarProc4() {
        Clave result = Clave.RESULT_OK;

        if (listaEntradas.isEmpty()) {
            return Clave.RESULT_LISTA_VACIA;
        }

        if (existenCamposNoHomogeneos()) {
            return Clave.RESULT_INCONSISTENCIA;
        }

        try {
            gestor.guardarEntradas(listaEntradas);
        } catch (Exception excp) {
            excp.printStackTrace();
            return Clave.RESULT_ERROR_BD;
        }

        return result;
    }

    private Clave iniciarProc5(String codLote) throws Exception {
        Clave result = Clave.RESULT_OK;

        try {
            if (gestor.consultarInventarioPorCodigoLote(codLote)) {
                List<Inventario> list = new ArrayList<>();

                list.addAll(gestor.obtenerInventariosPorCodigoLote(codLote));

                agregarALista(list);
            } else {
                return Clave.RESULT_NO_EXISTE;
            }
        } catch (Exception e) {
            e.printStackTrace();
            return Clave.RESULT_ERROR_BD;
        }

        return result;
    }

    /**
     * Selecciona los inventarios de acuerdo al c贸digo de lote.
     *
     * @param codLote
     */
    private void iniciarProc7(String codLote) {
        if (codLote == null || codLote.isEmpty()) {
            // Hacer nada.
        } else {
            Utiles.limpiarSeleccion(tablaEntradaLote);
            final int COL_CODIGO_LOTE = 0;

            Utiles.seleccionarFila(tablaEntradaLote, COL_CODIGO_LOTE, codLote);
        }
    }

    private void agregarALista(Inventario inv) {
        if (consultar(listaEntradas, inv.getProducto().getCodigo())) {
            // Hacer nada.
        } else {
            Entrada ent = generarNuevaEntrada(inv);

            listaEntradas.add(ent);
        }
    }

    private void agregarALista(List<Inventario> lista) {
        for (Inventario inv : lista) {
            // Verifica si ya se encuentra en la lista de INVENTARIOS.
            if (consultar(listaEntradas, inv.getProducto().getCodigo())) {
                // Hacer nada.
            } else {
                agregarALista(inv);
            }
        }
    }

    private boolean consultar(List<Entrada> lista, String codigo) {
        boolean band = false;

        for (Entrada ent : lista) {
            if (ent.getCodigo().equals(codigo)) {
                band = true;
                break;
            }
        }

        return band;
    }

    private Entrada obtener(List<Entrada> l, String codigo) {
        Entrada ent;

        ent = null;

        for (Entrada element : l) {
            if (element.getInventario().getProducto().getCodigo().equals(codigo)) {
                ent = element;
                break;
            }
        }

        return ent;
    }

    private void modificar(Entrada ent, String value, int columna) {
        switch (columna) {
            case COL_DETALLE: {
                if (value == null || value.isEmpty()) {
                    // Hacer nada.
                } else {
                    ent.getInventario().getProducto().setDescripcion(value);
                }
                break;
            }

            case COL_CANT_ENTRADA: {
                try {
                    int cantEnt = Integer.valueOf(value);

                    if (cantEnt <= 0) {
                        // Hacer nada.
                    } else {
                        ent.setCantidadEntrada(cantEnt);
                        ent.actualizarDatosEntrada();
                    }

                } catch (Exception e) {
                }
                break;
            }

            case COL_COSTO_UNIT: {
                
                try {
                    if (value.contains(",")) {
                        value = value.replace(",", ".");
                    }
                    
                    BigDecimal costoUnit = new BigDecimal(value);

                    if (costoUnit.doubleValue() < 0) {
                        // Hacer nada.
                    } else {
                        ent.setPrecioCosto(costoUnit);
                        ent.actualizarDatosEntrada();
                    }
                } catch (Exception ex) {
                }
                break;
            }
            case COL_PRECIO_VENTA: {
                try {
                    if (value.contains(",")) {
                        value = value.replace(",", ".");
                    }
                    
                    BigDecimal ventaUnit = new BigDecimal(value);

                    if (ventaUnit.doubleValue() < 0) {
                        // Hacer nada.
                    } else {
                        ent.setPrecioVenta(ventaUnit);
                        ent.actualizarDatosEntrada();
                    }
                } catch (Exception ex) {
                }
                break;
            }
        }
    }

    private void eliminar(List<Entrada> lista, Entrada ent) {
        lista.remove(ent);
    }

    private Entrada generarNuevaEntrada(Inventario inv) {
        Entrada ent = new Entrada();

        boolean ESTADO_ACTIVO = true;
        int cantEnt = 0;

        Date fechaIngreso = Utiles.obtenerFechaActualM4();

        // Inicializa objeto Entrada
        ent.setInventario(inv);
        ent.setCantidadEntrada(cantEnt);
        ent.setPrecioCosto(inv.getCostoUnitario());
        ent.setPrecioVenta(inv.getpVenta());
        ent.setFechaEntrada(fechaIngreso);
        ent.setEstado(ESTADO_ACTIVO);

        ent.actualizarDatosEntrada();

        return ent;
    }
}

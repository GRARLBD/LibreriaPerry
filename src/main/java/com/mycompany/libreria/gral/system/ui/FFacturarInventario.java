/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.libreria.gral.system.ui;

import com.mycompany.libreria.gral.system.controller.GestorLibreriaGralSystem;
import com.mycompany.libreria.gral.system.model.Factura;
import com.mycompany.libreria.gral.system.model.Inventario;
import com.mycompany.libreria.gral.system.model.Oferta;
import com.mycompany.libreria.gral.system.model.Salida;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import utiles.Clave;
import utiles.Mensaje;
import utiles.Utiles;

/**
 *
 * @author KEVIN
 */
public class FFacturarInventario extends JFrame {

    private final boolean EST_ACTIVO = true;
    private final int COL_CODIGO = 1;
    private final int COL_DESC = 2;
    private final int COL_UNID_OF = 3;
    private final int COL_PREC_VEN = 4;
    private final int COL_CANT = 5;
    private final String DEFAULT_TOTAL = "0.00";
    private final String SIMBOLO_ERROR = "-----";

    private MainFrame mainFrame;
    private GestorLibreriaGralSystem gestor;
    private String codigoFactura;
    private List<Salida> listaSalida;
    private BigDecimal total;
    private BigDecimal pago;
    private BigDecimal vuelto;

    /**
     * Creates new form FFacturarProducto
     *
     * @param mainFrame
     * @param gestor
     */
    public FFacturarInventario(MainFrame mainFrame, GestorLibreriaGralSystem gestor) {
        initComponents();

        this.mainFrame = mainFrame;
        this.gestor = gestor;
        resetearCamposLogicos();
        limpiarFormulario();
        iniciarFormulario();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuTF = new javax.swing.JPopupMenu();
        mItemConsulta = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        scrPaneTableDetalleFactura = new javax.swing.JScrollPane();
        tablaDetalleFactura = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        edtCodigo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        edtNomCl = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        btnNuevo = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jPanel24 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        edtTotal = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        edtPago = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        edtVuelto = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        mArchivo = new javax.swing.JMenu();
        mItemCerrar = new javax.swing.JMenuItem();
        mDescripcion = new javax.swing.JMenu();

        mItemConsulta.setText("Consultar");
        mItemConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemConsultaActionPerformed(evt);
            }
        });
        menuTF.add(mItemConsulta);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Facturaraci贸n");
        setFocusCycleRoot(false);
        setResizable(false);

        tablaDetalleFactura.setFont(new java.awt.Font("Tahoma", 0, 23)); // NOI18N
        tablaDetalleFactura.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Nro.", "C贸digo", "Descripci贸n", "Unid.ofert.", "Precio de venta", "Cantidad", "Sub-total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaDetalleFactura.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tablaDetalleFactura.setRowHeight(35);
        tablaDetalleFactura.setSelectionBackground(new java.awt.Color(51, 255, 51));
        tablaDetalleFactura.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablaDetalleFactura.getTableHeader().setReorderingAllowed(false);
        tablaDetalleFactura.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaDetalleFacturaMouseClicked(evt);
            }
        });
        tablaDetalleFactura.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tablaDetalleFacturaKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tablaDetalleFacturaKeyReleased(evt);
            }
        });
        scrPaneTableDetalleFactura.setViewportView(tablaDetalleFactura);
        if (tablaDetalleFactura.getColumnModel().getColumnCount() > 0) {
            tablaDetalleFactura.getColumnModel().getColumn(0).setMinWidth(40);
            tablaDetalleFactura.getColumnModel().getColumn(0).setPreferredWidth(40);
            tablaDetalleFactura.getColumnModel().getColumn(0).setMaxWidth(60);
            tablaDetalleFactura.getColumnModel().getColumn(1).setPreferredWidth(100);
            tablaDetalleFactura.getColumnModel().getColumn(2).setPreferredWidth(450);
            tablaDetalleFactura.getColumnModel().getColumn(3).setMinWidth(30);
            tablaDetalleFactura.getColumnModel().getColumn(3).setPreferredWidth(85);
            tablaDetalleFactura.getColumnModel().getColumn(3).setMaxWidth(90);
            tablaDetalleFactura.getColumnModel().getColumn(4).setPreferredWidth(80);
            tablaDetalleFactura.getColumnModel().getColumn(5).setMinWidth(30);
            tablaDetalleFactura.getColumnModel().getColumn(5).setPreferredWidth(80);
            tablaDetalleFactura.getColumnModel().getColumn(5).setMaxWidth(70);
            tablaDetalleFactura.getColumnModel().getColumn(6).setPreferredWidth(60);
        }

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        jLabel1.setText("C贸digo:");

        edtCodigo.setFont(new java.awt.Font("Tahoma", 1, 34)); // NOI18N
        edtCodigo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                edtCodigoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                edtCodigoFocusLost(evt);
            }
        });
        edtCodigo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                edtCodigoMouseClicked(evt);
            }
        });
        edtCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                edtCodigoKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                edtCodigoKeyTyped(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        jLabel2.setText("Cliente :");

        edtNomCl.setFont(new java.awt.Font("Tahoma", 0, 32)); // NOI18N
        edtNomCl.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                edtNomClFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                edtNomClFocusLost(evt);
            }
        });
        edtNomCl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                edtNomClMouseClicked(evt);
            }
        });
        edtNomCl.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                edtNomClKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(edtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 96, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(edtNomCl, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(scrPaneTableDetalleFactura))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(edtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(edtNomCl, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrPaneTableDetalleFactura, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel13.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnImprimir.setText("Imprimir");
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnImprimir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(btnNuevo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEliminar))
                .addContainerGap())
        );

        jPanel24.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel13.setText("Total :");

        edtTotal.setEditable(false);
        edtTotal.setBackground(new java.awt.Color(51, 255, 51));
        edtTotal.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        edtTotal.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout jPanel24Layout = new javax.swing.GroupLayout(jPanel24);
        jPanel24.setLayout(jPanel24Layout);
        jPanel24Layout.setHorizontalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel24Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(edtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel24Layout.setVerticalGroup(
            jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel24Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(edtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel14.setText("Paga con:");

        edtPago.setBackground(new java.awt.Color(153, 204, 255));
        edtPago.setFont(new java.awt.Font("Tahoma", 1, 40)); // NOI18N
        edtPago.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        edtPago.setSelectionColor(new java.awt.Color(255, 255, 255));
        edtPago.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                edtPagoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                edtPagoFocusLost(evt);
            }
        });
        edtPago.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                edtPagoMouseClicked(evt);
            }
        });
        edtPago.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                edtPagoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                edtPagoKeyTyped(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel15.setText("Vuelto:");

        edtVuelto.setEditable(false);
        edtVuelto.setBackground(new java.awt.Color(255, 255, 255));
        edtVuelto.setFont(new java.awt.Font("Tahoma", 1, 40)); // NOI18N
        edtVuelto.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(edtPago, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(edtVuelto)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(edtVuelto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(edtPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        mArchivo.setText("Archivo");

        mItemCerrar.setText("Cerrar");
        mItemCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemCerrarActionPerformed(evt);
            }
        });
        mArchivo.add(mItemCerrar);

        jMenuBar1.add(mArchivo);

        mDescripcion.setText("Descripci贸n");
        mDescripcion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mDescripcionMouseClicked(evt);
            }
        });
        jMenuBar1.add(mDescripcion);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        // TODO add your handling code here:
        resetearCamposLogicos();
        limpiarFormulario();
        iniciarFormulario();
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        final int ROW_MODIFIED = tablaDetalleFactura.getSelectedRow();

        //  Validaciones
        if (ROW_MODIFIED < 0) {
            Mensaje.mostrarMensajeSeleccion(this);
        } else {
            // Acciones
            String codigo = (String) tablaDetalleFactura.getValueAt(ROW_MODIFIED, COL_CODIGO);

            if (codigo == null || codigo.isEmpty()) {
                Mensaje.mostrarMensajeSeleccion(this);
            } else {
                Clave result;
                boolean band;

                try {
                    band = eliminarSalida(listaSalida, codigo);
                    result = Clave.RESULT_OK;
                } catch (Exception e) {
                    e.printStackTrace();
                    result = Clave.RESULT_ERROR;
                    band = false;
                }

                switch (result) {
                    case RESULT_ERROR: {
                        Mensaje.mostrarMensaje5(this);
                        break;
                    }
                    case RESULT_OK: {
                        if (band) {
                            try {
                                iniciarProc2();
                                verificacionDatos();
                            } catch (Exception e) {
                                e.printStackTrace();
                                Mensaje.mostrarMensaje5(rootPane);
                            }

                        } else {
                            Mensaje.mostrarMensajeNoEncontrado(rootPane);
                        }
                        break;
                    }
                }
                actualizarForm();
            }
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void edtPagoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtPagoKeyReleased
        // TODO add your handling code here:  
        String value;

        try {
            value = edtPago.getText().trim();
        } catch (Exception e) {
            value = null;
        }
        //  Acciones

        if (value == null || value.isEmpty()) {
            //Hacer nada.
            pago = new BigDecimal(-1);
            vuelto = new BigDecimal(-1);
        } else {
            try {
                pago = new BigDecimal(value);

                iniciarProc2();
                verificacionDatos();
            } catch (Exception e) {
                pago = new BigDecimal(-1);
                vuelto = new BigDecimal(-1);
            }
        }

        actualizarForm();
    }//GEN-LAST:event_edtPagoKeyReleased

    private void tablaDetalleFacturaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaDetalleFacturaMouseClicked
        // TODO add your handling code here:    
        final int DOS_CLICK = 2;

        if (evt.getClickCount() == DOS_CLICK) {

            switch (Utiles.obtenerColumnaSeleccionada(tablaDetalleFactura, evt.getPoint())) {
                case COL_CODIGO: {
                    try {
                        iniciarProc13();
                    } catch (Exception e) {
                    }
                    break;
                }
            }
        }

        if (evt.getButton() == MouseEvent.BUTTON3) {
            //Se presiono el boton derecho
            menuTF.show(evt.getComponent(),
                    evt.getX(), evt.getY()); //... mostramos el menu en la ubicacion del raton

        } else {
            this.menuTF.setVisible(false);
        }
        Utiles.establecerFocusActivoG(edtCodigo);
    }//GEN-LAST:event_tablaDetalleFacturaMouseClicked

    private void edtPagoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtPagoKeyTyped
        // TODO add your handling code here:
        char car = evt.getKeyChar();

        if ((car < '0' || car > '9')
                & (car != '.')
                & (evt.getKeyCode() != KeyEvent.VK_DELETE)
                & (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE)) {
            evt.consume();
        }

        Utiles.suprimirComilla(edtPago);
        Utiles.seleccionarYBorrar(evt, edtPago);
    }//GEN-LAST:event_edtPagoKeyTyped

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
        Clave result = Clave.RESULT_OK;

        try {
            result = iniciarProc4();
        } catch (Exception e) {
            e.printStackTrace();
            result = Clave.RESULT_ERROR;
        }

        switch (result) {
            case RESULT_OK: {
                iniciarProc8();
                Mensaje.mostrarMensaje18(rootPane);
                try {
                    this.mainFrame.actualizar();
                } catch (Exception e) {
                }
                break;
            }
            case RESULT_ERROR: {
                Mensaje.mostrarMensaje5(rootPane);
                break;
            }
            case RESULT_ERROR_BD: {
                Mensaje.mostrarMensaje3(rootPane);
                break;
            }
            case RESULT_LISTA_VACIA: {
                Mensaje.mostrarMensaje16(rootPane);
                break;
            }
            case RESULT_ERROR_IMPRESION: {
                Mensaje.mostrarMensaje17(rootPane);
                break;
            }
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        Clave result = Clave.RESULT_OK;

        try {
            result = iniciarProc6();
        } catch (Exception e) {
            e.printStackTrace();
            result = Clave.RESULT_ERROR_IMPRESION;
        }

        switch (result) {
            case RESULT_ERROR_IMPRESION: {
                Mensaje.mostrarMensaje17(rootPane);
                break;
            }
            case RESULT_LISTA_VACIA: {
                Mensaje.mostrarMensaje16(rootPane);
                break;
            }
            case RESULT_ERROR_BD: {
                Mensaje.mostrarMensaje3(rootPane);
                break;
            }
        }

    }//GEN-LAST:event_btnImprimirActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void edtCodigoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtCodigoFocusGained
        // TODO add your handling code here:
        Utiles.establecerFocusActivoG(edtCodigo);
    }//GEN-LAST:event_edtCodigoFocusGained

    private void edtCodigoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtCodigoFocusLost
        // TODO add your handling code here:
        Utiles.establecerFocusInactivo(edtCodigo);
    }//GEN-LAST:event_edtCodigoFocusLost

    private void edtCodigoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCodigoKeyTyped
        // TODO add your handling code here:
        int comilla = 39;

        if (evt.getKeyChar() == comilla) {
            evt.consume();
        }

        Utiles.suprimirComilla(edtCodigo);
        Utiles.seleccionarYBorrar(evt, edtCodigo);
    }//GEN-LAST:event_edtCodigoKeyTyped

    private void mItemConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemConsultaActionPerformed
        // TODO add your handling code here:
        try {
            String codigo = Utiles.obtenerValor(tablaDetalleFactura, COL_CODIGO);

            if (codigo.isEmpty()) {
                // Hacer nada.
            } else {
                iniciarProc3(codigo);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_mItemConsultaActionPerformed

    private void edtNomClFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtNomClFocusGained
        // TODO add your handling code here:
        Utiles.establecerFocusActivoG(edtNomCl);
    }//GEN-LAST:event_edtNomClFocusGained

    private void edtNomClFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtNomClFocusLost
        // TODO add your handling code here:
        Utiles.establecerFocusInactivo(edtNomCl);
    }//GEN-LAST:event_edtNomClFocusLost

    private void tablaDetalleFacturaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tablaDetalleFacturaKeyReleased
        // TODO add your handling code here:
        switch (evt.getKeyCode()) {
            case com.sun.glass.events.KeyEvent.VK_TAB: {
                Utiles.modoTabM1(tablaDetalleFactura);
                break;
            }
            default:
                Utiles.establecerFocusActivoG(edtCodigo);
        }
    }//GEN-LAST:event_tablaDetalleFacturaKeyReleased

    private void edtPagoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtPagoFocusGained
        // TODO add your handling code here:
        Utiles.establecerFocusActivoB(edtPago);
    }//GEN-LAST:event_edtPagoFocusGained

    private void edtPagoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtPagoFocusLost
        // TODO add your handling code here:
        Utiles.establecerFocusInactivo(edtPago);
    }//GEN-LAST:event_edtPagoFocusLost

    private void edtCodigoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCodigoKeyPressed
        // TODO add your handling code here:
        int key = evt.getKeyCode();

        switch (key) {
            case KeyEvent.VK_F12: {
                try {
                    iniciarProc11();
                } catch (Exception e) {
                }
                break;
            }
            case KeyEvent.VK_UP: {
                Utiles.anterior(tablaDetalleFactura);
                break;
            }
            case KeyEvent.VK_DOWN: {
                Utiles.siguiente(tablaDetalleFactura);
                break;
            }
            case KeyEvent.VK_ENTER: {
                Clave result = Clave.RESULT_OK;
                String codigo = "";

                try {
                    codigo = Utiles.limpiar(edtCodigo.getText(), "'");

                    result = iniciarProc0(codigo);

                } catch (Exception e) {
                    e.printStackTrace();
                    result = Clave.RESULT_ERROR;
                }

                switch (result) {
                    case RESULT_CAMPO_BLANCO: {
                        // Hacer nada.
                        break;
                    }
                    case RESULT_EXISTE: {
                        Utiles.seleccionarFila(tablaDetalleFactura, COL_CODIGO, codigo);
                        Utiles.posicionarPorFilaSel(tablaDetalleFactura);
                        Utiles.establecerFocusActivoG(edtCodigo);
                        break;
                    }
                    case RESULT_NO_EXISTE: {
                        Mensaje.mostrarMensajeNoEncontrado(rootPane);
                        Utiles.establecerFocusActivoG(edtCodigo);
                        break;
                    }
                    case RESULT_INICIO_FORMULARIO: {
                        // Hacer nada.
                        break;
                    }
                    case RESULT_OK: {
                        iniciarProc2();
                        verificacionDatos();
                        actualizarForm();
                        Utiles.seleccionarFila(tablaDetalleFactura, COL_CODIGO, codigo);
                        Utiles.establecerFocusActivoG(edtCodigo);
                        Utiles.posicionarPorFilaSel(tablaDetalleFactura);
                        break;
                    }
                    case RESULT_ERROR: {
                        Mensaje.mostrarMensaje5(rootPane);
                        break;
                    }
                    case RESULT_ERROR_BD: {
                        Mensaje.mostrarMensaje3(rootPane);
                        break;
                    }
                }
                break;
            }
        }
    }//GEN-LAST:event_edtCodigoKeyPressed

    private void tablaDetalleFacturaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tablaDetalleFacturaKeyPressed
        // TODO add your handling code here:
        int key = evt.getKeyCode();

        switch (key) {
            case com.sun.glass.events.KeyEvent.VK_UP: {
                Utiles.anterior(tablaDetalleFactura);
                break;
            }
            case com.sun.glass.events.KeyEvent.VK_DOWN: {
                Utiles.siguiente(tablaDetalleFactura);
                break;
            }
        }
    }//GEN-LAST:event_tablaDetalleFacturaKeyPressed

    private void edtNomClKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtNomClKeyTyped
        // TODO add your handling code here:
        Utiles.suprimirComilla(evt);

        String value = Utiles.limpiar(edtNomCl.getText(), "'");

        edtNomCl.setText(value);
    }//GEN-LAST:event_edtNomClKeyTyped

    private void edtCodigoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_edtCodigoMouseClicked
        // TODO add your handling code here:
        Utiles.pararEdicion(tablaDetalleFactura);
        Utiles.seleccionar(edtCodigo);
    }//GEN-LAST:event_edtCodigoMouseClicked

    private void edtNomClMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_edtNomClMouseClicked
        // TODO add your handling code here:
        Utiles.pararEdicion(tablaDetalleFactura);
    }//GEN-LAST:event_edtNomClMouseClicked

    private void edtPagoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_edtPagoMouseClicked
        // TODO add your handling code here:
        Utiles.seleccionar(edtVuelto);
    }//GEN-LAST:event_edtPagoMouseClicked

    private void mItemCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemCerrarActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_mItemCerrarActionPerformed

    private void mDescripcionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mDescripcionMouseClicked
        // TODO add your handling code here:
        try {
            iniciarProc11();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_mDescripcionMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JTextField edtCodigo;
    private javax.swing.JTextField edtNomCl;
    private javax.swing.JTextField edtPago;
    private javax.swing.JTextField edtTotal;
    private javax.swing.JTextField edtVuelto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JMenu mArchivo;
    private javax.swing.JMenu mDescripcion;
    private javax.swing.JMenuItem mItemCerrar;
    private javax.swing.JMenuItem mItemConsulta;
    private javax.swing.JPopupMenu menuTF;
    private javax.swing.JScrollPane scrPaneTableDetalleFactura;
    private javax.swing.JTable tablaDetalleFactura;
    // End of variables declaration//GEN-END:variables

    //********************************** Formulario ****************************************
    /**
     * LIMPIEZA DE COMPONENTES
     */
    private void limpiarFormulario() {
        this.edtCodigo.setText("");
        this.edtVuelto.setText("");
        this.edtPago.setText("");
        this.edtTotal.setText("");
        this.edtNomCl.setText("");

        limpiarTablaCalculadora();
    }

    private void limpiarTablaCalculadora() {
        String[] columnNames = {
            "<html><center> <br> Nro. <br> <br></html>",
            "<html><center> <br> C贸digo <br> <br></html>",
            "<html><center> Descripci贸n <br></html>",
            "<html> Unid. <br>ofert.</html>",
            "<html> <center>Precio <br> unitario <br> </html>",
            "<html><center>Cantidad<br></html>",
            "<html> <center>Sub-Total <br></html>"
        };

        Utiles.limpiarTabla(tablaDetalleFactura, columnNames, true);
    }

    private void inicializarCampos() {
        edtTotal.setText("$ " + DEFAULT_TOTAL);
        edtVuelto.setText(SIMBOLO_ERROR);
    }

    /**
     * Carga de inforamcion
     */
    private void cargarTablaSalida(JTable tabla, List<Salida> l) {

        if (l.isEmpty()) {

        } else {
            DefaultTableModel model = (DefaultTableModel) tabla.getModel();
            int indexRow = -1;
            int nro = 0;

            for (Salida sal : l) {
                indexRow++;
                nro++;

                String p00 = String.valueOf(nro);
                String p0 = sal.getCodigoM2();
                String p1 = sal.getDescripcionM2();
                String p2 = Utiles.formatearM2(sal.getUnidOf());
                String p3 = Utiles.formatear(sal.getpVenta());
                String p4 = String.valueOf(sal.getCant());
                String p5 = Utiles.formatear(sal.getTotalVenta());

                String[] datos = {p00, p0, p1, p2, p3, p4, p5};

                model.insertRow(indexRow, datos);
            }
        }
    }

    private void iniciarFormulario() {
        iniciarConfiguracion();
        inicializarCampos();
        cargarTablaSalida(tablaDetalleFactura, listaSalida);
        habilitarComponentesM2();
        deshabilitarComponentes();

        Utiles.establecerFocusActivoG(edtCodigo);
        Utiles.establecerFondoError(edtVuelto);
    }

    private void iniciarConfiguracion() {
        DefaultTableModel model = (DefaultTableModel) this.tablaDetalleFactura.getModel();

        model.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == TableModelEvent.UPDATE) {
                    try {
                        iniciarProc9();
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
            }
        });

        Utiles.suprimirComilla(tablaDetalleFactura);
    }

    public void actualizarForm() {

        // Limpio y muestro la tabla
        Utiles.pararEdicion(tablaDetalleFactura);
        limpiarTablaCalculadora();
        cargarTablaSalida(tablaDetalleFactura, listaSalida);

        // Muestro el total de la lista de Salidas.
        if (total.doubleValue() < 0) {
            final String VALUE_ERROR = "#ERROR";

            edtTotal.setText(VALUE_ERROR);
        } else {
            edtTotal.setText("$ " + Utiles.formatear(total));
        }

        if (pago.doubleValue() < 0) {
            edtPago.setText("");
        }

        if (vuelto.doubleValue() < 0) {
            edtVuelto.setText(SIMBOLO_ERROR);
            Utiles.establecerFondoError(edtVuelto);
        } else {
            edtVuelto.setText(Utiles.formatear(vuelto));
            Utiles.establecerFondoCorrecto(edtVuelto);
        }
    }

    private void resetearCamposLogicos() {
        listaSalida = new ArrayList<>();

        codigoFactura = "";
        total = new BigDecimal(0);
        pago = new BigDecimal(-1);
        vuelto = new BigDecimal(-1);
    }

    private void pararFormulario() {
        Component[] comp = {tablaDetalleFactura, btnGuardar, btnNuevo, btnImprimir,
            edtCodigo, edtNomCl, btnEliminar, edtPago};

        Utiles.pararFormulario(comp);
        Mensaje.mostrarMensaje5(rootPane);
    }

    private void deshabilitarComponentes() {
        boolean band = false;

        btnImprimir.setEnabled(band);
    }

    private void deshabilitarComponentesM2() {
        boolean band = false;

        btnGuardar.setEnabled(band);
        tablaDetalleFactura.setEnabled(band);
        edtCodigo.setEnabled(band);
        btnEliminar.setEnabled(band);
        edtPago.setEnabled(band);
    }

    private void habilitarComponentes() {
        boolean band = true;

        btnImprimir.setEnabled(band);
    }

    private void habilitarComponentesM2() {
        boolean band = true;

        edtCodigo.setEnabled(band);
        tablaDetalleFactura.setEnabled(band);
        btnGuardar.setEnabled(band);
        btnEliminar.setEnabled(band);
        edtPago.setEnabled(band);
    }
    //******************************* Procedimientos  ***************************************

    private Clave iniciarProc0(String codigo) {
        Clave result = Clave.RESULT_OK;

        if (codigo == null || codigo.isEmpty()) {
            return Clave.RESULT_CAMPO_BLANCO;
        } else {
            Inventario inv = null;

            if (gestor.consultarInvPorCodigo(codigo)) {
                inv = gestor.obtenerInvPorCodigoM2(codigo);
            }

            if (inv == null) {
                return Clave.RESULT_NO_EXISTE;
            } else {
                if (inv.getlOferta().isEmpty()) {
                    Salida sal = generarNuevaSalida(inv);

                    result = agregarAListaSalida(Clave.NUEVA_SALIDA_INVENTARIO, sal);
                } else {
                    // Mostrar formulario. 
                    FOfertas form = new FOfertas(this, inv);
                    form.setVisible(true);

                    result = Clave.RESULT_INICIO_FORMULARIO;
                }
            }
        }

        return result;
    }

    /**
     * Crea una nueva salida, o actualiza una salida.
     *
     * @return
     */
    private String iniciarProc1() {

        String codigo = Utiles.obtenerValor(tablaDetalleFactura, COL_CODIGO);

        if (codigo.isEmpty()) {
            Salida salida = generarNuevaSalida(gestor.generarCodigo());

            agregarAListaSalida(Clave.NUEVA_SALIDA_REG_RAP, salida);

        } else {
            Clave mensaje = Clave.RESULT_SIN_DEFINIR;
            Salida salida = null;
            String value = Utiles.obtenerCambios(tablaDetalleFactura);

            if (consultar(listaSalida, codigo)) {
                salida = obtener(listaSalida, codigo);

                if (salida.isRegRap()) {
                    mensaje = Clave.NUEVA_SALIDA_REG_RAP;
                }
            } else {
                // Hacer nada.
            }

            switch (mensaje) {
                case NUEVA_SALIDA_REG_RAP: {
                    modificarSalida(salida, tablaDetalleFactura.getSelectedColumn(), value);
                    break;
                }
                default: {
                    modificarSalida(salida, tablaDetalleFactura.getSelectedColumn(), value);
                }
            }
        }

        return codigo;
    }

    /**
     * Procesa datos con respecto al total, pago y vuelto de la factura.
     */
    private void iniciarProc2() {

        BigDecimal value1;
        BigDecimal value2;

        // Calculo del total.
        try {
            value1 = calcularTotalFactura(listaSalida);
        } catch (Exception e) {
            value1 = null;
        }

        if (value1 == null) {
            total = new BigDecimal(-1);
            pago = new BigDecimal(-1);
            vuelto = new BigDecimal(-1);
        } else {
            total = value1;

            try {
                value2 = calcularVuelto(total, pago);
            } catch (Exception e) {
                value2 = null;
            }

            if (value2 == null) {
                vuelto = new BigDecimal(-1);
            } else {
                vuelto = value2;
            }
        }
    }

    private Clave iniciarProc3(String codigo) {
        Clave result = Clave.RESULT_OK;
        FConsultaInventario frame = new FConsultaInventario();
        Inventario i = null;

        try {
            if (gestor.consultarInvPorCodigo(codigo)) {
                i = gestor.obtenerInvPorCodigoM2(codigo);
            }
        } catch (Exception e) {
            e.printStackTrace();
            result = Clave.RESULT_ERROR_BD;
        }

        if (i == null) {
            // Hacer nada.
        } else {

            frame.setVisible(true);
            frame.cargarInventario(i);
            frame.mostrarInformacion();
        }

        return result;
    }

    private Clave iniciarProc4() {
        Clave result = Clave.RESULT_OK;

        //  Validaciones
        if (listaSalida.isEmpty()) {
            return Clave.RESULT_LISTA_VACIA;
        }

        try {
            codigoFactura = gestor.guardarFactura(obtenerCliente(),
                    obtenerPago(), obtenerVuelto(),
                    obtenerListaSalida(), obtenerTotalFactura());
        } catch (JRException e) {
            e.printStackTrace();
            return Clave.RESULT_ERROR_IMPRESION;
        } catch (Exception e) {
            e.printStackTrace();
            return Clave.RESULT_ERROR_BD;
        }

        try {
            gestor.actualizarInvenarios(listaSalida);
        } catch (Exception e) {
            e.printStackTrace();
            return Clave.RESULT_ERROR_BD;
        }

        return result;
    }

    private Clave iniciarProc5() throws JRException {

        Clave result = Clave.RESULT_OK;

        try {
            if (gestor.consultarFactura(obtenerCodigoFactura())) {
                Factura fact = gestor.obtenerFactura(obtenerCodigoFactura());

                if (obtenerCliente().isEmpty()) {
                    // Hacer nada.
                } else {
                    fact.setCliente(obtenerCliente());
                    gestor.actualizarFactura(fact);
                    mainFrame.actualizar();
                }

                gestor.imprimir(fact);
            } else {
                Mensaje.mostrarMensaje19(rootPane);
            }
        } catch (Exception e) {
            e.addSuppressed(e);
            return Clave.RESULT_ERROR_BD;
        }

        return result;
    }

    private Clave iniciarProc6() throws JRException {
        Clave result = Clave.RESULT_OK;

        int RESULT_OPTION = JOptionPane.showConfirmDialog(this,
                "Desea imprimir la Factura?", "Confirmar opci贸n.", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (RESULT_OPTION == JOptionPane.OK_OPTION) {
            result = iniciarProc5();
        }

        return result;
    }

    private void iniciarProc9() {
        Clave result = Clave.RESULT_OK;

        String codigo = "";

        try {
            codigo = iniciarProc1();
            iniciarProc2();
            verificacionDatos();
        } catch (Exception e) {
            e.printStackTrace();
            result = Clave.RESULT_ERROR;
        }

        switch (result) {
            case RESULT_ERROR: {
                actualizarForm();
                Mensaje.mostrarMensaje5(rootPane);
                break;
            }
            case RESULT_OK: {
                actualizarForm();
                Utiles.establecerFocusActivoG(edtCodigo);
                Utiles.seleccionarFila(tablaDetalleFactura, COL_CODIGO, codigo);

                break;
            }
        }

    }

    private void iniciarProc8() {
        habilitarComponentes();
        deshabilitarComponentesM2();
    }

    public void iniciarProc10(Inventario inv, Oferta oferta, Clave mensaje) {
        Clave result = Clave.RESULT_SIN_DEFINIR;

        switch (mensaje) {
            case NUEVA_SALIDA_INVENTARIO: {
                Salida sal = generarNuevaSalida(inv);

                result = agregarAListaSalida(mensaje, sal);
                break;
            }
            case NUEVA_SALIDA_OFERTA: {
                Salida sal = generarNuevaSalida(inv, oferta);

                result = agregarAListaSalida(mensaje, sal);
                break;
            }
            default:
                result = Clave.RESULT_SIN_CAMBIOS;
        }

        switch (result) {
            case RESULT_EXISTE: {
                switch (mensaje) {
                    case NUEVA_SALIDA_OFERTA: {
                        Utiles.seleccionarFila(tablaDetalleFactura, COL_CODIGO, oferta.getCodigo());
                        System.out.println("NUEVA OFERTA");
                        break;
                    }
                    case NUEVA_SALIDA_INVENTARIO: {
                        Utiles.seleccionarFila(tablaDetalleFactura, consultarPos(listaSalida, inv));
                        System.out.println("NUEVA INVENTARIO");
                        break;
                    }
                    default:
                }
                Utiles.establecerFocusActivoG(edtCodigo);
                break;
            }
            case RESULT_OK: {
                iniciarProc2();
                verificacionDatos();
                actualizarForm();
                Utiles.seleccionarFilaM2(tablaDetalleFactura, listaSalida.size() - 1);
                Utiles.establecerFocusActivoG(edtCodigo);
                break;
            }
            case RESULT_ERROR: {
                Mensaje.mostrarMensaje5(rootPane);
                break;
            }
            case RESULT_SIN_CAMBIOS: {
                Mensaje.mostrarMensaje28(rootPane);
                break;
            }
            default:
        }
    }

    private void iniciarProc11() {
        FInventariosDes form = new FInventariosDes(this, gestor);

        form.setVisible(true);
    }

    public void iniciarProc12(String codigo) {
        Clave result = Clave.RESULT_OK;

        edtCodigo.setText(codigo);

        try {
            result = iniciarProc0(codigo);
        } catch (Exception e) {
            result = Clave.RESULT_ERROR;
        }

        switch (result) {
            case RESULT_EXISTE: {
                Utiles.seleccionarFila(tablaDetalleFactura, COL_CODIGO, codigo);
                Utiles.establecerFocusActivoG(edtCodigo);
                break;
            }
            case RESULT_NO_EXISTE: {
                Mensaje.mostrarMensajeNoEncontrado(rootPane);
                Utiles.establecerFocusActivoG(edtCodigo);
                break;
            }
            case RESULT_OK: {
                iniciarProc2();
                verificacionDatos();
                actualizarForm();
                Utiles.seleccionarFila(tablaDetalleFactura, COL_CODIGO, codigo);
                Utiles.establecerFocusActivoG(edtCodigo);
                break;
            }
            case RESULT_ERROR: {
                Mensaje.mostrarMensaje5(rootPane);
                break;
            }
            case RESULT_ERROR_BD: {
                Mensaje.mostrarMensaje3(rootPane);
                break;
            }
        }
    }

    private void iniciarProc13() {
        String codigo = Utiles.obtenerValor(tablaDetalleFactura, COL_CODIGO);

        if (codigo.isEmpty()) {
            // Hacer nada.
        } else {
            if (gestor.consultarInvPorCodigo(codigo)) {
                Inventario inv = gestor.obtenerInvPorCodigoM2(codigo);

                FConsultaInventario form = new FConsultaInventario();

                form.cargarInventario(inv);
                form.mostrarInformacion();
                form.setVisible(true);
            }
        }
    }

    private String obtenerTotalFactura() {
        return Utiles.formatear(total);
    }

    private String obtenerPago() {
        return edtPago.getText();
    }

    private String obtenerCodigoFactura() {
        return codigoFactura;
    }

    private String obtenerCliente() {
        return edtNomCl.getText();
    }

    private List<Salida> obtenerListaSalida() {
        return listaSalida;
    }

    private String obtenerVuelto() {
        return Utiles.formatear(vuelto);
    }

    private BigDecimal calcularTotalFactura(List<Salida> l) {
        BigDecimal total;

        total = new BigDecimal(0);

        for (Salida s : l) {
            total = total.add(s.getTotalVenta());
        }

        return total;
    }

    private BigDecimal calcularVuelto(BigDecimal total, BigDecimal pago) {
        BigDecimal vuelto;

        vuelto = pago.subtract(total);

        return vuelto;
    }

    private void verificacionDatos() {
        if (total.doubleValue() < 0) {
            pararFormulario();
        }
    }

    private Salida obtener(List<Salida> l, String codigo) {
        Salida sal = null;

        for (Salida s : l) {
            if (s.getCodigoM2().equals(codigo)) {
                sal = s;
                break;
            }
        }

        return sal;
    }

    private boolean consultar(List<Salida> l, String codigo) {
        boolean band;

        band = false;
        // Verifico si ya existe
        for (Salida sal : l) {
            if (sal.getCodigoM2().equals(codigo)) {
                band = true;
                break;
            }

        }

        return band;
    }

    private int consultarPos(List<Salida> l, Inventario inv) {
        int index = -1;

        // Verifico si ya existe
        for (Salida sal : l) {
            if (sal.isRegRap()) {
                // Hacer nada.
            } else {
                if (sal.getInventario().getId() == inv.getId()) {
                    index = l.indexOf(sal);
                    break;
                }
            }
        }

        return index;
    }

    private boolean isOferta(Inventario inv, String value) {
        boolean band;

        band = false;
        // Verifico si ya existe
        for (Oferta of : inv.getlOferta()) {
            if (of.getCodigo().equals(value)) {
                band = true;
                break;
            }
        }

        return band;
    }

    private boolean eliminarSalida(List<Salida> l, String value) {
        boolean remove;

        remove = false;

        for (Salida sal : l) {
            if (sal.getCodigoM2().equals(value)) {
                remove = l.remove(sal);
                break;
            }
        }

        return remove;
    }

    private Salida generarNuevaSalida(String codigoNuevo) {
        final int CANT_MIN = 1;
        final int UNID_OF = 1;
        final boolean REGISTRO_RAPIDO = true;
        Salida s = new Salida();

        s.setCodigo(codigoNuevo);
        s.setDescripcion("Sin informaci贸n.");
        s.setUnidOf(UNID_OF);
        s.setCant(CANT_MIN);
        s.setpVenta(new BigDecimal(0));
        s.setRegRap(REGISTRO_RAPIDO);
        s.setFechaSalida(Utiles.obtenerFechaActualM4());
        s.setEstado(EST_ACTIVO);

        s.actualizarParametros();

        return s;
    }

    public Salida generarNuevaSalida(Inventario inv) {
        final boolean ESTADO_ACTIVO = true;
        final int CANT_MIN = 1;
        Salida s = new Salida();

        s.setInventario(inv);
        s.setUnidOf(inv.getUnidOf());
        s.setpVenta(inv.getpVenta());
        s.setpCosto(inv.getCostoUnitario());
        s.setEstado(ESTADO_ACTIVO);
        s.setCant(CANT_MIN);
        s.setFechaSalida(Utiles.obtenerFechaActualM4());
        s.actualizarParametros();

        return s;
    }

    public Salida generarNuevaSalida(Inventario inv, Oferta of) {
        final boolean ESTADO_ACTIVO = true;
        final int CANT_MIN = 1;
        Salida s = new Salida();

        s.setInventario(inv);
        s.setOferta(of);
        s.setUnidOf(of.getUnidOfert());
        s.setpVenta(of.getPrecioVenta());
        s.setpCosto(inv.getCostoUnitario());
        s.setCant(CANT_MIN);
        s.setEstado(ESTADO_ACTIVO);
        s.setFechaSalida(Utiles.obtenerFechaActualM4());

        s.actualizarParametros();

        return s;
    }

    private void modificarSalida(Salida s, int colMod, String value) {
        //  Acciones
        switch (colMod) {
            case COL_DESC: {
                if (s.isRegRap()) {
                    String desc;

                    if (value == null || value.isEmpty()) {
                        desc = "Sin informaci贸n.";
                    } else {
                        desc = value;
                    }

                    s.setDescripcion(desc);
                }
                break;
            }
            case COL_UNID_OF: {
                if (s.isRegRap()) {
                    int unidOf;

                    try {
                        unidOf = new Integer(value);
                    } catch (Exception e) {
                        unidOf = 1;
                    }
                    if (unidOf < 1) {
                        unidOf = 1;
                    }

                    s.setUnidOf(unidOf);
                }
                s.actualizarParametros();
                break;
            }
            case COL_PREC_VEN: {
                if (value.contains(",")) {
                    value = value.replace(",", ".");
                }

                if (s.isRegRap()) {
                    BigDecimal pV;

                    try {
                        pV = new BigDecimal(value);
                    } catch (Exception e) {
                        pV = new BigDecimal(0);
                    }

                    if (pV.doubleValue() < 0) {
                        pV = new BigDecimal(0);
                    }

                    s.setpVenta(pV);
                }
                s.actualizarParametros();
                break;
            }
            case COL_CANT: {
                int cant;

                try {
                    cant = new Integer(value);
                } catch (Exception e) {
                    cant = 1;
                }

                //  Validaciones
                if (cant < 1) {
                    cant = 1;
                }
                s.setCant(cant);
                s.actualizarParametros();
                break;
            }
            default:
        }
    }

    public Clave agregarAListaSalida(Clave mensaje, Salida s) {
        Clave result = Clave.RESULT_SIN_DEFINIR;

        switch (mensaje) {
            case NUEVA_SALIDA_REG_RAP: {
                if (consultar(listaSalida, s.getCodigoM2())) {
                    result = Clave.RESULT_EXISTE;
                } else {
                    listaSalida.add(s);
                    result = Clave.RESULT_OK;
                }
                break;
            }
            case NUEVA_SALIDA_INVENTARIO: {
                if (consultar(listaSalida, s.getCodigoM2())) {
                    result = Clave.RESULT_EXISTE;
                } else {
                    listaSalida.add(s);
                    result = Clave.RESULT_OK;
                }
                break;
            }
            case NUEVA_SALIDA_OFERTA: {
                if (consultar(listaSalida, s.getCodigoM2())) {
                    result = Clave.RESULT_EXISTE;
                } else {
                    listaSalida.add(s);
                    result = Clave.RESULT_OK;
                }
                break;
            }
        }

        return result;
    }
}

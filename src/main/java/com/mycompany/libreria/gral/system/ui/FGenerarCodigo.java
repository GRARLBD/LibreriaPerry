/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.libreria.gral.system.ui;

import com.mycompany.libreria.gral.system.controller.GestorLibreriaGralSystem;
import com.mycompany.libreria.gral.system.model.Inventario;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import utiles.Clave;
import utiles.Datalog;
import utiles.GenerarCodigo;
import utiles.Mensaje;
import utiles.Utiles;

/**
 *
 * @author Kevin
 */
public class FGenerarCodigo extends javax.swing.JFrame {

    private final int COL_CODIGO = 2;
    private GestorLibreriaGralSystem gestor;
    private MainFrame mainFrame;
    private List<Datalog> lInv;

    /**
     * Creates new form FGenerarCodigo
     */
    public FGenerarCodigo(MainFrame mainFrame, GestorLibreriaGralSystem gestor) {
        initComponents();
        this.gestor = gestor;
        this.mainFrame = mainFrame;
        this.lInv = new ArrayList<>();
        limpiar();
        iniciarFormulario();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mTabla = new javax.swing.JPopupMenu();
        miCopiarCod = new javax.swing.JMenuItem();
        btnGrupo = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        edtCodigo = new javax.swing.JTextField();
        edtCodigoLote = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaInventario = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        btnEliminar = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        rbMediano = new javax.swing.JRadioButton();
        rbChico = new javax.swing.JRadioButton();
        rbGrande = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        mbGenerarCodigo = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        mItemCerrarForm = new javax.swing.JMenuItem();
        menuLimpiar = new javax.swing.JMenu();
        mItemLimpiarLista = new javax.swing.JMenuItem();

        miCopiarCod.setText("Copiar código");
        miCopiarCod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miCopiarCodActionPerformed(evt);
            }
        });
        mTabla.add(miCopiarCod);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Generar código de barras");
        setAlwaysOnTop(true);
        setResizable(false);

        edtCodigo.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        edtCodigo.setVerifyInputWhenFocusTarget(false);
        edtCodigo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                edtCodigoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                edtCodigoFocusLost(evt);
            }
        });
        edtCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                edtCodigoKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                edtCodigoKeyTyped(evt);
            }
        });

        edtCodigoLote.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        edtCodigoLote.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                edtCodigoLoteFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                edtCodigoLoteFocusLost(evt);
            }
        });
        edtCodigoLote.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                edtCodigoLoteKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                edtCodigoLoteKeyTyped(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel2.setText("Código de lote: ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(edtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(edtCodigoLote, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(78, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(edtCodigoLote, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(edtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        tablaInventario.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        tablaInventario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "N°", "Código de Lote", "Código", "Descripción", "Cantidad"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaInventario.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        tablaInventario.setRowHeight(30);
        tablaInventario.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tablaInventario.getTableHeader().setResizingAllowed(false);
        tablaInventario.getTableHeader().setReorderingAllowed(false);
        tablaInventario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaInventarioMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaInventario);
        if (tablaInventario.getColumnModel().getColumnCount() > 0) {
            tablaInventario.getColumnModel().getColumn(0).setPreferredWidth(30);
            tablaInventario.getColumnModel().getColumn(1).setPreferredWidth(140);
            tablaInventario.getColumnModel().getColumn(2).setPreferredWidth(200);
            tablaInventario.getColumnModel().getColumn(3).setPreferredWidth(500);
            tablaInventario.getColumnModel().getColumn(4).setPreferredWidth(80);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 962, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnImprimir.setText("Imprimir");
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnGrupo.add(rbMediano);
        rbMediano.setText("Mediano");

        btnGrupo.add(rbChico);
        rbChico.setText("Chico");

        btnGrupo.add(rbGrande);
        rbGrande.setText("Grande");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnEliminar)
                .addGap(200, 200, 200)
                .addComponent(rbGrande)
                .addGap(18, 18, 18)
                .addComponent(rbMediano)
                .addGap(18, 18, 18)
                .addComponent(rbChico)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnImprimir)
                .addGap(18, 18, 18)
                .addComponent(btnCancelar)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEliminar)
                    .addComponent(btnImprimir)
                    .addComponent(btnCancelar)
                    .addComponent(rbMediano)
                    .addComponent(rbChico)
                    .addComponent(rbGrande))
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel1.setText("Código : ");

        menuArchivo.setText("Archivo");

        mItemCerrarForm.setText("Cerrar");
        mItemCerrarForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemCerrarFormActionPerformed(evt);
            }
        });
        menuArchivo.add(mItemCerrarForm);

        mbGenerarCodigo.add(menuArchivo);

        menuLimpiar.setText("Lista");

        mItemLimpiarLista.setText("Limpiar lista de impresión");
        mItemLimpiarLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemLimpiarListaActionPerformed(evt);
            }
        });
        menuLimpiar.add(mItemLimpiarLista);

        mbGenerarCodigo.add(menuLimpiar);

        setJMenuBar(mbGenerarCodigo);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void edtCodigoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtCodigoFocusGained
        // TODO add your handling code here:
        Utiles.establecerFocusActivoG(edtCodigo);
    }//GEN-LAST:event_edtCodigoFocusGained

    private void edtCodigoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtCodigoFocusLost
        // TODO add your handling code here:
        Utiles.establecerFocusInactivo(edtCodigo);
    }//GEN-LAST:event_edtCodigoFocusLost

    private void edtCodigoLoteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtCodigoLoteFocusGained
        // TODO add your handling code here:
        Utiles.establecerFocusActivoG(edtCodigoLote);
    }//GEN-LAST:event_edtCodigoLoteFocusGained

    private void edtCodigoLoteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtCodigoLoteFocusLost
        // TODO add your handling code here:
        Utiles.establecerFocusInactivo(edtCodigoLote);
    }//GEN-LAST:event_edtCodigoLoteFocusLost

    private void edtCodigoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCodigoKeyPressed
        // TODO add your handling code here:
        int key = evt.getKeyCode();

        if (key == KeyEvent.VK_ENTER) {
            Clave result = Clave.RESULT_OK;

            try {
                iniciarProc2();
            } catch (Exception e) {
                e.printStackTrace();
                result = Clave.RESULT_ERROR;
            }

            switch (result) {
                case RESULT_ERROR_BD: {
                    Mensaje.mostrarMensaje3(rootPane);
                    break;
                }
                case RESULT_ERROR: {
                    Mensaje.mostrarMensaje5(rootPane);
                    break;
                }
            }
        }

        if (key == KeyEvent.VK_F12) {
            FInventariosDes form = new FInventariosDes(this, gestor);

            form.setVisible(true);
        }
    }//GEN-LAST:event_edtCodigoKeyPressed

    private void edtCodigoLoteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCodigoLoteKeyPressed
        // TODO add your handling code here:
        int key = evt.getKeyCode();

        if (key == KeyEvent.VK_ENTER) {
            Clave result = Clave.RESULT_OK;

            try {
                iniciarProc4();
            } catch (Exception e) {
                e.printStackTrace();
                result = Clave.RESULT_ERROR;
            }

            switch (result) {
                case RESULT_ERROR_BD: {
                    Mensaje.mostrarMensaje3(rootPane);
                    break;
                }
                case RESULT_ERROR: {
                    Mensaje.mostrarMensaje5(rootPane);
                    break;
                }
            }
        }
    }//GEN-LAST:event_edtCodigoLoteKeyPressed

    private void tablaInventarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaInventarioMouseClicked
        // TODO add your handling code here:
        Utiles.establecerFocusActivoG(edtCodigo);

        if (evt.getButton() == MouseEvent.BUTTON3) {
            //Se presiono el boton derecho
            mTabla.show(evt.getComponent(),
                    evt.getX(), evt.getY()); //... mostramos el menu en la ubicacion del raton

        } else {
            mTabla.setVisible(false);
        }
    }//GEN-LAST:event_tablaInventarioMouseClicked

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        String codigo = Utiles.obtenerValor(tablaInventario, COL_CODIGO);

        if (codigo.isEmpty()) {
            // Hacer nada.
        } else {
            if (consultar(codigo)) {
                Datalog obj = obtener(lInv, codigo);

                try {
                    lInv.remove(obj);
                } catch (Exception e) {
                }
                actualizar();
                Utiles.seleccionarFila0(tablaInventario);
            }
        }
        Utiles.establecerFocusActivoG(edtCodigo);
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        // TODO add your handling code here:
        int RESULT_OPTION = JOptionPane.CANCEL_OPTION;

        if (lInv.isEmpty()) {
            Mensaje.mostrarMensaje16(rootPane);
        } else {
            if (rbGrande.isSelected() || rbMediano.isSelected() || rbChico.isSelected())
            {
            RESULT_OPTION = JOptionPane.showConfirmDialog(this,
                    "Desea imprimir la lista?",
                    "Confirmar salida", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (RESULT_OPTION == JOptionPane.OK_OPTION) {
                List<Inventario> lRet = iniciarProc9();
                GenerarCodigo reporte = new GenerarCodigo(lRet);

                if (rbMediano.isSelected()) {
                    try {
                        reporte.viewReportM2();
                    } catch (JRException ex) {
                        Logger.getLogger(FGenerarCodigo.class.getName()).log(Level.SEVERE, null, ex);
                        Mensaje.mostrarMensajeErrorGenerarReporte(rootPane);
                    }
                }
                if (rbChico.isSelected()) {
                    try {
                        reporte.viewReportM3();
                    } catch (JRException ex) {
                        Logger.getLogger(FGenerarCodigo.class.getName()).log(Level.SEVERE, null, ex);
                        Mensaje.mostrarMensajeErrorGenerarReporte(rootPane);
                    }
                }
                if (rbGrande.isSelected()) {
                    try {
                        reporte.viewReport();
                    } catch (JRException ex) {
                        Logger.getLogger(FGenerarCodigo.class.getName()).log(Level.SEVERE, null, ex);
                        Mensaje.mostrarMensajeErrorGenerarReporte(rootPane);
                    }
                }
            }
            } else
            {
                Mensaje.mostrarMensaje40(this);
            }
        }
    }//GEN-LAST:event_btnImprimirActionPerformed

    private void edtCodigoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCodigoKeyTyped
        // TODO add your handling code here:
        int comilla = 39;

        if (evt.getKeyChar() == comilla) {
            evt.consume();
        }
    }//GEN-LAST:event_edtCodigoKeyTyped

    private void edtCodigoLoteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCodigoLoteKeyTyped
        // TODO add your handling code here:
        int comilla = 39;

        if (evt.getKeyChar() == comilla) {
            evt.consume();
        }
    }//GEN-LAST:event_edtCodigoLoteKeyTyped

    private void miCopiarCodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miCopiarCodActionPerformed
        // TODO add your handling code here:
        Utiles.copiarAPortapapeles(tablaInventario, COL_CODIGO);
    }//GEN-LAST:event_miCopiarCodActionPerformed

    private void mItemCerrarFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemCerrarFormActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_mItemCerrarFormActionPerformed

    private void mItemLimpiarListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemLimpiarListaActionPerformed
        // TODO add your handling code here:
        resetear();
        actualizarTabla();
    }//GEN-LAST:event_mItemLimpiarListaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.ButtonGroup btnGrupo;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JTextField edtCodigo;
    private javax.swing.JTextField edtCodigoLote;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem mItemCerrarForm;
    private javax.swing.JMenuItem mItemLimpiarLista;
    private javax.swing.JPopupMenu mTabla;
    private javax.swing.JMenuBar mbGenerarCodigo;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenu menuLimpiar;
    private javax.swing.JMenuItem miCopiarCod;
    private javax.swing.JRadioButton rbChico;
    private javax.swing.JRadioButton rbGrande;
    private javax.swing.JRadioButton rbMediano;
    private javax.swing.JTable tablaInventario;
    // End of variables declaration//GEN-END:variables

    //************************************ Formulario ************************************
    private void iniciarFormulario() {
        iniciarConfiguracion();

        try {
            iniciarProc1();
        } catch (Exception e) {
            e.printStackTrace();
        }

        cargarInformacion();
    }

    private void limpiar() {
        limpiarCampos();
        limpiarTabla();
    }

    private void limpiarCampos() {
        final String CAMPO_BLANCO = "";
        this.edtCodigo.setText(CAMPO_BLANCO);
    }

    private void limpiarTabla() {
        Utiles.limpiarTabla(tablaInventario);
    }

    private void cargarListaEnTabla(List<Datalog> l) {
        if (l == null || l.isEmpty()) {
            // Hacer nada.
        } else {
            int INDEX = -1;
            int NRO = 0;
            DefaultTableModel model = (DefaultTableModel) this.tablaInventario.getModel();

            for (Datalog e : l) {
                INDEX++;
                NRO++;
                String[] datos = {
                    String.valueOf(NRO),
                    e.getInv().getProducto().getCodigoLote(),
                    e.getInv().getProducto().getCodigo(),
                    e.getInv().getProducto().getDescripcion(),
                    String.valueOf(e.getCantidad())};

                model.insertRow(INDEX, datos);
            }
        }
    }

    private void iniciarConfiguracion() {
        Utiles.establecerFocusActivoG(edtCodigo);
        DefaultTableModel model = (DefaultTableModel) tablaInventario.getModel();

        model.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == TableModelEvent.UPDATE) {
                    try {
                        iniciarProc10();
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
            }
        });
        Utiles.suprimirComilla(tablaInventario);
    }

    private void cargarInformacion() {
        limpiarTabla();
        cargarListaEnTabla(lInv);
    }

    private void actualizarTabla() {
        limpiarTabla();
        cargarListaEnTabla(lInv);
    }

    private void resetear() {
        lInv.clear();
    }

    private void actualizar() {
        actualizarTabla();
    }

    //******************************* Procedimientos ***********************************
    private void iniciarProc1() {
        List<Inventario> lRetorno = new ArrayList<>();

        lRetorno = gestor.obtenerInvPorCodigoM1(mainFrame.obtenerListaImpresion());

        for (Inventario inv : lRetorno) {
            lInv.add(new Datalog(inv, 1));
        }
    }

    private void iniciarProc2() {
        Clave result = Clave.RESULT_SIN_DEFINIR;
        String codigo = Utiles.obtenerValor(edtCodigo);

        if (codigo == null || codigo.isEmpty()) {
            // Hacer nada.
        } else {
            if (consultar(codigo)) {
                result = Clave.RESULT_EXISTE;
            } else {
                if (gestor.consultarInvPorCodigo(codigo)) {
                    Inventario inv = gestor.obtenerInvPorCodigoM2(codigo);
                    agregarALista(inv);

                    result = Clave.RESULT_ENCONTRADOS;
                } else {
                    result = Clave.RESULT_NO_EXISTE;
                }

            }

            switch (result) {
                case RESULT_EXISTE: {
                    Utiles.limpiarSeleccion(tablaInventario);
                    Utiles.seleccionarFila(tablaInventario, COL_CODIGO, codigo);
                    break;
                }
                case RESULT_NO_EXISTE: {
                    Mensaje.mostrarMensajeNoEncontrado(rootPane);
                    break;
                }
                case RESULT_ENCONTRADOS: {
                    limpiarTabla();
                    cargarListaEnTabla(lInv);
                    Utiles.seleccionarFila(tablaInventario, COL_CODIGO, codigo);
                    break;
                }
            }
        }

        Utiles.establecerFocusActivoG(edtCodigo);
    }

    private void iniciarProc5(String codLote) {

        if (gestor.consultarInventarioPorCodigoLote(codLote)) {
            List<Inventario> list = gestor.obtenerInventariosPorCodigoLote(codLote);

            agregarALista(list);
        } else {
            Mensaje.mostrarMensajeNoEncontrado(rootPane);
        }
    }

    private void iniciarProc4() throws Exception {
        String codLote = edtCodigoLote.getText().trim();

        if (codLote == null || codLote.isEmpty()) {
            // Hacer nada.
        } else {
            iniciarProc5(codLote);
            limpiarTabla();
            cargarListaEnTabla(lInv);
            iniciarProc6(codLote);
        }

        Utiles.establecerFocusActivoG(edtCodigo);
    }

    private void iniciarProc6(String codLote) {
        if (codLote == null || codLote.isEmpty()) {
            // Hacer nada.
        } else {
            Utiles.limpiarSeleccion(tablaInventario);
            final int COL_CODIGO_LOTE = 1;

            Utiles.seleccionarFila(tablaInventario, COL_CODIGO_LOTE, codLote);
        }
    }

    public void iniciarProc8(Inventario inv) {
        agregarALista(inv);
        this.edtCodigo.setText(inv.getProducto().getCodigo());
        Utiles.establecerFocusActivoG(edtCodigo);
        this.actualizarTabla();
    }

    private List<Inventario> iniciarProc9() {
        List<Inventario> lRet = new ArrayList<>();

        for (Datalog obj : lInv) {
            for (int i = 0; i < obj.getCantidad(); i++) {
                lRet.add(obj.getInv());
            }
        }

        return lRet;
    }

    private void iniciarProc10() {
        String value = Utiles.obtenerCambios(tablaInventario);
        String codigo = Utiles.obtenerValor(tablaInventario, COL_CODIGO);

        if (consultar(codigo)) {
            Datalog obj = obtener(lInv, codigo);

            try {
                obj.setCantidad(new Integer(value));
            } catch (Exception e) {
            }
        }
        this.actualizar();
    }

    private boolean consultar(String codigo) {
        boolean bandera = false;

        for (Datalog obj : lInv) {
            if (obj.getInv().getProducto().getCodigo().equals(codigo)) {
                bandera = true;
                break;
            }
        }

        return bandera;
    }

    private Datalog obtener(List<Datalog> l, String codigo) {
        Datalog inv;

        inv = null;

        for (Datalog element : l) {
            if (element.getInv().getProducto().getCodigo().equals(codigo)) {
                inv = element;
                break;
            }
        }

        return inv;
    }

    private void agregarALista(Inventario inv) {
        Datalog data = new Datalog(inv, 1);

        lInv.add(data);
    }

    private void agregarALista(List<Inventario> lista) {
        for (Inventario inv : lista) {
            // Verifica si ya se encuentra en la lista de INVENTARIOS.
            agregarALista(inv);
        }
    }
}

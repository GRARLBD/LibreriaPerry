/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.libreria.gral.system.ui;

import com.mycompany.libreria.gral.system.model.Inventario;
import com.sun.glass.events.KeyEvent;
import java.util.List;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import utiles.Clave;
import utiles.Mensaje;
import utiles.Utiles;

/**
 *
 * @author KEVIN
 */
public class FInventarios extends javax.swing.JFrame {

    private List<Inventario> listaInventario;
    private MainFrame form;
    private Clave mensaje;

    public FInventarios(MainFrame form, List<Inventario> lInventario) {
        initComponents();
        
        this.form = form;
        this.listaInventario = lInventario;
        this.mensaje = Clave.RESULT_SIN_DEFINIR;
        limpiarFormulario();
        iniciarFormulario();        
    }
    
    public FInventarios(MainFrame form, List<Inventario> lInventario, Clave mensaje) {
        initComponents();
        
        this.form = form;
        this.listaInventario = lInventario;
        this.mensaje = mensaje;
        limpiarFormulario();
        iniciarFormulario();        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaInventarios = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        btnCancelar = new javax.swing.JButton();
        btnSeleccionar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Lista de Inventarios");
        setAlwaysOnTop(true);
        setResizable(false);

        tablaInventarios.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tablaInventarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Código", "Descripción", "Unid. ofert.", "Precio unit."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaInventarios.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tablaInventarios.setRequestFocusEnabled(false);
        tablaInventarios.setRowHeight(32);
        tablaInventarios.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablaInventarios.getTableHeader().setReorderingAllowed(false);
        tablaInventarios.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tablaInventariosKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tablaInventarios);
        if (tablaInventarios.getColumnModel().getColumnCount() > 0) {
            tablaInventarios.getColumnModel().getColumn(0).setPreferredWidth(250);
            tablaInventarios.getColumnModel().getColumn(1).setPreferredWidth(400);
            tablaInventarios.getColumnModel().getColumn(3).setPreferredWidth(100);
        }

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        btnCancelar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnCancelarKeyPressed(evt);
            }
        });

        btnSeleccionar.setText("Seleccionar");
        btnSeleccionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeleccionarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(550, Short.MAX_VALUE)
                .addComponent(btnSeleccionar, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSeleccionar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 844, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnSeleccionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeleccionarActionPerformed
        // TODO add your handling code here:

        final int rowSel = tablaInventarios.getSelectedRow();
        
        if (rowSel < 0) {
            Mensaje.mostrarMensajeSeleccion(rootPane);
        } else {
            Clave result;
            
            try {
                result = procesarDatos0(rowSel);
            } catch (Exception e) {
                e.printStackTrace();
                result = Clave.RESULT_ERROR;
            }
            
            switch(result)
            {
                case RESULT_OK:
                {
                    break;
                }
                case RESULT_ERROR:
                {
                    Mensaje.mostrarMensaje5(rootPane);
                    this.dispose();
                    break;
                }
            }
        }
    }//GEN-LAST:event_btnSeleccionarActionPerformed

    private void tablaInventariosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tablaInventariosKeyPressed
        // TODO add your handling code here:
        int key = evt.getKeyCode();
        
        if (key == KeyEvent.VK_ENTER)
        {
            btnSeleccionarActionPerformed(null);
        }
        
        if (key == KeyEvent.VK_TAB)
        {
            btnCancelar.requestFocus();
        }
    }//GEN-LAST:event_tablaInventariosKeyPressed

    private void btnCancelarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnCancelarKeyPressed
        // TODO add your handling code here:
        int key = evt.getKeyCode();
        
        if (key == java.awt.event.KeyEvent.VK_ENTER)
        {
            this.dispose();
        }
    }//GEN-LAST:event_btnCancelarKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnSeleccionar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaInventarios;
    // End of variables declaration//GEN-END:variables
    
    //**********************    Acciones ************************
  
    private Clave procesarDatos0(int rowSel) {
        Clave result = Clave.RESULT_OK;

        if (rowSel < 0) {
            Mensaje.mostrarMensajeSeleccion(rootPane);
        } else {
            final int COL_CODIGO = 0;
            String codigo = Utiles.obtenerValor(tablaInventarios, COL_CODIGO);

            if (codigo == null || codigo.isEmpty()) {
                Mensaje.mostrarMensajeSeleccion(rootPane);
            } else {
                if (consultar(listaInventario, codigo)) {
                    Inventario inv = obtener(listaInventario, codigo);
                    
                    if (mensaje == Clave.MESSAGE_CONSULTA) {
                        form.iniciarProc33(inv);
                    } else {
                        form.iniciarProc30(inv, true, Clave.RESULT_ACT_LISTA_ARCHIVO_DIF);
                    }
                    this.dispose();
                }
            }
        }

        return result;
    }
    
    private boolean consultar(List<Inventario> list, String codigo) {
        boolean band;

        band = false;

        for (Inventario inv : list) {
            if (inv.getProducto().getCodigo().equals(codigo)) {
                band = true;
                break;
            }
        }

        return band;
    }
    
    private boolean consultar(Inventario inv, String codigo) {
        boolean band;

        if (inv == null)
        {
            band = false;
        } else
        {
            if (inv.getProducto().getCodigo().equals(codigo))
            {
                band = true;
            } else
            {
                band = false;
            }
        }

        return band;
    }
    
    private Inventario obtener(List<Inventario> l, String value)
    {
        Inventario elemento;
        
        elemento = null;
        
        for (Inventario inv: l) {
            if (inv.getProducto().getCodigo().equals(value)) {
                elemento = inv;
            }
        }
        
        return elemento;
    }
   
    
     //*************************** Formulario *********************
    
    private void iniciarFormulario() {
        mostrarListaEnTabla(tablaInventarios, listaInventario);
        
        if (listaInventario.isEmpty()) {
            // Hacer nada.
        } else {
            Utiles.seleccionarFila0(tablaInventarios);
        }
    }

    /**
     * Carga la nueva lista en tabla.
     *
     * @param tabla
     * @param l 
     */
    private void mostrarListaEnTabla(JTable tabla, List<Inventario> l)
    {
        if (l == null || l.isEmpty())
        {
            // Hacer nada.
        } else
        {
            int index = -1;
            DefaultTableModel model = (DefaultTableModel) tabla.getModel();
            
            for (Inventario inv : l) {
                index++;
                String p0 = inv.getProducto().getCodigo();
                String p1 = inv.getProducto().getDescripcion();
                String p2 = Utiles.formatearM2(inv.getUnidOf());
                String p3 = "$ " + Utiles.formatear(inv.getpVenta());
                String[] datos2 = {p0, p1, p2, p3};

                model.insertRow(index, datos2);
            }
        }
    }
    
    private void limpiarTabla()
    {
        Utiles.limpiarTabla(tablaInventarios);
    }
    
    private void limpiarFormulario() {
        limpiarTabla();
    }
}

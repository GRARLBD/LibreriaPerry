/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.libreria.gral.system.ui;

import com.mycompany.libreria.gral.system.controller.GestorLibreriaGralSystem;
import com.mycompany.libreria.gral.system.model.Inventario;
import com.sun.glass.events.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import utiles.Clave;
import utiles.Mensaje;
import utiles.Utiles;

/**
 *
 * @author KEVIN
 */
public class FInventariosDes extends javax.swing.JFrame {

    private final int COL_CODIGO = 0;
    private FGenerarCodigo form2;
    private FFacturarInventario form;
    private GestorLibreriaGralSystem gestor;

    public FInventariosDes(FFacturarInventario form, GestorLibreriaGralSystem gestor) {
        initComponents();

        this.form = form;
        this.form2= null;
        this.gestor = gestor;
        limpiarFormulario();
        iniciarFormulario();
    }

    public FInventariosDes(FGenerarCodigo form, GestorLibreriaGralSystem gestor) {
        initComponents();

        this.form = null;
        this.form2 = form;
        this.gestor = gestor;
        limpiarFormulario();
        iniciarFormulario();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaInventarios = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        btnCancelar = new javax.swing.JButton();
        btnSeleccionar = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        edtDescripcion = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Lista de Inventarios <descripci贸n>");
        setAlwaysOnTop(true);
        setResizable(false);

        tablaInventarios.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tablaInventarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "C贸digo", "Descripci贸n", "Unid. ofert.", "Precio unit."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaInventarios.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tablaInventarios.setRequestFocusEnabled(false);
        tablaInventarios.setRowHeight(32);
        tablaInventarios.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablaInventarios.getTableHeader().setReorderingAllowed(false);
        tablaInventarios.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tablaInventariosKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tablaInventarios);
        if (tablaInventarios.getColumnModel().getColumnCount() > 0) {
            tablaInventarios.getColumnModel().getColumn(0).setPreferredWidth(200);
            tablaInventarios.getColumnModel().getColumn(1).setPreferredWidth(560);
            tablaInventarios.getColumnModel().getColumn(1).setMaxWidth(800);
            tablaInventarios.getColumnModel().getColumn(3).setPreferredWidth(100);
        }

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        btnCancelar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                btnCancelarKeyPressed(evt);
            }
        });

        btnSeleccionar.setText("Seleccionar");
        btnSeleccionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeleccionarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(655, Short.MAX_VALUE)
                .addComponent(btnSeleccionar, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSeleccionar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel15.setText("Descripci贸n: ");

        edtDescripcion.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        edtDescripcion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                edtDescripcionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                edtDescripcionFocusLost(evt);
            }
        });
        edtDescripcion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                edtDescripcionKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                edtDescripcionKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                edtDescripcionKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(edtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 629, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(edtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnSeleccionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeleccionarActionPerformed
        // TODO add your handling code here:
        try {
            procesarDatos0();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnSeleccionarActionPerformed

    private void tablaInventariosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tablaInventariosKeyPressed
        // TODO add your handling code here:
        int key = evt.getKeyCode();

        if (key == KeyEvent.VK_ENTER) {
            btnSeleccionarActionPerformed(null);
        }

        if (key == KeyEvent.VK_TAB) {
            btnCancelar.requestFocus();
        }
    }//GEN-LAST:event_tablaInventariosKeyPressed

    private void btnCancelarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_btnCancelarKeyPressed
        // TODO add your handling code here:
        int key = evt.getKeyCode();

        if (key == java.awt.event.KeyEvent.VK_ENTER) {
            this.dispose();
        }
    }//GEN-LAST:event_btnCancelarKeyPressed

    private void edtDescripcionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtDescripcionFocusGained
        // TODO add your handling code here:
        Utiles.establecerFocusActivoG(this.edtDescripcion);
    }//GEN-LAST:event_edtDescripcionFocusGained

    private void edtDescripcionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtDescripcionFocusLost
        // TODO add your handling code here:
        Utiles.establecerFocusInactivo(this.edtDescripcion);
    }//GEN-LAST:event_edtDescripcionFocusLost

    private void edtDescripcionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtDescripcionKeyReleased
        // TODO add your handling code here:
        int key = evt.getKeyCode();

        switch (key) {
            case KeyEvent.VK_ENTER: {
                break;
            }
            case KeyEvent.VK_UP: {
                break;
            }
            case KeyEvent.VK_DOWN: {
                break;
            }
            default:
                Clave estado = Clave.RESULT_OK;

                try {
                    String desc = edtDescripcion.getText().trim();;

                    if (desc == null || desc.isEmpty()) {
                        limpiarTabla();
                    } else {
                        estado = iniciarProc2(desc);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    estado = Clave.RESULT_ERROR;
                }

                switch (estado) {
                    case RESULT_OK: {
                        // Hacer nada.
                        break;
                    }
                    case RESULT_ERROR: {
                        Mensaje.mostrarMensaje5(rootPane);
                        break;
                    }
                    case RESULT_ERROR_BD: {
                        Mensaje.mostrarMensaje3(rootPane);
                        break;
                    }
                }
        }
    }//GEN-LAST:event_edtDescripcionKeyReleased

    private void edtDescripcionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtDescripcionKeyTyped
        // TODO add your handling code here:
        int comilla = 39;

        if (evt.getKeyChar() == comilla) {
            evt.consume();
        }

        Utiles.suprimirComilla(edtDescripcion);
    }//GEN-LAST:event_edtDescripcionKeyTyped

    private void edtDescripcionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtDescripcionKeyPressed
        // TODO add your handling code here:
        int key = evt.getKeyCode();

        switch (key) {
            case KeyEvent.VK_ENTER: {
                btnSeleccionarActionPerformed(null);
                break;
            }
            case KeyEvent.VK_UP: {
                Utiles.anterior(tablaInventarios);
                break;
            }
            case KeyEvent.VK_DOWN: {
                Utiles.siguiente(tablaInventarios);
                break;
            }
            case KeyEvent.VK_ESCAPE: {
                Utiles.salir(this);
                break;
            }
        }
    }//GEN-LAST:event_edtDescripcionKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnSeleccionar;
    private javax.swing.JTextField edtDescripcion;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaInventarios;
    // End of variables declaration//GEN-END:variables

    //**********************    Acciones ************************
    private Clave procesarDatos0() {
        Clave result = Clave.RESULT_SIN_DEFINIR;

        String codigo = Utiles.obtenerValor(tablaInventarios, COL_CODIGO);
        
        if (codigo == null || codigo.isEmpty()) {
            result = Clave.RESULT_CAMPO_BLANCO;
        } else {
            if (form2 == null) {
                result = Clave.RESULT_OK;
            } else {
                result = Clave.FORM_GEN_CODIGO;
            }
        }

        switch (result) {
            case RESULT_CAMPO_BLANCO: {
                Mensaje.mostrarMensajeSeleccion(rootPane);
                break;
            }
            case RESULT_OK: {
                form.iniciarProc12(codigo);
                dispose();
                break;
            }
            case FORM_GEN_CODIGO:
            {                
                if (gestor.consultarInvPorCodigo(codigo)) {
                    Inventario inv = gestor.obtenerInvPorCodigoM2(codigo);

                    form2.iniciarProc8(inv);
                    this.dispose();
                    break;
                } else
                {
                    Mensaje.mostrarMensajeNoEncontrado(rootPane);
                    this.dispose();
                }
            }
            case RESULT_ERROR: {
                Mensaje.mostrarMensaje5(rootPane);
                this.dispose();
                break;
            }
        }

        return result;
    }

    /**
     * Muestra una lista de acuerdo a la descripci贸n del inventario.
     *
     * @param desc
     * @return
     */
    private Clave iniciarProc2(String desc) {
        //  Acciones
        List<Inventario> l = new ArrayList<>();
        Clave result = Clave.RESULT_OK;

        try {
            l = gestor.obtenerInventarioPropDescripcion(desc);
        } catch (Exception e) {
            e.printStackTrace();
            return Clave.RESULT_ERROR_BD;
        }

        limpiarTabla();
        mostrarListaEnTabla(tablaInventarios, l);

        if (l.isEmpty()) {
            Utiles.limpiarSeleccion(tablaInventarios);
        } else {
            Utiles.seleccionarFila0(tablaInventarios);
        }

        return result;
    }

    private boolean consultar(List<Inventario> list, String codigo) {
        boolean band;

        band = false;

        for (Inventario inv : list) {
            if (inv.getProducto().getCodigo().equals(codigo)) {
                band = true;
                break;
            }
        }

        return band;
    }
    
    private Inventario obtener(List<Inventario> l, String value) {
        Inventario elemento;

        elemento = null;

        for (Inventario inv : l) {
            if (inv.getProducto().getCodigo().equals(value)) {
                elemento = inv;
            }
        }

        return elemento;
    }

    //*************************** Formulario *********************
    private void iniciarFormulario() {
        Utiles.establecerFocusActivoG(edtDescripcion);
    }

    /**
     * Carga la nueva lista en tabla.
     *
     * @param tabla
     * @param l
     */
    private void mostrarListaEnTabla(JTable tabla, List<Inventario> l) {
        if (l == null || l.isEmpty()) {
            // Hacer nada.
        } else {
            int index = -1;
            DefaultTableModel model = (DefaultTableModel) tabla.getModel();

            for (Inventario inv : l) {
                index++;
                String p0 = inv.getProducto().getCodigo();
                String p1 = inv.getProducto().getDescripcion();
                String p2 = Utiles.formatearM2(inv.getUnidOf());
                String p3 = "$ " + Utiles.formatear(inv.getpVenta());
                String[] datos2 = {p0, p1, p2, p3};

                model.insertRow(index, datos2);
            }
        }
    }

    private void limpiarTabla() {
        Utiles.limpiarTabla(tablaInventarios);
    }

    private void limpiarFormulario() {
        limpiarTabla();
    }

    private void actualizarTabla() {
        // Hacer nada.
    }
}

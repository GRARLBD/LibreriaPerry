/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.libreria.gral.system.ui;

import com.mycompany.libreria.gral.system.controller.GestorLibreriaGralSystem;
import com.mycompany.libreria.gral.system.model.Inventario;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.math.BigDecimal;
import java.util.LinkedList;
import java.util.List;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import utiles.Clave;
import utiles.Mensaje;
import utiles.Utiles;

/**
 *
 * @author KEVIN
 */
public class FModificarInventarioPorLote extends javax.swing.JFrame {

    private static final String CODIGO_PROHIBIDO = "-1";
    private final int COL_CODIGO_BUSQUEDA = 0;
    private final int COL_CODIGO_LOTE = 1;
    private final int COL_CODIGO = 2;
    private final int COL_DETALLE = 3;
    private final int COL_UNID_OF = 4;
    private final int COL_COSTO_UNIT = 5;
    private final int COL_PRECIO_VENTA = 6;

    private GestorLibreriaGralSystem gestor;
    private MainFrame mainFrame;
    private List<Inventario> listaInventario;

    /**
     * Creates new form FAltaInventarioLote
     */
    public FModificarInventarioPorLote() {
        initComponents();
    }

    public FModificarInventarioPorLote(MainFrame mainFrame, GestorLibreriaGralSystem gestor) {
        this.mainFrame = mainFrame;
        this.gestor = gestor;
        initComponents();
        limpiarFormulario();
        iniciarFormulario();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mTabla = new javax.swing.JPopupMenu();
        mItemModificar = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaInvenario = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        edtCodigo = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        btnCancelar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnChequear = new javax.swing.JButton();
        edtCodigoLote = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();

        mItemModificar.setText("Modificar");
        mItemModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemModificarActionPerformed(evt);
            }
        });
        mTabla.add(mItemModificar);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Modificar Inventario por Lote");
        setAlwaysOnTop(true);
        setResizable(false);

        tablaInvenario.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tablaInvenario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Cod. de Búsqueda", "Codigo de lote", "Código", "Descripción", "Unid. of.", "Costo unit.", "Precio unit."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false, true, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaInvenario.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tablaInvenario.setRequestFocusEnabled(false);
        tablaInvenario.setRowHeight(32);
        tablaInvenario.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tablaInvenario.getTableHeader().setReorderingAllowed(false);
        tablaInvenario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaInvenarioMouseClicked(evt);
            }
        });
        tablaInvenario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tablaInvenarioKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tablaInvenario);
        if (tablaInvenario.getColumnModel().getColumnCount() > 0) {
            tablaInvenario.getColumnModel().getColumn(0).setPreferredWidth(120);
            tablaInvenario.getColumnModel().getColumn(1).setPreferredWidth(120);
            tablaInvenario.getColumnModel().getColumn(2).setPreferredWidth(200);
            tablaInvenario.getColumnModel().getColumn(3).setPreferredWidth(450);
            tablaInvenario.getColumnModel().getColumn(3).setMaxWidth(450);
            tablaInvenario.getColumnModel().getColumn(4).setPreferredWidth(80);
            tablaInvenario.getColumnModel().getColumn(5).setPreferredWidth(120);
            tablaInvenario.getColumnModel().getColumn(6).setPreferredWidth(120);
        }

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel5.setText("Código : ");

        edtCodigo.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        edtCodigo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                edtCodigoFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                edtCodigoFocusLost(evt);
            }
        });
        edtCodigo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                edtCodigoMouseClicked(evt);
            }
        });
        edtCodigo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                edtCodigoKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                edtCodigoKeyTyped(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnChequear.setText("CHECK");
        btnChequear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChequearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(283, 283, 283)
                .addComponent(btnChequear)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnChequear)))
                .addContainerGap())
        );

        edtCodigoLote.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        edtCodigoLote.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                edtCodigoLoteFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                edtCodigoLoteFocusLost(evt);
            }
        });
        edtCodigoLote.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                edtCodigoLoteMouseClicked(evt);
            }
        });
        edtCodigoLote.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                edtCodigoLoteKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                edtCodigoLoteKeyTyped(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel6.setText("Código de lote :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(edtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(edtCodigoLote, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 296, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(edtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(edtCodigoLote, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        Clave result = Clave.RESULT_OK;

        try {
            result = iniciarProc2();
        } catch (Exception e) {
            e.printStackTrace();
            result = Clave.RESULT_ERROR;
        }

        switch (result) {
            case RESULT_ERROR: {
                Mensaje.mostrarMensaje5(rootPane);
                break;
            }
            case RESULT_ERROR_BD: {
                Mensaje.mostrarMensaje3(this);
                dispose();
                break;
            }
            case RESULT_CAMPO_BLANCO: {
                Mensaje.mostrarMensajeSeleccion(rootPane);
                break;
            }
            case RESULT_NO_EXISTE: {
                Mensaje.mostrarMensajeNoEncontrado(rootPane);
                break;
            }
            case RESULT_OK: {
                actualizar();
                Utiles.establecerFocusActivoG(edtCodigo);
                btnChequearActionPerformed(null);
                break;
            }
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
        Clave result = Clave.RESULT_OK;

        try {
            result = iniciarProc7();
        } catch (Exception e) {
            e.printStackTrace();
            result = Clave.RESULT_ERROR;
        }

        switch (result) {
            case RESULT_OK:
                Mensaje.mostrarMensaje18(rootPane);
                try {
                    mainFrame.actualizar();
                } catch (Exception e) {
                }
                this.dispose();
                break;
            case RESULT_ERROR_BD: {
                Mensaje.mostrarMensaje3(rootPane);
                break;
            }
            case RESULT_ERROR: {
                Mensaje.mostrarMensaje5(rootPane);
                break;
            }
            case RESULT_LISTA_VACIA: {
                Mensaje.mostrarMensaje16(rootPane);
                break;
            }
            case RESULT_ERROR_CAMPOS_INVALIDOS: {
                Mensaje.mostrarMensaje2(rootPane);
                break;
            }
            case RESULT_INCONSISTENCIA: {
                Mensaje.mostrarMensaje30(rootPane);
                break;
            }
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void edtCodigoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCodigoKeyPressed
        // TODO add your handling code here:
        int key = evt.getKeyCode();

        if (key == KeyEvent.VK_ENTER) {
            Clave result = Clave.RESULT_OK;
            String codigo = Utiles.obtenerValor(edtCodigo);

            try {
                result = iniciarProc1(codigo);
            } catch (Exception e) {
                e.printStackTrace();
                result = Clave.RESULT_ERROR;
            }

            switch (result) {
                case RESULT_ERROR_BD: {
                    Mensaje.mostrarMensaje3(rootPane);
                    break;
                }
                case RESULT_ERROR: {
                    Mensaje.mostrarMensaje5(rootPane);
                    break;
                }
                case RESULT_CAMPO_BLANCO: {
                    // Hacer nada.
                    break;
                }
                case RESULT_EXISTE: {
                    Utiles.limpiarSeleccion(tablaInvenario);
                    Utiles.seleccionarFila(tablaInvenario, COL_CODIGO, codigo);
                    Utiles.seleccionar(edtCodigo);
                    break;
                }
                case RESULT_NO_EXISTE: {
                    Mensaje.mostrarMensajeNoEncontrado(rootPane);
                    break;
                }
                case RESULT_OK: {
                    actualizar();
                    Utiles.seleccionar(edtCodigo);
                    Utiles.seleccionarFila(tablaInvenario, COL_CODIGO, codigo);
                    iniciarProc9();
                    break;
                }
            }
        }
    }//GEN-LAST:event_edtCodigoKeyPressed

    private void edtCodigoLoteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCodigoLoteKeyPressed
        // TODO add your handling code here:

        int key = evt.getKeyCode();

        if (key == KeyEvent.VK_ENTER) {
            Clave result = Clave.RESULT_OK;
            String codigoLote = "";
            try {
                codigoLote = edtCodigoLote.getText().trim();
                result = iniciarProc4(codigoLote);
            } catch (Exception e) {
                e.printStackTrace();
                result = Clave.RESULT_ERROR;
            }

            switch (result) {
                case RESULT_ERROR_BD: {
                    Mensaje.mostrarMensaje3(rootPane);
                    break;
                }
                case RESULT_ERROR: {
                    Mensaje.mostrarMensaje5(rootPane);
                    break;
                }
                case RESULT_CAMPO_BLANCO: {
                    // Hacer nada.
                    break;
                }
                case RESULT_NO_EXISTE: {
                    Mensaje.mostrarMensajeNoEncontrado(rootPane);
                    break;
                }
                case RESULT_OK: {
                    actualizar();
                    Utiles.seleccionar(edtCodigoLote);
                    Utiles.seleccionarFila(tablaInvenario, COL_CODIGO_LOTE, codigoLote);
                    break;
                }
            }
        }
    }//GEN-LAST:event_edtCodigoLoteKeyPressed

    private void edtCodigoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtCodigoFocusGained
        // TODO add your handling code here:
        Utiles.establecerFocusActivoG(edtCodigo);
    }//GEN-LAST:event_edtCodigoFocusGained

    private void edtCodigoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtCodigoFocusLost
        // TODO add your handling code here:
        Utiles.establecerFocusInactivo(edtCodigo);
    }//GEN-LAST:event_edtCodigoFocusLost

    private void edtCodigoLoteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtCodigoLoteFocusGained
        // TODO add your handling code here:
        Utiles.establecerFocusActivoG(edtCodigoLote);
    }//GEN-LAST:event_edtCodigoLoteFocusGained

    private void edtCodigoLoteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtCodigoLoteFocusLost
        // TODO add your handling code here:
        Utiles.establecerFocusInactivo(edtCodigoLote);
    }//GEN-LAST:event_edtCodigoLoteFocusLost

    private void edtCodigoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCodigoKeyTyped
        // TODO add your handling code here:

        Utiles.suprimirComilla(edtCodigo);
        Utiles.suprimirComilla(evt);
        Utiles.seleccionarYBorrar(evt, edtCodigo);
    }//GEN-LAST:event_edtCodigoKeyTyped

    private void edtCodigoLoteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCodigoLoteKeyTyped
        // TODO add your handling code here:

        Utiles.suprimirComilla(evt);
        Utiles.suprimirComilla(edtCodigoLote);
        Utiles.seleccionarYBorrar(evt, edtCodigoLote);
    }//GEN-LAST:event_edtCodigoLoteKeyTyped

    private void tablaInvenarioKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tablaInvenarioKeyReleased
        // TODO add your handling code here:

        if (evt.getKeyCode() == KeyEvent.VK_TAB) {
            Utiles.modoTabM1(tablaInvenario);
        } else {
            Utiles.establecerFocusActivoG(edtCodigo);
        }
    }//GEN-LAST:event_tablaInvenarioKeyReleased

    private void edtCodigoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_edtCodigoMouseClicked
        // TODO add your handling code here:
        Utiles.pararEdicion(tablaInvenario);
    }//GEN-LAST:event_edtCodigoMouseClicked

    private void edtCodigoLoteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_edtCodigoLoteMouseClicked
        // TODO add your handling code here:
        Utiles.pararEdicion(tablaInvenario);
    }//GEN-LAST:event_edtCodigoLoteMouseClicked

    private void btnChequearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChequearActionPerformed
        // TODO add your handling code here:
        try {
            iniciarProc8();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnChequearActionPerformed

    private void tablaInvenarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaInvenarioMouseClicked
        // TODO add your handling code here:
        if (evt.getButton() == MouseEvent.BUTTON3) {
            //Se presiono el boton derecho
            mTabla.show(evt.getComponent(),
                    evt.getX(), evt.getY()); //... mostramos el menu en la ubicacion del raton

        } else {
            mTabla.setVisible(false);
        }

        Utiles.establecerFocusActivoG(edtCodigo);
    }//GEN-LAST:event_tablaInvenarioMouseClicked

    private void mItemModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemModificarActionPerformed
        // TODO add your handling code here:
        try {
            iniciarProc10();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_mItemModificarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnChequear;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JTextField edtCodigo;
    private javax.swing.JTextField edtCodigoLote;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem mItemModificar;
    private javax.swing.JPopupMenu mTabla;
    private javax.swing.JTable tablaInvenario;
    // End of variables declaration//GEN-END:variables

    private void iniciarFormulario() {
        iniciarConfiguraciones();
        inicializarComponentesLogicos();
        inicializarComponentesFisicos();
    }

    private void iniciarConfiguraciones() {
        Utiles.suprimirComilla(tablaInvenario);
    }

    /**
     * Limpieza de Formulario
     */
    private void limpiarFormulario() {
        limpiarTablaLote();
        limpiarCamposEntradaLote();
    }

    private void limpiarTablaLote() {
        String[] columnNames = {
            "<html><center> Código de búsqueda <br> <br></html>",
            "<html><center> <br> Código de lote <br> <br></html>",
            "<html><center> <br> Código <br> <br></html>",
            "<html><center> Descripción <br></html>",
            "<html> Unid. <br>ofert.</html>",
            "<html> <center>Costo unit. </html>",
            "<html> <center>Precio unit. <br></html>",};

        Utiles.limpiarTabla(tablaInvenario, columnNames);
    }

    private void limpiarCamposEntradaLote() {
        this.edtCodigo.setText("");
    }

    private void inicializarComponentesLogicos() {
        this.listaInventario = new LinkedList<>();
    }

    private void inicializarComponentesFisicos() {
        DefaultTableModel model = (DefaultTableModel) this.tablaInvenario.getModel();

        model.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                try {
                    iniciarProc0(e);
                } catch (Exception exc) {
                }
            }
        });

        this.tablaInvenario.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                Utiles.establecerFocusActivoG(edtCodigo);
            }

            @Override
            public void mousePressed(MouseEvent e) {
            }

            @Override
            public void mouseReleased(MouseEvent e) {
            }

            @Override
            public void mouseEntered(MouseEvent e) {
            }

            @Override
            public void mouseExited(MouseEvent e) {
            }
        });
    }

    private void actualizar() {
        this.limpiarTablaLote();
        this.cargarListaEnTabla(listaInventario);
    }

//************************************ Procedimientos ***********************************************
    private Clave iniciarProc1(String codigo) {
        Clave result = Clave.RESULT_OK;

        if (codigo == null || codigo.isEmpty()) {
            result = Clave.RESULT_CAMPO_BLANCO;
        } else {
            if (consultar(listaInventario, codigo)) {
                return Clave.RESULT_EXISTE;
            } else {
                Inventario inv = null;

                if (gestor.consultarInvPorCodigo(codigo)) {
                    inv = gestor.obtenerInventariosPorCodigo(codigo).get(0);
                }

                if (inv == null) {
                    result = Clave.RESULT_NO_EXISTE;
                } else {
                    agregarALista(inv);
                }
            }
        }

        return result;
    }

    private void cargarListaEnTabla(List<Inventario> lista) {
        int INDEX = -1;
        DefaultTableModel model = (DefaultTableModel) this.tablaInvenario.getModel();

        for (Inventario i : lista) {
            INDEX++;
            Object[] datos = {
                i.getProducto().getCodigoBusq1(),
                i.getProducto().getCodigoLote(),
                i.getProducto().getCodigo(),
                i.getProducto().getDescripcion(),
                Utiles.formatearM2(i.getUnidOf()),
                Utiles.formatear(i.getCostoUnitario()),
                Utiles.formatear(i.getpVenta())
            };

            model.insertRow(INDEX, datos);
        }
    }

    private void iniciarProc0(TableModelEvent e) {
        if (e.getType() == TableModelEvent.UPDATE) {
            // Se obtiene el modelo de la tabla y la fila/columna que han cambiado.

            String codigo = Utiles.obtenerValor(tablaInvenario, COL_CODIGO);

            if (consultar(listaInventario, codigo)) {
                Inventario i = obtener(listaInventario, codigo);

                String value = Utiles.obtenerCambios(tablaInvenario);

                modificar(i, value, tablaInvenario.getSelectedColumn());

            }
            actualizar();

            Utiles.seleccionarFila(tablaInvenario, 1, codigo);
        }
    }

    public void iniciarProc1(List<Inventario> lista) {
        listaInventario.addAll(lista);
        actualizar();
    }
//*********************************** Procedimientos **************************************

    private boolean existenCamposNoHomogeneos() {
        boolean bandera = false;

        if (listaInventario.isEmpty()) {
            bandera = true;
        } else {
            for (Inventario inv : listaInventario) {

                BigDecimal precioVenta = inv.getpVenta();
                BigDecimal precioCosto = inv.getCostoUnitario();

                if (precioCosto.doubleValue() < 0 || precioVenta.doubleValue() < 0) {
                    bandera = true;
                    break;
                }

                if (precioCosto.doubleValue() >= precioVenta.doubleValue()) {
                    bandera = true;
                    break;

                }
                String codigo = inv.getProducto().getCodigo();

                if (codigo.equals(CODIGO_PROHIBIDO)) {
                    bandera = true;
                    break;
                }
            }
        }

        return bandera;
    }

    private Clave iniciarProc2() {
        Clave result = Clave.RESULT_OK;

        String codigo = Utiles.obtenerValor(tablaInvenario, COL_CODIGO);

        if (codigo == null || codigo.isEmpty()) {
            return Clave.RESULT_CAMPO_BLANCO;
        } else {
            if (consultar(listaInventario, codigo)) {
                Inventario inv = obtener(listaInventario, codigo);

                eliminar(listaInventario, inv);
            } else {
                return Clave.RESULT_NO_EXISTE;
            }
        }

        return result;
    }

    private Clave iniciarProc4(String codLote) throws Exception {
        Clave result = Clave.RESULT_OK;

        if (codLote == null || codLote.isEmpty()) {
            return Clave.RESULT_CAMPO_BLANCO;
        } else {
            List<Inventario> list = null;

            try {
                if (gestor.consultarInventarioPorCodigoLote(codLote)) {
                    list = gestor.obtenerInventariosPorCodigoLote(codLote);
                }
            } catch (Exception e) {
                e.printStackTrace();
                return Clave.RESULT_ERROR_BD;
            }

            if (list == null || list.isEmpty()) {
                result = Clave.RESULT_NO_EXISTE;
            } else {
                agregarALista(list);
            }
        }

        return result;
    }

    private Clave iniciarProc7() {
        Clave result = Clave.RESULT_OK;

        if (listaInventario.isEmpty()) {
            return result = Clave.RESULT_LISTA_VACIA;
        }

        if (existenCamposNoHomogeneos()) {
            return result = Clave.RESULT_INCONSISTENCIA;
        }

        try {
            gestor.guardarInventario(listaInventario);
        } catch (Exception excp) {
            excp.printStackTrace();
            return Clave.RESULT_ERROR_BD;
        }

        return result;
    }

    private void iniciarProc8() {
        boolean band = false;

        if (listaInventario.isEmpty()) {
            // Hacer nada.
        } else {
            Utiles.limpiarSeleccion(tablaInvenario);

            for (int i = 0; i < listaInventario.size(); i++) {
                Inventario inv = listaInventario.get(i);

                if (inv.getlOferta().isEmpty()) {
                    // Hacer nada.
                } else {
                    band = true;
                    Utiles.seleccionarFilaM2(tablaInvenario, COL_CODIGO, inv.getProducto().getCodigo());
                }
            }

            if (band) {
                Utiles.colorearRojo(btnChequear);
            } else {
                Utiles.descolorear(btnChequear);
            }
        }
        Utiles.establecerFocusActivoG(edtCodigo);
    }

    private void iniciarProc9() {
        boolean band = false;

        if (listaInventario.isEmpty()) {
            // Hacer nada.
        } else {
            for (Inventario inv : listaInventario) {
                if (inv.getlOferta().isEmpty()) {
                    // Hacer nada.
                } else {
                    band = true;
                    break;
                }
            }

            if (band) {
                btnChequear.setBackground(Color.red);
            } else {
                btnChequear.setBackground(new Color(240, 240, 240));
            }
        }
    }

    private void iniciarProc10() {
        String codigo = Utiles.obtenerValor(tablaInvenario, COL_CODIGO);

        if (codigo.isEmpty()) {
            // Hacer nada.
        } else {
            FModificarInventario form = new FModificarInventario(this, mainFrame, gestor, codigo, true);

            form.setVisible(true);
        }
    }

    public void iniciarProc11(String codigo) {
        if (listaInventario.isEmpty()) {
            // Hacer nada.
        } else {
            if (consultar(listaInventario, codigo)) {
                eliminar(listaInventario, codigo);

                try {
                    if (gestor.consultarInvPorCodigo(codigo)) {
                        Inventario inv = gestor.obtenerInvPorCodigoM2(codigo);

                        agregarALista(inv);
                        limpiarTablaLote();
                        cargarListaEnTabla(listaInventario);

                        edtCodigo.setText(codigo);
                        iniciarProc9();
                        Utiles.establecerFocusActivoG(edtCodigo);
                        Utiles.seleccionarFila(tablaInvenario, COL_CODIGO, codigo);

                    }
                } catch (Exception e) {
                }
            }
        }
    }

    public void iniciarProc12(List<Inventario> lista) {
        listaInventario.addAll(lista);

        actualizar();
    }

    private void agregarALista(Inventario inv) {
        listaInventario.add(inv);
    }

    private void eliminar(List<Inventario> lista, Inventario ent) {
        lista.remove(ent);
    }

    private boolean eliminar(List<Inventario> lista, String codigo) {
        boolean band = false;

        for (Inventario inv : lista) {
            if (inv.getProducto().getCodigo().equals(codigo)) {
                lista.remove(inv);
                break;
            }
        }

        return band;
    }

    private void agregarALista(List<Inventario> lista) {
        for (Inventario inv : lista) {
            // Verifica si ya se encuentra en la lista de INVENTARIOS.
            if (consultar(listaInventario, inv.getProducto().getCodigo())) {
                // Hacer nada.
            } else {
                listaInventario.add(inv);
            }
        }
    }

    private boolean consultar(List<Inventario> lista, String codigo) {
        boolean band = false;

        for (Inventario inv : lista) {
            if (inv.getProducto().getCodigo().equals(codigo)) {
                band = true;
                break;
            }
        }

        return band;
    }

    private Inventario obtener(List<Inventario> l, String codigo) {
        Inventario inv;

        inv = null;

        for (Inventario element : l) {
            if (element.getProducto().getCodigo().equals(codigo)) {
                inv = element;
                break;
            }
        }

        return inv;
    }

    private void modificar(Inventario inv, String value, int columna) {

        switch (columna) {
            case COL_CODIGO_BUSQUEDA: {
                inv.getProducto().setCodigoBusq1(value);
                break;
            }
            case COL_CODIGO_LOTE: {
                inv.getProducto().setCodigoLote(value);
                break;
            }
            case COL_DETALLE: {
                if (value == null || value.isEmpty()) {
                    // Hacer nada.
                } else {
                    inv.getProducto().setDescripcion(value);
                }
                break;
            }

            case COL_COSTO_UNIT: {
                try {
                    if (value.contains(",")) {
                        value = value.replace(",", ".");
                    }

                    BigDecimal costoUnit = new BigDecimal(value);

                    if (costoUnit.doubleValue() < 0) {
                        // Hacer nada.
                    } else {
                        inv.setCostoUnitario(costoUnit);
                    }
                } catch (Exception ex) {
                }
                break;
            }
            case COL_PRECIO_VENTA: {
                try {
                    if (value.contains(",")) {
                        value = value.replace(",", ".");
                    }

                    BigDecimal ventaUnit = new BigDecimal(value);

                    if (ventaUnit.doubleValue() < 0) {
                        // Hacer nada.
                    } else {
                        inv.setpVenta(ventaUnit);
                    }
                } catch (Exception ex) {
                }
                break;
            }
        }
        inv.actualizarParametros();
    }
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.libreria.gral.system.ui;

import com.mycompany.libreria.gral.system.controller.GestorLibreriaGralSystem;
import com.mycompany.libreria.gral.system.model.Oferta;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.util.List;
import java.util.Random;
import javax.swing.JTable;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import utiles.Clave;
import utiles.Mensaje;
import utiles.Utiles;

/**
 *
 * @author KEVIN
 */
public class FOfertasMI extends javax.swing.JFrame {

    private String codigo;
    private List<Oferta> copLOfertas;
    private List<Oferta> origLOfertas;
    private GestorLibreriaGralSystem gestor;

    public FOfertasMI(GestorLibreriaGralSystem gestor, String codigo, List<Oferta> l) {
        initComponents();
        this.gestor = gestor;
        this.codigo = codigo;
        origLOfertas = l;
        copLOfertas = gestor.copiarLista(l);
        limpiarFormulario();
        iniciarFormulario();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PopMTablaEntrada = new javax.swing.JPopupMenu();
        mItemCopiarCod = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaOfertas = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        btnCancelar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnAgregar = new javax.swing.JButton();

        mItemCopiarCod.setText("Copiar código");
        mItemCopiarCod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemCopiarCodActionPerformed(evt);
            }
        });
        PopMTablaEntrada.add(mItemCopiarCod);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Lista de Ofertas <MI>");
        setAlwaysOnTop(true);
        setResizable(false);

        tablaOfertas.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tablaOfertas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Código", "Descripción", "Unid. ofert.", "Precio unit."
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaOfertas.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tablaOfertas.setRequestFocusEnabled(false);
        tablaOfertas.setRowHeight(32);
        tablaOfertas.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablaOfertas.getTableHeader().setResizingAllowed(false);
        tablaOfertas.getTableHeader().setReorderingAllowed(false);
        tablaOfertas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tablaOfertasKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tablaOfertas);
        if (tablaOfertas.getColumnModel().getColumnCount() > 0) {
            tablaOfertas.getColumnModel().getColumn(0).setPreferredWidth(250);
            tablaOfertas.getColumnModel().getColumn(1).setPreferredWidth(400);
            tablaOfertas.getColumnModel().getColumn(2).setResizable(false);
            tablaOfertas.getColumnModel().getColumn(3).setPreferredWidth(100);
        }

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAgregar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 846, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
        origLOfertas.clear();
        origLOfertas.addAll(copLOfertas);

        this.dispose();
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void mItemCopiarCodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemCopiarCodActionPerformed
        // TODO add your handling code here:
        final int COL_CODIGO = 1;

        Utiles.copiarAPortapapeles(tablaOfertas, COL_CODIGO);
    }//GEN-LAST:event_mItemCopiarCodActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        final int rowSeleted = tablaOfertas.getSelectedRow();
        //  Validaciones
        if (rowSeleted < 0) {
            Mensaje.mostrarMensajeSeleccion(this);
        } else {
            final int COL_CODIGO = 0;
            String codigo = (String) tablaOfertas.getValueAt(rowSeleted, COL_CODIGO);

            if (codigo == null || codigo.isEmpty()) {
                Mensaje.mostrarMensajeSeleccion(rootPane);
            } else {
                Clave result;

                // Acciones
                try {
                    result = eliminar(copLOfertas, codigo);
                } catch (Exception e) {
                    e.printStackTrace();
                    result = Clave.RESULT_ERROR;
                }

                switch (result) {
                    case RESULT_ERROR: {
                        Mensaje.mostrarMensaje5(rootPane);
                        dispose();
                        break;
                    }
                    case RESULT_NO_EXISTE: {
                        Mensaje.mostrarMensajeSeleccion(rootPane);
                        dispose();
                        break;
                    }

                    case RESULT_OK: {
                        //  Hacer nada.
                    }
                }
                
                this.actualizarForm();
            }          
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        // TODO add your handling code here:
        try {
            Oferta of = crearNuevaOferta();

            agregarALista(copLOfertas, of);
        } catch (Exception e) {
            e.printStackTrace();
            Mensaje.mostrarMensaje5(rootPane);
        }

        actualizarForm();
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void tablaOfertasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tablaOfertasKeyReleased
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_TAB)
        {
            Utiles.modoTabM1(tablaOfertas);
        }
    }//GEN-LAST:event_tablaOfertasKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPopupMenu PopMTablaEntrada;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem mItemCopiarCod;
    private javax.swing.JTable tablaOfertas;
    // End of variables declaration//GEN-END:variables

    //***************************** Acciones ***************************************
    private Oferta crearNuevaOferta() {
        String codigo = generarCodigo();
        String desc = "Nueva oferta.";
        int MIN_UNID_OF = 1;
        boolean EST_ACTIVO = true;
        BigDecimal pVenta = new BigDecimal(0);
        Oferta of = new Oferta();

        of.setDescripcion(desc);
        of.setCodigo(codigo);
        of.setUnidOfert(MIN_UNID_OF);
        of.setPrecioVenta(pVenta);
        of.setEstado(EST_ACTIVO);

        return of;
    }

    private void modificar(Oferta of, int colMod, String value) {
        final int COL_DESC = 1;
        final int COL_UNID_OFERTADAS = 2;
        final int COL_PREC_VEN = 3;

        switch (colMod) {
            case COL_DESC: {
                if (value == null || value.isEmpty()) {
                    // Haacer nada. 
                } else {
                    of.setDescripcion(value);
                }

                break;
            }
            case COL_UNID_OFERTADAS: {
                int unidOf;

                try {
                    unidOf = new Integer(value);
                    
                    if (unidOf < 1) {
                        // Hacer nada.
                    } else
                    {
                        of.setUnidOfert(unidOf);
                    }
                } catch (Exception e) {
                }

                break;
            }
            case COL_PREC_VEN: {
                BigDecimal precVenta;

                try {
                    precVenta = new BigDecimal(value);

                    if (precVenta.doubleValue() < 0) {
                        precVenta = new BigDecimal(0);
                    }
                } catch (Exception e) {
                    precVenta = new BigDecimal(0);
                }

                of.setPrecioVenta(precVenta);
                break;
            }
        }
    }

    private void procesarDatos1(JTable table, List<Oferta> l, String codigo, int rowMod, int colMod) {
        //  Acciones 
        if (consultar(l, codigo)) {
            Oferta of = obtener(l, codigo);
            String value = Utiles.obtenerCambios(table);

            modificar(of, colMod, value);
        } else {
            Mensaje.mostrarMensajeSeleccion(this);
        }
    }

    private void iniciarProc2() {
        int colMod = tablaOfertas.getSelectedColumn();
        int rowMod = tablaOfertas.getSelectedRow();

        if (rowMod < 0 || colMod < 0) {
            // Hacer nada.
        } else {
            final int COL_CODIGO = 0;
            final String codigo = (String) tablaOfertas.getValueAt(rowMod, COL_CODIGO);

            if (codigo == null || codigo.isEmpty()) {
                // hacer nada.
            } else {
                try {
                    procesarDatos1(tablaOfertas, copLOfertas, codigo, rowMod, colMod);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

        actualizarForm();
        Utiles.seleccionarFila(tablaOfertas, rowMod);
    }

    /**
     * Agrega una oferta a la nueva lista de ofertas.
     *
     * @param o Oferta
     */
    private void agregarALista(List<Oferta> l, Oferta of) {
        l.add(of);
    }

    private Clave eliminar(List<Oferta> l, String codigo) {
        
        Clave result = Clave.RESULT_OK;

        if (consultar(l, codigo)) {
            Oferta of = obtener(l, codigo);

            if (of.getId() == -1) {
                l.remove(of);
            } else {
                boolean ESTADO_BAJA = false;

                of.setEstado(ESTADO_BAJA);
            }
        } else {
            result = Clave.RESULT_NO_EXISTE;
        }

        return result;
    }

    private Oferta obtener(List<Oferta> l, String value) {
        Oferta oferta;

        oferta = null;

        for (Oferta of : l) {
            if (of.getCodigo().equals(value)) {
                oferta = of;
                break;
            }
        }

        return oferta;
    }

    private boolean consultar(List<Oferta> l, String value) {
        boolean band;

        band = false;

        for (Oferta of : l) {
            if (of.getCodigo().equals(value)) {
                band = true;
                break;
            }
        }

        return band;
    }

    private String generarCodigo() {
        Random r = new Random();
        final int NUM_MAX_OF = 1000;

        String nCodigo = codigo + "-P" + r.nextInt(NUM_MAX_OF);

        return nCodigo;
    }
    //************************ Formulario ***************************

    private void iniciarFormulario() {
        iniciarConfiguracion();
        mostrarListaEnTabla(tablaOfertas, copLOfertas);
    }

    private void limpiarFormulario() {
        limpiarTablaOfertas();
    }

    private void limpiarTablaOfertas() {
        Utiles.limpiarTabla(tablaOfertas);
    }

    /**
     * Carga la nueva lista en tabla.
     *
     * @param tabla
     * @param l
     */
    private void mostrarListaEnTabla(JTable tabla, List<Oferta> l) {
        DefaultTableModel model = (DefaultTableModel) tabla.getModel();

        int INDEX_ROW = -1;

        for (Oferta of : l) {
            if (of.isEstado()) {
                String p0 = of.getCodigo();
                String p1 = of.getDescripcion();
                String p2 = String.valueOf(of.getUnidOfert());
                String p3 = Utiles.formatear(of.getPrecioVenta());
                String[] datos = {p0, p1, p2, p3};

                INDEX_ROW++;
                model.insertRow(INDEX_ROW, datos);
            }
        }
    }

    private void actualizarForm() {
        Utiles.pararEdicion(tablaOfertas);
        limpiarTablaOfertas();
        mostrarListaEnTabla(tablaOfertas, copLOfertas);
    }
    
    private void iniciarConfiguracion()
    {
        DefaultTableModel model = (DefaultTableModel) tablaOfertas.getModel();

        model.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == TableModelEvent.UPDATE) {
                    try {
                        iniciarProc2();
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
            }
        });
        Utiles.suprimirComilla(tablaOfertas);
    }
}

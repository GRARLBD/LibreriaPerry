/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.libreria.gral.system.ui;

import com.itextpdf.text.pdf.PdfReader;
import com.mycompany.libreria.gral.system.controller.GestorLibreriaGralSystem;
import com.mycompany.libreria.gral.system.model.Entrada;
import com.mycompany.libreria.gral.system.model.Factura;
import com.mycompany.libreria.gral.system.model.Inventario;
import com.mycompany.libreria.gral.system.model.Oferta;
import com.mycompany.libreria.gral.system.model.Salida;
import com.sun.glass.events.KeyEvent;
import java.awt.Color;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import utiles.Clave;
import utiles.ExceptionBD;
import utiles.ExceptionProgram;
import utiles.JSystemFileChooser;
import utiles.Mensaje;
import utiles.Path;
import utiles.Progreso;
import utiles.Utiles;

/**
 *
 * @author KEVIN
 */
public class MainFrame extends javax.swing.JFrame {

    private final int INDEX_PANEL_DOCUMENTOS = 6;

    private final int COL_CODIGO_PF = 1;
    private final int COL_CODIGO_TI = 1;
    private final int COL_CODIGO_TE = 1;
    private final int COL_IMAGEN_TI = 5;
    private final int COL_CODIGO_TIG = 2;
    private final int COL_CODIGO_TLA = 1;
    private final int COL_DESCRIPCION_TLA = 2;
    private final int COL_PRECIO_CONTADO_LA = 4;

    private final String PAPA_NOEL = "PAPA_NOEL";
    private final String CAMPEON = "CAMPEON";
    private final String SAN_PABLO = "SAN_PABLO";

    private GestorLibreriaGralSystem gestor;
    private List<Entrada> listaEntradas;
    private List<Inventario> listaInventarios;
    private List<Salida> listaSalidas;
    private List<Factura> listaFacturas;
    private List<String> lInvImp;
    private List<String> lImpresion;
    private String[] resumenSalida;
    private String[] resumenInventario;

    private List<String[]> listaSP;
    private List<String[]> listaC;
    private List<String[]> listaPN;

    /**
     * Creates new form Main
     *
     * @param gestor
     */
    public MainFrame(GestorLibreriaGralSystem gestor) {
        initComponents();
        this.gestor = gestor;
        this.listaEntradas = new LinkedList<>();
        this.listaInventarios = new LinkedList<>();
        this.listaSalidas = new LinkedList<>();
        this.listaFacturas = new ArrayList<>();
        this.lImpresion = new ArrayList<>();
        this.lInvImp = new ArrayList<>();
        this.resumenSalida = new String[4];
        this.resumenInventario = new String[4];

        this.listaSP = new ArrayList<>();
        this.listaC = new ArrayList<>();
        this.listaPN = new ArrayList<>();

        limpiarFormulario();
        cargarInformacion();
        iniciarConfiguraciones();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuTI = new javax.swing.JPopupMenu();
        mItemAgregarImpTI = new javax.swing.JMenuItem();
        mItemBuscarDoc = new javax.swing.JMenuItem();
        itemFijarTI = new javax.swing.JMenuItem();
        mItemCopiarTI = new javax.swing.JMenuItem();
        mItemModificarInvTI = new javax.swing.JMenuItem();
        mItemConsultar = new javax.swing.JMenuItem();
        mItemEliminarTI = new javax.swing.JMenuItem();
        menuTE = new javax.swing.JPopupMenu();
        mItemCopiarTE = new javax.swing.JMenuItem();
        mItemModInvTE = new javax.swing.JMenuItem();
        menuTS = new javax.swing.JPopupMenu();
        mItemCopiarTS = new javax.swing.JMenuItem();
        mItemConsulta = new javax.swing.JMenuItem();
        menuTIG = new javax.swing.JPopupMenu();
        mItemCopiarTIG = new javax.swing.JMenuItem();
        mItemModificarInvTIG = new javax.swing.JMenuItem();
        mItemConsultarTIG = new javax.swing.JMenuItem();
        mItemAgImpTIG = new javax.swing.JMenuItem();
        mItemBuscarSinCodB = new javax.swing.JMenuItem();
        menuTIFS = new javax.swing.JPopupMenu();
        mItemCopiarTIFS = new javax.swing.JMenuItem();
        menuTA = new javax.swing.JPopupMenu();
        mItemCopiarCodigo = new javax.swing.JMenuItem();
        itemFijarTLA = new javax.swing.JMenuItem();
        itemNuevo = new javax.swing.JMenuItem();
        itemModificar = new javax.swing.JMenuItem();
        mItemConsulta1 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        btnFacturarion = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        tabPaneMain = new javax.swing.JTabbedPane();
        panelInventario = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaInventario = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        edtDescripcionPI = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        edtCodigoPI = new javax.swing.JTextField();
        edtCodLotePI = new javax.swing.JTextField();
        btnMostrarTodo = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        panelEntradas = new javax.swing.JPanel();
        btnNuevaEntrada = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaEntrada = new javax.swing.JTable();
        btnEntradaLote = new javax.swing.JButton();
        panelSalidas = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tablaSalida = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        tablaResumenSalida = new javax.swing.JTable();
        pFecDesPS = new javax.swing.JPanel();
        cmbMes = new javax.swing.JComboBox<>();
        btnBuscarSalidas = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        edtDesPS = new javax.swing.JTextField();
        cmbDia = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        cmbAnio = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        btnMostrarTodoSalidas = new javax.swing.JButton();
        panelInfoGeneral = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tablaInfoGeneral = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        tablaResumenInfoGeneral = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        btnMostrarTodoPIG = new javax.swing.JButton();
        btnEliminarPIG = new javax.swing.JButton();
        edtCodigoPIG = new javax.swing.JTextField();
        btnNuevoInventario = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnModificarInventario1 = new javax.swing.JButton();
        edtCodigoLotePIG = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        panelStockWarning = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        tablaInfoFaltanteStock = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        edtCantMin = new javax.swing.JTextField();
        btnMostrarTodoPIFS = new javax.swing.JButton();
        btnBuscarPIFS = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        pFecDesPS1 = new javax.swing.JPanel();
        cmbMesPF = new javax.swing.JComboBox<>();
        btnBuscarSalPF = new javax.swing.JButton();
        cmbDiaPF = new javax.swing.JComboBox<>();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        cmbAnioPF = new javax.swing.JComboBox<>();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaFactura = new javax.swing.JTable();
        btnVerPF = new javax.swing.JButton();
        btnMostrarTodoSalidas1 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        btnAbrirCampeon = new javax.swing.JButton();
        edtFiltroSanPabloPA = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        edtFiltroCampeonPA = new javax.swing.JTextField();
        btnAbrirSanPablo = new javax.swing.JButton();
        btnAbrirPapaNoel = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        edtFiltroPapaNoelPA = new javax.swing.JTextField();
        btnLimpiarPA = new javax.swing.JButton();
        btnVaciarPA = new javax.swing.JButton();
        cbSanPablo = new javax.swing.JCheckBox();
        cbCampeon = new javax.swing.JCheckBox();
        cbPapaNoel = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaListaArchivos = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        lbl_n_art = new javax.swing.JLabel();
        btnBuscarCambiosPA = new javax.swing.JButton();
        edtCodigoBusqPA = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        edtCodigoPLA = new javax.swing.JTextField();
        mbMain = new javax.swing.JMenuBar();
        mArchivo = new javax.swing.JMenu();
        jmCerrar = new javax.swing.JMenuItem();
        mImpresion = new javax.swing.JMenu();
        jmGenCodigo = new javax.swing.JMenuItem();
        jmGenNumeros = new javax.swing.JMenuItem();
        mLimpiar = new javax.swing.JMenu();
        mItemLimpiarListaImp = new javax.swing.JMenuItem();

        mItemAgregarImpTI.setText("Agregar a la lista de impresión");
        mItemAgregarImpTI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemAgregarImpTIActionPerformed(evt);
            }
        });
        menuTI.add(mItemAgregarImpTI);

        mItemBuscarDoc.setText("Buscar en documentos");
        mItemBuscarDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemBuscarDocActionPerformed(evt);
            }
        });
        menuTI.add(mItemBuscarDoc);

        itemFijarTI.setText("Fijar elemento");
        itemFijarTI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemFijarTIActionPerformed(evt);
            }
        });
        menuTI.add(itemFijarTI);

        mItemCopiarTI.setText("Copiar código");
        mItemCopiarTI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemCopiarTIActionPerformed(evt);
            }
        });
        menuTI.add(mItemCopiarTI);

        mItemModificarInvTI.setText("Modificar inventario");
        mItemModificarInvTI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemModificarInvTIActionPerformed(evt);
            }
        });
        menuTI.add(mItemModificarInvTI);

        mItemConsultar.setText("Consultar");
        mItemConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemConsultarActionPerformed(evt);
            }
        });
        menuTI.add(mItemConsultar);

        mItemEliminarTI.setText("Eliminar inventario");
        mItemEliminarTI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemEliminarTIActionPerformed(evt);
            }
        });
        menuTI.add(mItemEliminarTI);

        mItemCopiarTE.setText("Copiar código");
        mItemCopiarTE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemCopiarTEActionPerformed(evt);
            }
        });
        menuTE.add(mItemCopiarTE);

        mItemModInvTE.setText("Modificar inventario");
        mItemModInvTE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemModInvTEActionPerformed(evt);
            }
        });
        menuTE.add(mItemModInvTE);

        mItemCopiarTS.setText("Copiar código");
        mItemCopiarTS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemCopiarTSActionPerformed(evt);
            }
        });
        menuTS.add(mItemCopiarTS);

        mItemConsulta.setText("Consultar");
        mItemConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemConsultaActionPerformed(evt);
            }
        });
        menuTS.add(mItemConsulta);

        mItemCopiarTIG.setText("Copiar código");
        mItemCopiarTIG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemCopiarTIGActionPerformed(evt);
            }
        });
        menuTIG.add(mItemCopiarTIG);

        mItemModificarInvTIG.setText("Modificar inventario");
        mItemModificarInvTIG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemModificarInvTIGActionPerformed(evt);
            }
        });
        menuTIG.add(mItemModificarInvTIG);

        mItemConsultarTIG.setText("Consultar");
        mItemConsultarTIG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemConsultarTIGActionPerformed(evt);
            }
        });
        menuTIG.add(mItemConsultarTIG);

        mItemAgImpTIG.setText("Agregar a la lista de impresión");
        mItemAgImpTIG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemAgImpTIGActionPerformed(evt);
            }
        });
        menuTIG.add(mItemAgImpTIG);

        mItemBuscarSinCodB.setText("Buscar inventarios sin código de búsqueda");
        mItemBuscarSinCodB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemBuscarSinCodBActionPerformed(evt);
            }
        });
        menuTIG.add(mItemBuscarSinCodB);

        mItemCopiarTIFS.setText("Copiar código");
        mItemCopiarTIFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemCopiarTIFSActionPerformed(evt);
            }
        });
        menuTIFS.add(mItemCopiarTIFS);

        mItemCopiarCodigo.setText("Copiar código");
        mItemCopiarCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemCopiarCodigoActionPerformed(evt);
            }
        });
        menuTA.add(mItemCopiarCodigo);

        itemFijarTLA.setText("Fijar elemento");
        itemFijarTLA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemFijarTLAActionPerformed(evt);
            }
        });
        menuTA.add(itemFijarTLA);

        itemNuevo.setText("Nuevo inventario");
        itemNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemNuevoActionPerformed(evt);
            }
        });
        menuTA.add(itemNuevo);

        itemModificar.setText("Modificar inventario");
        itemModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemModificarActionPerformed(evt);
            }
        });
        menuTA.add(itemModificar);

        mItemConsulta1.setText("Consultar");
        mItemConsulta1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemConsulta1ActionPerformed(evt);
            }
        });
        menuTA.add(mItemConsulta1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setExtendedState(MAXIMIZED_BOTH);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        btnFacturarion.setText("Facturar");
        btnFacturarion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFacturarionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnFacturarion, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnFacturarion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabPaneMain.setFocusable(false);
        tabPaneMain.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabPaneMainMouseClicked(evt);
            }
        });

        panelInventario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelInventarioMouseClicked(evt);
            }
        });

        tablaInventario.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 50, 1, 20));
        tablaInventario.setFont(new java.awt.Font("Tahoma", 0, 21)); // NOI18N
        tablaInventario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Código de  lote", "Código", "Descripción", "Unid. ofert.", "Precio unit.", "Imagen"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaInventario.setName("TABLA_INVENTARIO"); // NOI18N
        tablaInventario.setRowHeight(35);
        tablaInventario.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tablaInventario.getTableHeader().setResizingAllowed(false);
        tablaInventario.getTableHeader().setReorderingAllowed(false);
        tablaInventario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaInventarioMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tablaInventario);
        if (tablaInventario.getColumnModel().getColumnCount() > 0) {
            tablaInventario.getColumnModel().getColumn(2).setPreferredWidth(450);
            tablaInventario.getColumnModel().getColumn(3).setPreferredWidth(20);
            tablaInventario.getColumnModel().getColumn(5).setPreferredWidth(30);
        }

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel15.setText("Descripción: ");

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel14.setText("Código: ");

        edtDescripcionPI.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        edtDescripcionPI.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                edtDescripcionPIFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                edtDescripcionPIFocusLost(evt);
            }
        });
        edtDescripcionPI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                edtDescripcionPIKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                edtDescripcionPIKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                edtDescripcionPIKeyTyped(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("Código de lote:");

        edtCodigoPI.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        edtCodigoPI.setFocusCycleRoot(true);
        edtCodigoPI.setNextFocusableComponent(this);
        edtCodigoPI.setVerifyInputWhenFocusTarget(false);
        edtCodigoPI.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                edtCodigoPIFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                edtCodigoPIFocusLost(evt);
            }
        });
        edtCodigoPI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                edtCodigoPIKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                edtCodigoPIKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                edtCodigoPIKeyTyped(evt);
            }
        });

        edtCodLotePI.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        edtCodLotePI.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                edtCodLotePIFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                edtCodLotePIFocusLost(evt);
            }
        });
        edtCodLotePI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                edtCodLotePIKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                edtCodLotePIKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                edtCodLotePIKeyTyped(evt);
            }
        });

        btnMostrarTodo.setText("Mostrar todo");
        btnMostrarTodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarTodoActionPerformed(evt);
            }
        });

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(edtCodigoPI, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(edtCodLotePI, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(edtDescripcionPI, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 174, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLimpiar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMostrarTodo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14)
                    .addComponent(jLabel6)
                    .addComponent(edtCodLotePI, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(edtCodigoPI, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(edtDescripcionPI, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(btnMostrarTodo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelInventarioLayout = new javax.swing.GroupLayout(panelInventario);
        panelInventario.setLayout(panelInventarioLayout);
        panelInventarioLayout.setHorizontalGroup(
            panelInventarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInventarioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelInventarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1352, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelInventarioLayout.setVerticalGroup(
            panelInventarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelInventarioLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabPaneMain.addTab("Inventario", panelInventario);

        panelEntradas.setFocusable(false);

        btnNuevaEntrada.setText("Nueva entrada");
        btnNuevaEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevaEntradaActionPerformed(evt);
            }
        });

        tablaEntrada.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tablaEntrada.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Fecha", "Código", "Descripción", "Cant. de entrada", "Costo unit.", "Precio unit.", "Unid. of.", "Total de costo", "Total de ventas", "Total de ganancias"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaEntrada.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        tablaEntrada.setRowHeight(25);
        tablaEntrada.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaEntradaMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tablaEntrada);
        if (tablaEntrada.getColumnModel().getColumnCount() > 0) {
            tablaEntrada.getColumnModel().getColumn(0).setMinWidth(100);
            tablaEntrada.getColumnModel().getColumn(0).setPreferredWidth(120);
            tablaEntrada.getColumnModel().getColumn(0).setMaxWidth(120);
            tablaEntrada.getColumnModel().getColumn(1).setPreferredWidth(150);
            tablaEntrada.getColumnModel().getColumn(1).setMaxWidth(150);
            tablaEntrada.getColumnModel().getColumn(2).setPreferredWidth(350);
            tablaEntrada.getColumnModel().getColumn(3).setMinWidth(50);
            tablaEntrada.getColumnModel().getColumn(3).setPreferredWidth(80);
            tablaEntrada.getColumnModel().getColumn(3).setMaxWidth(80);
            tablaEntrada.getColumnModel().getColumn(4).setPreferredWidth(100);
            tablaEntrada.getColumnModel().getColumn(4).setMaxWidth(90);
            tablaEntrada.getColumnModel().getColumn(5).setPreferredWidth(100);
            tablaEntrada.getColumnModel().getColumn(5).setMaxWidth(90);
            tablaEntrada.getColumnModel().getColumn(6).setMinWidth(50);
            tablaEntrada.getColumnModel().getColumn(6).setPreferredWidth(80);
            tablaEntrada.getColumnModel().getColumn(6).setMaxWidth(80);
        }

        btnEntradaLote.setText("Entrada por Lote");
        btnEntradaLote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEntradaLoteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelEntradasLayout = new javax.swing.GroupLayout(panelEntradas);
        panelEntradas.setLayout(panelEntradasLayout);
        panelEntradasLayout.setHorizontalGroup(
            panelEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEntradasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelEntradasLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1352, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(panelEntradasLayout.createSequentialGroup()
                        .addComponent(btnNuevaEntrada)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEntradaLote)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        panelEntradasLayout.setVerticalGroup(
            panelEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEntradasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelEntradasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNuevaEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEntradaLote, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabPaneMain.addTab("Entrada", panelEntradas);

        panelSalidas.setFocusable(false);

        tablaSalida.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tablaSalida.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Nro", "Código", "Descripción", "Unid. ofert.", "Precio unit.", "Cant.", "Total", "Fecha"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaSalida.setRowHeight(25);
        tablaSalida.getTableHeader().setReorderingAllowed(false);
        tablaSalida.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaSalidaMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(tablaSalida);
        if (tablaSalida.getColumnModel().getColumnCount() > 0) {
            tablaSalida.getColumnModel().getColumn(0).setMinWidth(50);
            tablaSalida.getColumnModel().getColumn(0).setPreferredWidth(50);
            tablaSalida.getColumnModel().getColumn(1).setPreferredWidth(150);
            tablaSalida.getColumnModel().getColumn(2).setPreferredWidth(400);
            tablaSalida.getColumnModel().getColumn(3).setMinWidth(50);
            tablaSalida.getColumnModel().getColumn(3).setPreferredWidth(80);
            tablaSalida.getColumnModel().getColumn(3).setMaxWidth(80);
            tablaSalida.getColumnModel().getColumn(4).setPreferredWidth(80);
            tablaSalida.getColumnModel().getColumn(5).setMinWidth(50);
            tablaSalida.getColumnModel().getColumn(5).setPreferredWidth(60);
            tablaSalida.getColumnModel().getColumn(5).setMaxWidth(60);
        }

        tablaResumenSalida.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tablaResumenSalida.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Nro articulos vendidos", "Resumen de costos", "Resumen de ventas", "Resumen de ganancias"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaResumenSalida.setEnabled(false);
        tablaResumenSalida.setRowHeight(30);
        tablaResumenSalida.getTableHeader().setReorderingAllowed(false);
        jScrollPane8.setViewportView(tablaResumenSalida);
        if (tablaResumenSalida.getColumnModel().getColumnCount() > 0) {
            tablaResumenSalida.getColumnModel().getColumn(0).setPreferredWidth(40);
        }

        pFecDesPS.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        cmbMes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ENERO", "FEBRERO", "MARZO", "ABRIL", "MAYO", "JUNIO", "JULIO", "AGOSTO", "SEPTIEMBRE", "OCTUBRE", "NOVIEMBRE", "DICIEMBRE" }));

        btnBuscarSalidas.setText("Buscar");
        btnBuscarSalidas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarSalidasActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel7.setText("Descripción: ");

        edtDesPS.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        edtDesPS.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                edtDesPSFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                edtDesPSFocusLost(evt);
            }
        });
        edtDesPS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                edtDesPSKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                edtDesPSKeyTyped(evt);
            }
        });

        cmbDia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("DIA");

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel16.setText("AÑO");

        cmbAnio.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2019", "2020", "2021" }));
        cmbAnio.setToolTipText("");

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel13.setText("MES");

        btnMostrarTodoSalidas.setText("Mostrar todo");
        btnMostrarTodoSalidas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarTodoSalidasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pFecDesPSLayout = new javax.swing.GroupLayout(pFecDesPS);
        pFecDesPS.setLayout(pFecDesPSLayout);
        pFecDesPSLayout.setHorizontalGroup(
            pFecDesPSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pFecDesPSLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pFecDesPSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pFecDesPSLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbMes, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbAnio, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnBuscarSalidas, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 708, Short.MAX_VALUE)
                        .addComponent(btnMostrarTodoSalidas))
                    .addGroup(pFecDesPSLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(edtDesPS, javax.swing.GroupLayout.PREFERRED_SIZE, 758, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pFecDesPSLayout.setVerticalGroup(
            pFecDesPSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pFecDesPSLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pFecDesPSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbDia, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbMes, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnMostrarTodoSalidas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbAnio)
                    .addComponent(btnBuscarSalidas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pFecDesPSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(edtDesPS, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addContainerGap())
        );

        javax.swing.GroupLayout panelSalidasLayout = new javax.swing.GroupLayout(panelSalidas);
        panelSalidas.setLayout(panelSalidasLayout);
        panelSalidasLayout.setHorizontalGroup(
            panelSalidasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSalidasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSalidasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pFecDesPS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 1352, Short.MAX_VALUE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 1352, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelSalidasLayout.setVerticalGroup(
            panelSalidasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSalidasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pFecDesPS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabPaneMain.addTab("Salida", panelSalidas);

        panelInfoGeneral.setFocusable(false);

        tablaInfoGeneral.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tablaInfoGeneral.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Nro", "Cod. de lote", "Código", "Descripción", "Unid. ofert.", "Costo unit.", "Precio unit.", "Stock", "Tot. de costos", "Tot. de ventas", "Tot. de ganancias", "Tot. de entradas", "Tot. de salidas", "Estado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaInfoGeneral.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tablaInfoGeneral.setName("TABLA_INFO_GENERAL"); // NOI18N
        tablaInfoGeneral.setRowHeight(25);
        tablaInfoGeneral.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        tablaInfoGeneral.getTableHeader().setReorderingAllowed(false);
        tablaInfoGeneral.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaInfoGeneralMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tablaInfoGeneral);
        if (tablaInfoGeneral.getColumnModel().getColumnCount() > 0) {
            tablaInfoGeneral.getColumnModel().getColumn(0).setPreferredWidth(40);
            tablaInfoGeneral.getColumnModel().getColumn(1).setPreferredWidth(100);
            tablaInfoGeneral.getColumnModel().getColumn(2).setPreferredWidth(150);
            tablaInfoGeneral.getColumnModel().getColumn(3).setPreferredWidth(370);
            tablaInfoGeneral.getColumnModel().getColumn(4).setMinWidth(50);
            tablaInfoGeneral.getColumnModel().getColumn(4).setPreferredWidth(80);
            tablaInfoGeneral.getColumnModel().getColumn(5).setPreferredWidth(120);
            tablaInfoGeneral.getColumnModel().getColumn(6).setPreferredWidth(120);
            tablaInfoGeneral.getColumnModel().getColumn(8).setPreferredWidth(120);
            tablaInfoGeneral.getColumnModel().getColumn(9).setPreferredWidth(120);
            tablaInfoGeneral.getColumnModel().getColumn(10).setPreferredWidth(120);
            tablaInfoGeneral.getColumnModel().getColumn(11).setPreferredWidth(120);
            tablaInfoGeneral.getColumnModel().getColumn(12).setPreferredWidth(120);
            tablaInfoGeneral.getColumnModel().getColumn(13).setPreferredWidth(100);
        }

        tablaResumenInfoGeneral.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tablaResumenInfoGeneral.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Nro de artículos", "Resumen de costos", "Resumen de ventas", "Reumen de  ganancias"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaResumenInfoGeneral.setEnabled(false);
        tablaResumenInfoGeneral.setRowHeight(40);
        tablaResumenInfoGeneral.getTableHeader().setReorderingAllowed(false);
        jScrollPane6.setViewportView(tablaResumenInfoGeneral);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        btnMostrarTodoPIG.setText("Mostrar todo");
        btnMostrarTodoPIG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarTodoPIGActionPerformed(evt);
            }
        });

        btnEliminarPIG.setText("Eliminar");
        btnEliminarPIG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarPIGActionPerformed(evt);
            }
        });

        edtCodigoPIG.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        edtCodigoPIG.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                edtCodigoPIGFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                edtCodigoPIGFocusLost(evt);
            }
        });
        edtCodigoPIG.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                edtCodigoPIGKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                edtCodigoPIGKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                edtCodigoPIGKeyTyped(evt);
            }
        });

        btnNuevoInventario.setText("Nuevo inventario");
        btnNuevoInventario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoInventarioActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Código: ");

        btnModificarInventario1.setText("Modificar");
        btnModificarInventario1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarInventario1ActionPerformed(evt);
            }
        });

        edtCodigoLotePIG.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        edtCodigoLotePIG.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                edtCodigoLotePIGFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                edtCodigoLotePIGFocusLost(evt);
            }
        });
        edtCodigoLotePIG.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                edtCodigoLotePIGKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                edtCodigoLotePIGKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                edtCodigoLotePIGKeyTyped(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Código de Lote: ");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(edtCodigoPIG, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(btnMostrarTodoPIG)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 211, Short.MAX_VALUE)
                        .addComponent(btnNuevoInventario, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnModificarInventario1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(edtCodigoLotePIG, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEliminarPIG, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnMostrarTodoPIG, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnNuevoInventario, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnEliminarPIG, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnModificarInventario1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(edtCodigoPIG, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(edtCodigoLotePIG, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelInfoGeneralLayout = new javax.swing.GroupLayout(panelInfoGeneral);
        panelInfoGeneral.setLayout(panelInfoGeneralLayout);
        panelInfoGeneralLayout.setHorizontalGroup(
            panelInfoGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInfoGeneralLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelInfoGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 1352, Short.MAX_VALUE)
                    .addComponent(jScrollPane6)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelInfoGeneralLayout.setVerticalGroup(
            panelInfoGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInfoGeneralLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, 94, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
                .addGap(35, 35, 35))
        );

        tabPaneMain.addTab("Información detallada de Inventarios", panelInfoGeneral);

        panelStockWarning.setFocusable(false);

        tablaInfoFaltanteStock.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tablaInfoFaltanteStock.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Nro", "Código", "Descripción", "Stock", "Precio unit."
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaInfoFaltanteStock.setRowHeight(25);
        tablaInfoFaltanteStock.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablaInfoFaltanteStock.getTableHeader().setReorderingAllowed(false);
        tablaInfoFaltanteStock.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaInfoFaltanteStockMouseClicked(evt);
            }
        });
        jScrollPane9.setViewportView(tablaInfoFaltanteStock);
        if (tablaInfoFaltanteStock.getColumnModel().getColumnCount() > 0) {
            tablaInfoFaltanteStock.getColumnModel().getColumn(0).setMinWidth(30);
            tablaInfoFaltanteStock.getColumnModel().getColumn(0).setPreferredWidth(30);
            tablaInfoFaltanteStock.getColumnModel().getColumn(1).setPreferredWidth(200);
            tablaInfoFaltanteStock.getColumnModel().getColumn(2).setPreferredWidth(600);
        }

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Cant. mínima : ");

        edtCantMin.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        edtCantMin.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                edtCantMinFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                edtCantMinFocusLost(evt);
            }
        });
        edtCantMin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                edtCantMinKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                edtCantMinKeyTyped(evt);
            }
        });

        btnMostrarTodoPIFS.setText("Mostrar todo");
        btnMostrarTodoPIFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarTodoPIFSActionPerformed(evt);
            }
        });

        btnBuscarPIFS.setText("Buscar");
        btnBuscarPIFS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarPIFSActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelStockWarningLayout = new javax.swing.GroupLayout(panelStockWarning);
        panelStockWarning.setLayout(panelStockWarningLayout);
        panelStockWarningLayout.setHorizontalGroup(
            panelStockWarningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelStockWarningLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(edtCantMin, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnBuscarPIFS, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 855, Short.MAX_VALUE)
                .addComponent(btnMostrarTodoPIFS, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(panelStockWarningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(panelStockWarningLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 1352, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        panelStockWarningLayout.setVerticalGroup(
            panelStockWarningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelStockWarningLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelStockWarningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(edtCantMin, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(btnMostrarTodoPIFS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBuscarPIFS, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(571, Short.MAX_VALUE))
            .addGroup(panelStockWarningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelStockWarningLayout.createSequentialGroup()
                    .addGap(64, 64, 64)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        tabPaneMain.addTab("Información de Stock", panelStockWarning);

        pFecDesPS1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        cmbMesPF.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ENERO", "FEBRERO", "MARZO", "ABRIL", "MAYO", "JUNIO", "JULIO", "AGOSTO", "SEPTIEMBRE", "OCTUBRE", "NOVIEMBRE", "DICIEMBRE" }));

        btnBuscarSalPF.setText("Buscar");
        btnBuscarSalPF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarSalPFActionPerformed(evt);
            }
        });

        cmbDiaPF.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31" }));

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel17.setText("DIA");

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel18.setText("AÑO");

        cmbAnioPF.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2019", "2020", "2021" }));
        cmbAnioPF.setToolTipText("");

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel19.setText("MES");

        javax.swing.GroupLayout pFecDesPS1Layout = new javax.swing.GroupLayout(pFecDesPS1);
        pFecDesPS1.setLayout(pFecDesPS1Layout);
        pFecDesPS1Layout.setHorizontalGroup(
            pFecDesPS1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pFecDesPS1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmbDiaPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmbMesPF, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cmbAnioPF, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnBuscarSalPF, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(813, Short.MAX_VALUE))
        );
        pFecDesPS1Layout.setVerticalGroup(
            pFecDesPS1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pFecDesPS1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pFecDesPS1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbDiaPF, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbMesPF, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbAnioPF)
                    .addComponent(btnBuscarSalPF, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                .addContainerGap())
        );

        tablaFactura.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tablaFactura.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nro", "Factura", "Cliente", "Fecha"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaFactura.setRowHeight(25);
        tablaFactura.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaFacturaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaFactura);
        if (tablaFactura.getColumnModel().getColumnCount() > 0) {
            tablaFactura.getColumnModel().getColumn(0).setMinWidth(50);
            tablaFactura.getColumnModel().getColumn(0).setPreferredWidth(80);
            tablaFactura.getColumnModel().getColumn(0).setMaxWidth(80);
            tablaFactura.getColumnModel().getColumn(1).setPreferredWidth(300);
            tablaFactura.getColumnModel().getColumn(2).setPreferredWidth(300);
        }

        btnVerPF.setText("Ver");
        btnVerPF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerPFActionPerformed(evt);
            }
        });

        btnMostrarTodoSalidas1.setText("Mostrar todo");
        btnMostrarTodoSalidas1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarTodoSalidas1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnVerPF, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                            .addComponent(btnMostrarTodoSalidas1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(53, 53, 53))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(pFecDesPS1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(pFecDesPS1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 544, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnMostrarTodoSalidas1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnVerPF, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        tabPaneMain.addTab("Facturas", jPanel2);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        btnAbrirCampeon.setText("+");
        btnAbrirCampeon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirCampeonActionPerformed(evt);
            }
        });

        edtFiltroSanPabloPA.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        edtFiltroSanPabloPA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                edtFiltroSanPabloPAFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                edtFiltroSanPabloPAFocusLost(evt);
            }
        });
        edtFiltroSanPabloPA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                edtFiltroSanPabloPAKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                edtFiltroSanPabloPAKeyReleased(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("San Pablo: ");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setText("Campeón: ");

        edtFiltroCampeonPA.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        edtFiltroCampeonPA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                edtFiltroCampeonPAFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                edtFiltroCampeonPAFocusLost(evt);
            }
        });
        edtFiltroCampeonPA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                edtFiltroCampeonPAKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                edtFiltroCampeonPAKeyReleased(evt);
            }
        });

        btnAbrirSanPablo.setText("+");
        btnAbrirSanPablo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirSanPabloActionPerformed(evt);
            }
        });

        btnAbrirPapaNoel.setText("+");
        btnAbrirPapaNoel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirPapaNoelActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel9.setText("Papa Noel: ");

        edtFiltroPapaNoelPA.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        edtFiltroPapaNoelPA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                edtFiltroPapaNoelPAFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                edtFiltroPapaNoelPAFocusLost(evt);
            }
        });
        edtFiltroPapaNoelPA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                edtFiltroPapaNoelPAKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                edtFiltroPapaNoelPAKeyReleased(evt);
            }
        });

        btnLimpiarPA.setText("Limpiar");
        btnLimpiarPA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarPAActionPerformed(evt);
            }
        });

        btnVaciarPA.setText("Vaciar todo");
        btnVaciarPA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVaciarPAActionPerformed(evt);
            }
        });

        cbSanPablo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSanPabloActionPerformed(evt);
            }
        });

        cbCampeon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCampeonActionPerformed(evt);
            }
        });

        cbPapaNoel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbPapaNoelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jLabel5)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(edtFiltroSanPabloPA, javax.swing.GroupLayout.PREFERRED_SIZE, 750, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbSanPablo))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(edtFiltroCampeonPA, javax.swing.GroupLayout.PREFERRED_SIZE, 750, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbCampeon))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(edtFiltroPapaNoelPA, javax.swing.GroupLayout.PREFERRED_SIZE, 750, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbPapaNoel)))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(btnAbrirSanPablo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLimpiarPA, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 196, Short.MAX_VALUE)
                        .addComponent(btnVaciarPA, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAbrirPapaNoel)
                            .addComponent(btnAbrirCampeon))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAbrirSanPablo, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnLimpiarPA, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnVaciarPA, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(btnAbrirPapaNoel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnAbrirCampeon, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5)
                                .addComponent(edtFiltroSanPabloPA))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(cbSanPablo)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8)
                                    .addComponent(edtFiltroCampeonPA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addGap(11, 11, 11)
                                        .addComponent(jLabel9))
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cbPapaNoel)
                                            .addComponent(edtFiltroPapaNoelPA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addComponent(cbCampeon)))))
        );

        tablaListaArchivos.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tablaListaArchivos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Nro", "Código", "Descripción", "Lista 1", "Costo unit.", "Lista 3", "Sucursal"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaListaArchivos.setRowHeight(30);
        tablaListaArchivos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablaListaArchivos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaListaArchivosMouseClicked(evt);
            }
        });
        tablaListaArchivos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tablaListaArchivosKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(tablaListaArchivos);
        if (tablaListaArchivos.getColumnModel().getColumnCount() > 0) {
            tablaListaArchivos.getColumnModel().getColumn(0).setMinWidth(10);
            tablaListaArchivos.getColumnModel().getColumn(0).setPreferredWidth(50);
            tablaListaArchivos.getColumnModel().getColumn(0).setMaxWidth(50);
            tablaListaArchivos.getColumnModel().getColumn(1).setMinWidth(70);
            tablaListaArchivos.getColumnModel().getColumn(1).setPreferredWidth(70);
            tablaListaArchivos.getColumnModel().getColumn(2).setPreferredWidth(550);
            tablaListaArchivos.getColumnModel().getColumn(3).setMinWidth(70);
            tablaListaArchivos.getColumnModel().getColumn(3).setPreferredWidth(120);
            tablaListaArchivos.getColumnModel().getColumn(3).setMaxWidth(120);
        }

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel10.setText("Resultados : ");

        lbl_n_art.setBackground(new java.awt.Color(255, 51, 51));
        lbl_n_art.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        lbl_n_art.setText("tamanio_de_lista");
        lbl_n_art.setAlignmentX(0.5F);
        lbl_n_art.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lbl_n_art.setOpaque(true);

        btnBuscarCambiosPA.setText("Buscar cambios");
        btnBuscarCambiosPA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarCambiosPAActionPerformed(evt);
            }
        });

        edtCodigoBusqPA.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        edtCodigoBusqPA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                edtCodigoBusqPAFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                edtCodigoBusqPAFocusLost(evt);
            }
        });
        edtCodigoBusqPA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                edtCodigoBusqPAKeyPressed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel11.setText("Cod. de Busq. :");

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel12.setText("Código :");

        edtCodigoPLA.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        edtCodigoPLA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                edtCodigoPLAFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                edtCodigoPLAFocusLost(evt);
            }
        });
        edtCodigoPLA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                edtCodigoPLAKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                edtCodigoPLAKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbl_n_art, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(edtCodigoPLA, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(edtCodigoBusqPA, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(93, 93, 93)
                        .addComponent(btnBuscarCambiosPA, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel10)
                                .addComponent(lbl_n_art)
                                .addComponent(btnBuscarCambiosPA, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(edtCodigoBusqPA, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(edtCodigoPLA, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel11))
                        .addGap(9, 9, 9))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(18, 18, 18)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 434, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabPaneMain.addTab("Documentos", jPanel4);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabPaneMain)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(tabPaneMain))
        );

        mbMain.setFocusCycleRoot(true);

        mArchivo.setText("Archivo");
        mArchivo.setFocusable(false);
        mArchivo.setRequestFocusEnabled(false);
        mArchivo.setRolloverEnabled(false);
        mArchivo.setVerifyInputWhenFocusTarget(false);

        jmCerrar.setText("Cerrar");
        jmCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmCerrarActionPerformed(evt);
            }
        });
        mArchivo.add(jmCerrar);

        mbMain.add(mArchivo);

        mImpresion.setText("Imprimir");
        mImpresion.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        mImpresion.setDelay(0);
        mImpresion.setFocusCycleRoot(true);
        mImpresion.setNextFocusableComponent(btnFacturarion);
        mImpresion.setRequestFocusEnabled(false);
        mImpresion.setRolloverEnabled(false);
        mImpresion.setVerifyInputWhenFocusTarget(false);
        mImpresion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mImpresionMouseClicked(evt);
            }
        });

        jmGenCodigo.setText("Generar código");
        jmGenCodigo.setFocusable(true);
        jmGenCodigo.setNextFocusableComponent(btnFacturarion);
        jmGenCodigo.setVerifyInputWhenFocusTarget(false);
        jmGenCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmGenCodigoActionPerformed(evt);
            }
        });
        mImpresion.add(jmGenCodigo);

        jmGenNumeros.setText("Generar números");
        jmGenNumeros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmGenNumerosActionPerformed(evt);
            }
        });
        mImpresion.add(jmGenNumeros);

        mbMain.add(mImpresion);

        mLimpiar.setText("Limpiar");

        mItemLimpiarListaImp.setText("Limpiar lista de impresión");
        mItemLimpiarListaImp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mItemLimpiarListaImpActionPerformed(evt);
            }
        });
        mLimpiar.add(mItemLimpiarListaImp);

        mbMain.add(mLimpiar);

        setJMenuBar(mbMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleParent(this);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFacturarionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFacturarionActionPerformed
        // TODO add your handling code here:
        new FFacturarInventario(this, gestor).setVisible(true);
    }//GEN-LAST:event_btnFacturarionActionPerformed

    private void mItemModificarInvTIGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemModificarInvTIGActionPerformed
        // TODO add your handling code here:
        final int COL_CODIGO = 2;

        String codigo = Utiles.obtenerValor(tablaInfoGeneral, COL_CODIGO);

        if (codigo == null || codigo.isEmpty()) {
            Mensaje.mostrarMensajeSeleccion(rootPane);
        } else {
            FModificarInventario form = new FModificarInventario(this, gestor, codigo);

            form.setVisible(true);
        }

    }//GEN-LAST:event_mItemModificarInvTIGActionPerformed

    private void jmCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmCerrarActionPerformed
        // TODO add your handling code here:
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_jmCerrarActionPerformed

    private void jmGenCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmGenCodigoActionPerformed
        // TODO add your handling code here:
        this.requestFocusInWindow();
        FGenerarCodigo v = new FGenerarCodigo(this, gestor);

        v.setVisible(rootPaneCheckingEnabled);

    }//GEN-LAST:event_jmGenCodigoActionPerformed

    private void mItemCopiarTIGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemCopiarTIGActionPerformed
        // TODO add your handling code here:
        final int COL_CODIGO = 2;

        Utiles.copiarAPortapapeles(tablaInfoGeneral, COL_CODIGO);
    }//GEN-LAST:event_mItemCopiarTIGActionPerformed

    private void mItemCopiarTIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemCopiarTIActionPerformed
        // TODO add your handling code here:

        int COL_CODIGO = 1;

        Utiles.copiarAPortapapeles(tablaInventario, COL_CODIGO);
    }//GEN-LAST:event_mItemCopiarTIActionPerformed

    private void mItemCopiarTEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemCopiarTEActionPerformed
        // TODO add your handling code here:
        final int COL_CODIGO = 1;

        Utiles.copiarAPortapapeles(tablaEntrada, COL_CODIGO);
    }//GEN-LAST:event_mItemCopiarTEActionPerformed

    private void mItemCopiarTSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemCopiarTSActionPerformed
        // TODO add your handling code here:
        int ROW_CODIGO = 1;

        Utiles.copiarAPortapapeles(tablaSalida, ROW_CODIGO);
    }//GEN-LAST:event_mItemCopiarTSActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    private void mItemCopiarTIFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemCopiarTIFSActionPerformed
        // TODO add your handling code here:
        int COL_CODIGO = 1;

        Utiles.copiarAPortapapeles(tablaInfoFaltanteStock, COL_CODIGO);
    }//GEN-LAST:event_mItemCopiarTIFSActionPerformed

    private void mItemModificarInvTIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemModificarInvTIActionPerformed
        // TODO add your handling code here:
        try {
            iniciarProc49(tablaInventario, COL_CODIGO_TI);
        } catch (Exception e) {
        }
    }//GEN-LAST:event_mItemModificarInvTIActionPerformed

    private void jmGenNumerosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmGenNumerosActionPerformed
        // TODO add your handling code here:
        JFrame frame = new FGenerarNumeros(this, gestor);

        frame.setVisible(true);
    }//GEN-LAST:event_jmGenNumerosActionPerformed

    private void itemFijarTLAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemFijarTLAActionPerformed
        // TODO add your handling code here:
        try {
            iniciarProc19();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_itemFijarTLAActionPerformed

    private void itemNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemNuevoActionPerformed
        // TODO add your handling code here:
        try {
            iniciarProc22();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_itemNuevoActionPerformed

    private void mItemConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemConsultaActionPerformed
        // TODO add your handling code here:
        final int COL_CODIGO = 1;
        String codigo = Utiles.obtenerValor(tablaSalida, COL_CODIGO);

        try {
            iniciarProc24(codigo);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_mItemConsultaActionPerformed

    private void tablaListaArchivosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaListaArchivosMouseClicked
        // TODO add your handling code here:
        // Mostrar menú copiar botón derecho.
        if (evt.getButton() == MouseEvent.BUTTON3) {
            //Se presiono el boton derecho
            menuTA.show(evt.getComponent(),
                    evt.getX(), evt.getY()); //... mostramos el menu en la ubicacion del raton

        } else {
            menuTA.setVisible(false);
        }
    }//GEN-LAST:event_tablaListaArchivosMouseClicked

    private void btnVaciarPAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVaciarPAActionPerformed
        // TODO add your handling code here:
        resetearListas();
        limpiarPanelListaArchivos();
        edtFiltroCampeonPA.setEnabled(false);
        edtFiltroPapaNoelPA.setEnabled(false);
        edtFiltroSanPabloPA.setEnabled(false);
        cbCampeon.setEnabled(false);
        cbSanPablo.setEnabled(false);
        cbPapaNoel.setEnabled(false);
        btnAbrirSanPablo.setEnabled(true);
        btnAbrirCampeon.setEnabled(true);
        btnAbrirPapaNoel.setEnabled(true);
    }//GEN-LAST:event_btnVaciarPAActionPerformed

    private void btnLimpiarPAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarPAActionPerformed
        // TODO add your handling code here:
        edtFiltroCampeonPA.setText("");
        edtFiltroSanPabloPA.setText("");
        edtFiltroPapaNoelPA.setText("");
    }//GEN-LAST:event_btnLimpiarPAActionPerformed

    private void edtFiltroPapaNoelPAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtFiltroPapaNoelPAKeyReleased
        // TODO add your handling code here:
        int key = evt.getKeyCode();

        switch (key) {
            case com.sun.glass.events.KeyEvent.VK_ENTER: {
                // Hacer nada.
                break;
            }
            case com.sun.glass.events.KeyEvent.VK_UP: {
                break;
            }
            case com.sun.glass.events.KeyEvent.VK_DOWN: {
                break;
            }
            case com.sun.glass.events.KeyEvent.VK_F11: {
                break;
            }
            default: {
                try {
                    iniciarProc12();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_edtFiltroPapaNoelPAKeyReleased

    private void edtFiltroPapaNoelPAFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtFiltroPapaNoelPAFocusLost
        // TODO add your handling code here:
        Utiles.establecerFocusInactivo(edtFiltroPapaNoelPA);
    }//GEN-LAST:event_edtFiltroPapaNoelPAFocusLost

    private void edtFiltroPapaNoelPAFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtFiltroPapaNoelPAFocusGained
        // TODO add your handling code here:
        Utiles.establecerFocusActivoG(edtFiltroPapaNoelPA);
    }//GEN-LAST:event_edtFiltroPapaNoelPAFocusGained

    private void btnAbrirPapaNoelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirPapaNoelActionPerformed
        // TODO add your handling code here:
        try {
            iniciarProc16();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnAbrirPapaNoelActionPerformed

    private void btnAbrirSanPabloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirSanPabloActionPerformed
        // TODO add your handling code here:
        try {
            iniciarProc14();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnAbrirSanPabloActionPerformed

    private void edtFiltroCampeonPAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtFiltroCampeonPAKeyReleased
        // TODO add your handling code here:
        int key = evt.getKeyCode();

        switch (key) {
            case com.sun.glass.events.KeyEvent.VK_ENTER: {
                // Hacer nada.
                break;
            }
            case com.sun.glass.events.KeyEvent.VK_UP: {
                break;
            }
            case com.sun.glass.events.KeyEvent.VK_DOWN: {
                break;
            }
            case com.sun.glass.events.KeyEvent.VK_F11: {
                // Hacer nada.
                break;
            }
            default:
                try {
                    iniciarProc12();
                } catch (Exception e) {
                    e.printStackTrace();
                }
        }
    }//GEN-LAST:event_edtFiltroCampeonPAKeyReleased

    private void edtFiltroCampeonPAFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtFiltroCampeonPAFocusLost
        // TODO add your handling code here:
        Utiles.establecerFocusInactivo(edtFiltroCampeonPA);
    }//GEN-LAST:event_edtFiltroCampeonPAFocusLost

    private void edtFiltroCampeonPAFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtFiltroCampeonPAFocusGained
        // TODO add your handling code here:
        Utiles.establecerFocusActivoG(edtFiltroCampeonPA);
    }//GEN-LAST:event_edtFiltroCampeonPAFocusGained

    private void edtFiltroSanPabloPAKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtFiltroSanPabloPAKeyReleased
        // TODO add your handling code here:
        int key = evt.getKeyCode();

        switch (key) {
            case com.sun.glass.events.KeyEvent.VK_ENTER: {
                // Hacer nada.
                break;
            }
            case com.sun.glass.events.KeyEvent.VK_UP: {
                break;
            }
            case com.sun.glass.events.KeyEvent.VK_DOWN: {
                break;
            }
            case com.sun.glass.events.KeyEvent.VK_F12: {
                break;
            }
            default:
                try {
                    iniciarProc12();
                } catch (Exception e) {
                    e.printStackTrace();
                }
        }
    }//GEN-LAST:event_edtFiltroSanPabloPAKeyReleased

    private void edtFiltroSanPabloPAFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtFiltroSanPabloPAFocusLost
        // TODO add your handling code here:
        Utiles.establecerFocusInactivo(edtFiltroSanPabloPA);
    }//GEN-LAST:event_edtFiltroSanPabloPAFocusLost

    private void edtFiltroSanPabloPAFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtFiltroSanPabloPAFocusGained
        // TODO add your handling code here:
        Utiles.establecerFocusActivoG(edtFiltroSanPabloPA);
    }//GEN-LAST:event_edtFiltroSanPabloPAFocusGained

    private void btnAbrirCampeonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirCampeonActionPerformed
        // TODO add your handling code here:
        try {
            iniciarProc10();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnAbrirCampeonActionPerformed

    private void btnVerPFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerPFActionPerformed
        // TODO add your handling code here:
        Clave result = Clave.RESULT_OK;

        try {
            String codigo = Utiles.obtenerValor(tablaFactura, COL_CODIGO_PF);

            result = iniciarProc9(codigo);
        } catch (Exception e) {
            e.printStackTrace();
            result = Clave.RESULT_ERROR;
        }

        switch (result) {
            case RESULT_ERROR: {
                Mensaje.mostrarMensaje5(rootPane);
                break;
            }
            case RESULT_ERROR_BD: {
                Mensaje.mostrarMensaje3(rootPane);
                break;
            }
            case RESULT_ERROR_SELECCION: {
                Mensaje.mostrarMensajeSeleccion(rootPane);
                break;
            }
            case RESULT_NO_EXISTE: {
                Mensaje.mostrarMensaje20(rootPane);
                break;
            }
        }
    }//GEN-LAST:event_btnVerPFActionPerformed

    private void tablaFacturaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaFacturaMouseClicked
        // TODO add your handling code here:
        final int DOS_CLICK = 2;
        Clave result = Clave.RESULT_OK;

        if (evt.getClickCount() == DOS_CLICK) {
            final int COL_CODIGO = 1;

            String codigo = Utiles.obtenerValor(tablaFactura, evt.getPoint(), COL_CODIGO, COL_CODIGO);

            try {
                result = iniciarProc9(codigo);
            } catch (Exception e) {
                e.printStackTrace();
                result = Clave.RESULT_ERROR;
            }

            switch (result) {
                case RESULT_ERROR: {
                    Mensaje.mostrarMensaje5(rootPane);
                    break;
                }
                case RESULT_ERROR_BD: {
                    Mensaje.mostrarMensaje3(rootPane);
                    break;
                }
                case RESULT_NO_EXISTE: {
                    Mensaje.mostrarMensaje20(rootPane);
                    break;
                }
            }
        }
    }//GEN-LAST:event_tablaFacturaMouseClicked

    private void btnBuscarPIFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarPIFSActionPerformed
        // TODO add your handling code here:
        int cantMin;

        try {
            cantMin = new Integer(edtCantMin.getText().trim());
        } catch (Exception e) {
            cantMin = -1;
        }

        if (cantMin < 0) {
            Mensaje.mostrarMensaje8(rootPane);
        } else //Clave result;
        {
            Clave result = Clave.RESULT_OK;

            try {
                result = iniciarProc1(cantMin);
            } catch (Exception e) {
                e.printStackTrace();
                result = Clave.RESULT_ERROR;
            }

            switch (result) {
                case RESULT_OK: {
                    Utiles.posicionarPrincipio(tablaInfoFaltanteStock);
                    break;
                }
                case RESULT_ERROR: {
                    Mensaje.mostrarMensaje5(rootPane);
                    break;
                }
                case RESULT_ERROR_BD: {
                    Mensaje.mostrarMensaje3(rootPane);
                    break;
                }
            }
        }
    }//GEN-LAST:event_btnBuscarPIFSActionPerformed

    private void btnMostrarTodoPIFSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarTodoPIFSActionPerformed
        // TODO add your handling code here:
        limpiarTIFS();
        cargarTablaInfoFaltanteStock(tablaInfoFaltanteStock, listaInventarios);
        Utiles.seleccionarFila0(tablaInfoFaltanteStock);
        Utiles.posicionarPrincipio(tablaInfoFaltanteStock);
    }//GEN-LAST:event_btnMostrarTodoPIFSActionPerformed

    private void edtCantMinKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCantMinKeyTyped
        // TODO add your handling code here:
        Utiles.modoNumeros(evt);
        Utiles.suprimirComilla(evt);
        Utiles.suprimirComilla(edtCantMin);
    }//GEN-LAST:event_edtCantMinKeyTyped

    private void edtCantMinFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtCantMinFocusLost
        // TODO add your handling code here:
        Utiles.establecerFocusInactivo(edtCantMin);
    }//GEN-LAST:event_edtCantMinFocusLost

    private void edtCantMinFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtCantMinFocusGained
        // TODO add your handling code here:
        Utiles.establecerFocusActivoG(edtCantMin);
    }//GEN-LAST:event_edtCantMinFocusGained

    private void tablaInfoFaltanteStockMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaInfoFaltanteStockMouseClicked
        // TODO add your handling code here:
        //  Muestra el menu de Copiar
        if (evt.getButton() == MouseEvent.BUTTON3) {
            //Se presiono el boton derecho
            menuTIFS.show(evt.getComponent(),
                    evt.getX(), evt.getY()); //... mostramos el menu en la ubicacion del raton
        } else {
            this.menuTIFS.setVisible(false);
        }

        Utiles.establecerFocusActivoG(edtCantMin);
    }//GEN-LAST:event_tablaInfoFaltanteStockMouseClicked

    private void edtCodigoLotePIGKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCodigoLotePIGKeyTyped
        // TODO add your handling code here:
        Utiles.suprimirComilla(evt);
        Utiles.suprimirComilla(edtCodigoLotePIG);
    }//GEN-LAST:event_edtCodigoLotePIGKeyTyped

    private void edtCodigoLotePIGKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCodigoLotePIGKeyReleased
        // TODO add your handling code here:
        int key = evt.getKeyCode();

        switch (key) {
            case KeyEvent.VK_ENTER: {
                break;
            }
            case KeyEvent.VK_UP: {
                break;
            }
            case KeyEvent.VK_DOWN: {
                break;
            }
            default:
                try {
                    iniciarProc0();
                } catch (Exception e) {
                    e.printStackTrace();
                }
        }
    }//GEN-LAST:event_edtCodigoLotePIGKeyReleased

    private void edtCodigoLotePIGFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtCodigoLotePIGFocusLost
        // TODO add your handling code here:
        Utiles.establecerFocusInactivo(edtCodigoLotePIG);
    }//GEN-LAST:event_edtCodigoLotePIGFocusLost

    private void edtCodigoLotePIGFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtCodigoLotePIGFocusGained
        // TODO add your handling code here:
        Utiles.establecerFocusActivoG(edtCodigoLotePIG);
    }//GEN-LAST:event_edtCodigoLotePIGFocusGained

    private void btnMostrarTodoPIGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarTodoPIGActionPerformed
        // TODO add your handling code here:
        actualizarTRIG();
        actualizarTIG();
        Utiles.posicionarPrincipio(tablaInfoGeneral);
        Utiles.establecerFocusActivoG(edtCodigoPIG);
        Utiles.seleccionarFila0(tablaInfoGeneral);
    }//GEN-LAST:event_btnMostrarTodoPIGActionPerformed

    private void btnModificarInventario1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarInventario1ActionPerformed
        // TODO add your handling code here:
        new FModificarInventario(this, gestor).setVisible(true);
    }//GEN-LAST:event_btnModificarInventario1ActionPerformed

    private void edtCodigoPIGKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCodigoPIGKeyTyped
        // TODO add your handling code here:
        Utiles.suprimirComilla(evt);
        Utiles.suprimirComilla(edtCodigoPIG);
    }//GEN-LAST:event_edtCodigoPIGKeyTyped

    private void edtCodigoPIGKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCodigoPIGKeyReleased
        int key = evt.getKeyCode();

        switch (key) {
            case KeyEvent.VK_ENTER: {
                break;
            }
            case KeyEvent.VK_UP: {
                break;
            }
            case KeyEvent.VK_DOWN: {
                break;
            }
            case KeyEvent.VK_CONTROL: {
                break;
            }
            case KeyEvent.VK_SHIFT: {
                break;
            }
            default:
                try {
                    iniciarProc3();
                } catch (Exception e) {
                    e.printStackTrace();
                }
        }
    }//GEN-LAST:event_edtCodigoPIGKeyReleased

    private void edtCodigoPIGFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtCodigoPIGFocusLost
        // TODO add your handling code here:
        Utiles.establecerFocusInactivo(edtCodigoPIG);
    }//GEN-LAST:event_edtCodigoPIGFocusLost

    private void edtCodigoPIGFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtCodigoPIGFocusGained
        // TODO add your handling code here:
        Utiles.establecerFocusActivoG(edtCodigoPIG);
    }//GEN-LAST:event_edtCodigoPIGFocusGained

    private void btnEliminarPIGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarPIGActionPerformed
        // TODO add your handling code here:

        Clave result = Clave.RESULT_SIN_DEFINIR;
        String codigo = Utiles.obtenerValor(tablaInfoGeneral, COL_CODIGO_TIG);

        if (codigo.isEmpty()) {
            result = Clave.RESULT_CAMPO_BLANCO;
        } else {
            try {
                int respuesta = JOptionPane.showConfirmDialog(this, "¿Desea eliminar el siguiente registro : " + codigo + " ?", "Eliminar", JOptionPane.YES_NO_OPTION);

                if (respuesta == JOptionPane.YES_OPTION) {
                    result = iniciarProc2(codigo);

                    if (result == Clave.RESULT_OK) {
                        actualizar();
                    }
                }

            } catch (ExceptionBD e0) {
                e0.printStackTrace();
                result = Clave.RESULT_ERROR_BD;
            } catch (ExceptionProgram e1) {
                e1.printStackTrace();
                result = Clave.RESULT_ERROR_PROGRAMA;
            }
        }

        switch (result) {
            case RESULT_CAMPO_BLANCO: {
                Mensaje.mostrarMensajeSeleccion(rootPane);
                break;
            }
            case RESULT_ERROR_PROGRAMA: {
                Mensaje.mostrarMensaje5(rootPane);
                break;
            }
            case RESULT_ERROR_BD: {
                Mensaje.mostrarMensaje3(rootPane);
                break;
            }
            case RESULT_NO_EXISTE: {
                Mensaje.mostrarMensajeSeleccion(rootPane);
                break;
            }
        }
    }//GEN-LAST:event_btnEliminarPIGActionPerformed

    private void btnNuevoInventarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoInventarioActionPerformed
        // TODO add your handling code here:
        new FAltaInventario(this, gestor).setVisible(true);
    }//GEN-LAST:event_btnNuevoInventarioActionPerformed

    private void tablaInfoGeneralMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaInfoGeneralMouseClicked
        // TODO add your handling code here:
        if (evt.getButton() == MouseEvent.BUTTON3) {
            //Se presiono el boton derecho
            menuTIG.show(evt.getComponent(),
                    evt.getX(), evt.getY()); //... mostramos el menu en la ubicacion del raton

        } else {
            menuTIG.setVisible(false);
        }
        Utiles.establecerFocusActivoG(edtCodigoPIG);
    }//GEN-LAST:event_tablaInfoGeneralMouseClicked

    private void edtDesPSKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtDesPSKeyTyped
        // TODO add your handling code here:
        Utiles.suprimirComilla(evt);
        Utiles.suprimirComilla(edtDesPS);
    }//GEN-LAST:event_edtDesPSKeyTyped

    private void edtDesPSKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtDesPSKeyReleased
        // TODO add your handling code here:
        try {
            iniciarProc25();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_edtDesPSKeyReleased

    private void edtDesPSFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtDesPSFocusLost
        // TODO add your handling code here:
        Utiles.establecerFocusInactivo(edtCodLotePI);
    }//GEN-LAST:event_edtDesPSFocusLost

    private void edtDesPSFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtDesPSFocusGained
        // TODO add your handling code here:
        Utiles.establecerFocusActivoG(edtDesPS);
    }//GEN-LAST:event_edtDesPSFocusGained

    private void btnMostrarTodoSalidasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarTodoSalidasActionPerformed
        // TODO add your handling code here:
        limpiarTRS();
        limpiarTS();
        cargarTablaResumenSalida(tablaResumenSalida, null);
        cargarTablaSalida(tablaSalida, listaSalidas);

        if (listaSalidas.isEmpty()) {
            // Hacer nada.
            Mensaje.mostrarMensaje16(rootPane);
        } else {
            Utiles.seleccionarFila0(tablaSalida);
        }
        Utiles.posicionarPrincipio(tablaSalida);

    }//GEN-LAST:event_btnMostrarTodoSalidasActionPerformed

    private void btnBuscarSalidasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarSalidasActionPerformed
        // TODO add your handling code here:
        Clave result = Clave.RESULT_OK;

        try {
            result = iniciarProc8();
        } catch (Exception e) {
            e.printStackTrace();
            result = Clave.RESULT_ERROR;
        }

        switch (result) {
            case RESULT_OK: {
                Utiles.posicionarPrincipio(tablaSalida);
                Utiles.seleccionarFila0(tablaSalida);
                break;
            }
            case RESULT_LISTA_VACIA: {
                Utiles.posicionarPrincipio(tablaSalida);
                break;
            }
            case RESULT_ERROR_BD: {
                Mensaje.mostrarMensaje3(rootPane);
                break;
            }
            case RESULT_ERROR: {
                Mensaje.mostrarMensaje5(rootPane);
                break;
            }
        }
    }//GEN-LAST:event_btnBuscarSalidasActionPerformed

    private void tablaSalidaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaSalidaMouseClicked
        // TODO add your handling code here:
        if (evt.getButton() == MouseEvent.BUTTON3) {
            //Se presiono el boton derecho
            menuTS.show(evt.getComponent(),
                    evt.getX(), evt.getY()); //... mostramos el menu en la ubicacion del raton
        } else {
            this.menuTS.setVisible(false);
        }
    }//GEN-LAST:event_tablaSalidaMouseClicked

    private void btnEntradaLoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEntradaLoteActionPerformed
        // TODO add your handling code here:
        new FEntradaPorLote(this, gestor).setVisible(true);
    }//GEN-LAST:event_btnEntradaLoteActionPerformed

    private void tablaEntradaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaEntradaMouseClicked
        // TODO add your handling code here:
        if (evt.getButton() == MouseEvent.BUTTON3) {
            //Se presiono el boton derecho
            menuTE.show(evt.getComponent(),
                    evt.getX(), evt.getY()); //... mostramos el menu en la ubicacion del raton
        } else {
            this.menuTE.setVisible(false);
        }
    }//GEN-LAST:event_tablaEntradaMouseClicked

    private void btnNuevaEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevaEntradaActionPerformed
        // TODO add your handling code here:
        new FEntrada(this, gestor).setVisible(true);
    }//GEN-LAST:event_btnNuevaEntradaActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
        this.edtCodigoPI.setText("");
        this.edtDescripcionPI.setText("");
        this.edtCodLotePI.setText("");

        Utiles.establecerFocusActivoG(edtCodigoPI);
        Utiles.posicionarPrincipio(tablaInventario);
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnMostrarTodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarTodoActionPerformed
        // TODO add your handling code here:
        actualizarPI();
        Utiles.seleccionarFila0(tablaInventario);
        Utiles.establecerFocusActivoG(edtCodigoPI);
        Utiles.posicionarPrincipio(tablaInventario);
    }//GEN-LAST:event_btnMostrarTodoActionPerformed

    private void edtCodLotePIKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCodLotePIKeyTyped
        // TODO add your handling code here:
        Utiles.suprimirComilla(evt);
        Utiles.suprimirComilla(edtCodLotePI);
    }//GEN-LAST:event_edtCodLotePIKeyTyped

    private void edtCodLotePIKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCodLotePIKeyReleased
        int key = evt.getKeyCode();

        switch (key) {
            case KeyEvent.VK_ENTER: {
                break;
            }
            case KeyEvent.VK_UP: {
                break;
            }
            case KeyEvent.VK_DOWN: {
                break;
            }
            default:
                try {
                    iniciarProc4();
                } catch (Exception e) {
                    e.printStackTrace();
                }
        }
    }//GEN-LAST:event_edtCodLotePIKeyReleased

    private void edtCodLotePIFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtCodLotePIFocusLost
        // TODO add your handling code here:
        Utiles.establecerFocusInactivoM2(edtCodLotePI);
    }//GEN-LAST:event_edtCodLotePIFocusLost

    private void edtCodLotePIFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtCodLotePIFocusGained
        // TODO add your handling code here:
        Utiles.establecerFocusActivoGM2(edtCodLotePI);
    }//GEN-LAST:event_edtCodLotePIFocusGained

    private void edtCodigoPIKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCodigoPIKeyTyped
        // TODO add your handling code here:
        Utiles.suprimirComilla(evt);
        Utiles.suprimirComilla(edtCodigoPI);
    }//GEN-LAST:event_edtCodigoPIKeyTyped

    private void edtCodigoPIKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCodigoPIKeyReleased
        // TODO add your handling code here:
        int key = evt.getKeyCode();

        switch (key) {
            case KeyEvent.VK_ENTER: {
                break;
            }
            case KeyEvent.VK_UP: {
                break;
            }
            case KeyEvent.VK_DOWN: {
                break;
            }
            case KeyEvent.VK_CONTROL: {
                break;
            }
            case KeyEvent.VK_SHIFT: {
                break;
            }
            default:
                try {
                    iniciarProc5();
                } catch (Exception e) {
                    e.printStackTrace();
                }
        }
    }//GEN-LAST:event_edtCodigoPIKeyReleased

    private void edtCodigoPIFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtCodigoPIFocusLost
        // TODO add your handling code here:
        Utiles.establecerFocusInactivoM2(edtCodigoPI);
    }//GEN-LAST:event_edtCodigoPIFocusLost

    private void edtCodigoPIFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtCodigoPIFocusGained
        // TODO add your handling code here:
        Utiles.establecerFocusActivoGM2(edtCodigoPI);
    }//GEN-LAST:event_edtCodigoPIFocusGained

    private void edtDescripcionPIKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtDescripcionPIKeyTyped
        // TODO add your handling code here:
        Utiles.suprimirComilla(evt);
        Utiles.suprimirComilla(edtDescripcionPI);
    }//GEN-LAST:event_edtDescripcionPIKeyTyped

    private void edtDescripcionPIKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtDescripcionPIKeyReleased
        // TODO add your handling code here:
        int key = evt.getKeyCode();

        switch (key) {
            case KeyEvent.VK_ENTER: {
                break;
            }
            case KeyEvent.VK_UP: {
                break;
            }
            case KeyEvent.VK_DOWN: {
                break;
            }
            default:
                try {
                    iniciarProc6();
                } catch (Exception e) {
                    e.printStackTrace();
                }
        }
    }//GEN-LAST:event_edtDescripcionPIKeyReleased

    private void edtDescripcionPIFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtDescripcionPIFocusLost
        // TODO add your handling code here:
        Utiles.establecerFocusInactivoM2(this.edtDescripcionPI);
    }//GEN-LAST:event_edtDescripcionPIFocusLost

    private void edtDescripcionPIFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtDescripcionPIFocusGained
        // TODO add your handling code here:
        Utiles.establecerFocusActivoGM2(this.edtDescripcionPI);
    }//GEN-LAST:event_edtDescripcionPIFocusGained

    private void tablaInventarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaInventarioMouseClicked
        // TODO add your handling code here:
        final int DOS_CLICK = 2;

        if (evt.getClickCount() == DOS_CLICK) {

            switch (Utiles.obtenerColumnaSeleccionada(tablaInventario, evt.getPoint())) {
                case COL_IMAGEN_TI: {
                    String codigo = Utiles.obtenerValor(tablaInventario, COL_CODIGO_TI);

                    try {
                        iniciarProc7(codigo);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    break;
                }
                case COL_CODIGO_TI: {
                    try {
                        iniciarProc37();
                    } catch (Exception e) {
                    }
                    break;
                }
            }
        }

        // Mostrar menú copiar botón derecho.
        if (evt.getButton() == MouseEvent.BUTTON3) {
            //Se presiono el boton derecho
            menuTI.show(evt.getComponent(),
                    evt.getX(), evt.getY()); //... mostramos el menu en la ubicacion del raton

        } else {
            menuTI.setVisible(false);
        }

        Utiles.establecerFocusActivoG(edtCodigoPI);
    }//GEN-LAST:event_tablaInventarioMouseClicked

    private void btnBuscarCambiosPAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarCambiosPAActionPerformed
        // TODO add your handling code here:
        try {
            iniciarProc26P1();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnBuscarCambiosPAActionPerformed

    private void itemModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemModificarActionPerformed
        // TODO add your handling code here:
        Clave estado = Clave.RESULT_OK;

        try {
            estado = iniciarProc27();
        } catch (Exception e) {
            e.printStackTrace();
            estado = Clave.RESULT_ERROR;
        }
        switch (estado) {
            case RESULT_ERROR: {
                Mensaje.mostrarMensaje5(rootPane);
                break;
            }
            case RESULT_ERROR_BD: {
                Mensaje.mostrarMensaje3(rootPane);
                break;
            }
        }
    }//GEN-LAST:event_itemModificarActionPerformed

    private void itemFijarTIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemFijarTIActionPerformed
        // TODO add your handling code here:
        final int COL_DESC = 2;

        String desc = Utiles.obtenerValor(tablaInventario, COL_DESC);

        if (desc.isEmpty()) {
            // Hacer nada.
        } else {
            edtDescripcionPI.setText(desc);
            iniciarProc6();
        }
    }//GEN-LAST:event_itemFijarTIActionPerformed

    private void edtCodigoPIKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCodigoPIKeyPressed
        // TODO add your handling code here:
        int key = evt.getKeyCode();

        switch (key) {
            case com.sun.glass.events.KeyEvent.VK_UP: {
                Utiles.anterior(tablaInventario);
                break;
            }
            case com.sun.glass.events.KeyEvent.VK_DOWN: {
                Utiles.siguiente(tablaInventario);
                break;
            }
            default:
                Utiles.seleccionarYBorrar(evt, edtCodigoPI);
        }
    }//GEN-LAST:event_edtCodigoPIKeyPressed

    private void edtDescripcionPIKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtDescripcionPIKeyPressed
        // TODO add your handling code here:
        int key = evt.getKeyCode();

        switch (key) {
            case com.sun.glass.events.KeyEvent.VK_ENTER: {
                // Hacer nada.
                break;
            }
            case com.sun.glass.events.KeyEvent.VK_UP: {
                Utiles.anterior(tablaInventario);
                break;
            }
            case com.sun.glass.events.KeyEvent.VK_DOWN: {
                Utiles.siguiente(tablaInventario);
                break;
            }
            default:
                Utiles.seleccionarYBorrar(evt, edtDescripcionPI);
        }
    }//GEN-LAST:event_edtDescripcionPIKeyPressed

    private void edtCodLotePIKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCodLotePIKeyPressed
        // TODO add your handling code here:
        int key = evt.getKeyCode();

        switch (key) {
            case com.sun.glass.events.KeyEvent.VK_UP: {
                Utiles.anterior(tablaInventario);
                break;
            }
            case com.sun.glass.events.KeyEvent.VK_DOWN: {
                Utiles.siguiente(tablaInventario);
                break;
            }
            default:
                Utiles.seleccionarYBorrar(evt, edtCodLotePI);
        }
    }//GEN-LAST:event_edtCodLotePIKeyPressed

    private void mItemConsulta1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemConsulta1ActionPerformed
        // TODO add your handling code here:
        Clave estado = Clave.RESULT_OK;

        try {
            estado = iniciarProc32();
        } catch (Exception e) {
            e.printStackTrace();
            estado = Clave.RESULT_ERROR;
        }
        switch (estado) {
            case RESULT_ERROR: {
                Mensaje.mostrarMensaje5(rootPane);
                break;
            }
            case RESULT_ERROR_BD: {
                Mensaje.mostrarMensaje3(rootPane);
                break;
            }
        }
    }//GEN-LAST:event_mItemConsulta1ActionPerformed

    private void mItemCopiarCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemCopiarCodigoActionPerformed
        // TODO add your handling code here

        Utiles.copiarAPortapapeles(tablaListaArchivos, COL_CODIGO_TLA);
    }//GEN-LAST:event_mItemCopiarCodigoActionPerformed

    private void tablaListaArchivosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tablaListaArchivosKeyPressed
        // TODO add your handling code here:
        try {
            if (evt.getKeyCode() == KeyEvent.VK_F11) {
                itemNuevoActionPerformed(null);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_tablaListaArchivosKeyPressed

    private void edtFiltroCampeonPAKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtFiltroCampeonPAKeyPressed
        // TODO add your handling code here:
        int key = evt.getKeyCode();

        switch (key) {
            case com.sun.glass.events.KeyEvent.VK_F11: {
                try {
                    if (evt.getKeyCode() == KeyEvent.VK_F11) {
                        itemNuevoActionPerformed(null);
                    }
                } catch (Exception e) {
                }
                break;
            }
            case com.sun.glass.events.KeyEvent.VK_UP: {
                Utiles.anterior(tablaListaArchivos);
                break;
            }
            case com.sun.glass.events.KeyEvent.VK_DOWN: {
                Utiles.siguiente(tablaListaArchivos);
                break;
            }
            default:
        }
    }//GEN-LAST:event_edtFiltroCampeonPAKeyPressed

    private void edtFiltroSanPabloPAKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtFiltroSanPabloPAKeyPressed
        // TODO add your handling code here:
        int key = evt.getKeyCode();

        switch (key) {
            case com.sun.glass.events.KeyEvent.VK_F12: {
                itemNuevoActionPerformed(null);
                break;
            }
            case com.sun.glass.events.KeyEvent.VK_UP: {
                Utiles.anterior(tablaListaArchivos);
                break;
            }
            case com.sun.glass.events.KeyEvent.VK_DOWN: {
                Utiles.siguiente(tablaListaArchivos);
                break;
            }
            default:
        }
    }//GEN-LAST:event_edtFiltroSanPabloPAKeyPressed

    private void edtFiltroPapaNoelPAKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtFiltroPapaNoelPAKeyPressed
        // TODO add your handling code here:
        int key = evt.getKeyCode();

        switch (key) {
            case com.sun.glass.events.KeyEvent.VK_F11: {
                try {
                    if (evt.getKeyCode() == KeyEvent.VK_F11) {
                        itemNuevoActionPerformed(null);
                    }
                } catch (Exception e) {
                }
                break;
            }
            case com.sun.glass.events.KeyEvent.VK_UP: {
                Utiles.anterior(tablaListaArchivos);
                break;
            }
            case com.sun.glass.events.KeyEvent.VK_DOWN: {
                Utiles.siguiente(tablaListaArchivos);
                break;
            }
            default:
        }
    }//GEN-LAST:event_edtFiltroPapaNoelPAKeyPressed

    private void edtCodigoPIGKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCodigoPIGKeyPressed
        // TODO add your handling code here:  
        int key = evt.getKeyCode();

        switch (key) {
            case com.sun.glass.events.KeyEvent.VK_UP: {
                Utiles.anterior(tablaInfoGeneral);
                break;
            }
            case com.sun.glass.events.KeyEvent.VK_DOWN: {
                Utiles.siguiente(tablaInfoGeneral);
                break;
            }
            case KeyEvent.VK_F12: {
                FAltaInventarioLote form = new FAltaInventarioLote(this, gestor);

                form.setVisible(true);
                break;
            }
            default:
                Utiles.seleccionarYBorrar(evt, edtCodigoPIG);
        }
    }//GEN-LAST:event_edtCodigoPIGKeyPressed

    private void edtCodigoLotePIGKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCodigoLotePIGKeyPressed
        // TODO add your handling code here:
        int key = evt.getKeyCode();

        switch (key) {
            case com.sun.glass.events.KeyEvent.VK_UP: {
                Utiles.anterior(tablaInfoGeneral);
                break;
            }
            case com.sun.glass.events.KeyEvent.VK_DOWN: {
                Utiles.siguiente(tablaInfoGeneral);
                break;
            }
            default:
                Utiles.seleccionarYBorrar(evt, edtCodigoLotePIG);
        }
    }//GEN-LAST:event_edtCodigoLotePIGKeyPressed

    private void edtCantMinKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCantMinKeyPressed
        // TODO add your handling code here:
        int key = evt.getKeyCode();

        switch (key) {
            case com.sun.glass.events.KeyEvent.VK_UP: {
                Utiles.anterior(tablaInfoFaltanteStock);
                break;
            }
            case com.sun.glass.events.KeyEvent.VK_DOWN: {
                Utiles.siguiente(tablaInfoFaltanteStock);
                break;
            }
            default:
                Utiles.seleccionarYBorrar(evt, edtCantMin);
        }
    }//GEN-LAST:event_edtCantMinKeyPressed

    private void cbSanPabloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSanPabloActionPerformed
        // TODO add your handling code here:
        try {
            iniciarProc12();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_cbSanPabloActionPerformed

    private void cbCampeonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCampeonActionPerformed
        // TODO add your handling code here:
        try {
            iniciarProc12();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_cbCampeonActionPerformed

    private void cbPapaNoelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbPapaNoelActionPerformed
        // TODO add your handling code here:
        try {
            iniciarProc12();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_cbPapaNoelActionPerformed

    private void mItemConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemConsultarActionPerformed
        // TODO add your handling code here:
        try {
            iniciarProc37();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_mItemConsultarActionPerformed

    private void mItemConsultarTIGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemConsultarTIGActionPerformed
        // TODO add your handling code here:
        try {
            iniciarProc39();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_mItemConsultarTIGActionPerformed

    private void edtCodigoBusqPAKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCodigoBusqPAKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try {
                iniciarProc38(Utiles.obtenerValor(edtCodigoBusqPA), "", "");
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        Utiles.seleccionarYBorrar(evt, edtCodigoBusqPA);
    }//GEN-LAST:event_edtCodigoBusqPAKeyPressed

    private void edtCodigoBusqPAFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtCodigoBusqPAFocusGained
        // TODO add your handling code here:
        Utiles.establecerFocusActivoG(edtCodigoBusqPA);
    }//GEN-LAST:event_edtCodigoBusqPAFocusGained

    private void edtCodigoBusqPAFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtCodigoBusqPAFocusLost
        // TODO add your handling code here:
        Utiles.establecerFocusInactivo(edtCodigoBusqPA);
    }//GEN-LAST:event_edtCodigoBusqPAFocusLost

    private void panelInventarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelInventarioMouseClicked
        // TODO add your handling code here:
        Utiles.establecerFocusActivoGM2(edtCodigoPI);
    }//GEN-LAST:event_panelInventarioMouseClicked

    private void tabPaneMainMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabPaneMainMouseClicked
        // TODO add your handling code here:
        try {
            iniciarProc40();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_tabPaneMainMouseClicked

    private void mImpresionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mImpresionMouseClicked
        // TODO add your handling code here:
        btnMostrarTodo.requestFocus();
    }//GEN-LAST:event_mImpresionMouseClicked

    private void mItemAgregarImpTIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemAgregarImpTIActionPerformed
        // TODO add your handling code here:
        try {
            this.iniciarProc23(Utiles.obtenerValor(tablaInventario, COL_CODIGO_TI));
        } catch (Exception e) {
        }
    }//GEN-LAST:event_mItemAgregarImpTIActionPerformed

    private void mItemAgImpTIGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemAgImpTIGActionPerformed
        // TODO add your handling code here:
        try {
            this.iniciarProc23(Utiles.obtenerValor(tablaInfoGeneral, COL_CODIGO_TIG));
        } catch (Exception e) {
        }
    }//GEN-LAST:event_mItemAgImpTIGActionPerformed

    private void btnBuscarSalPFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarSalPFActionPerformed
        // TODO add your handling code here:
        try {
            iniciarProc42();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnBuscarSalPFActionPerformed

    private void btnMostrarTodoSalidas1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarTodoSalidas1ActionPerformed
        // TODO add your handling code here:
        actualizarTF();
    }//GEN-LAST:event_btnMostrarTodoSalidas1ActionPerformed

    private void mItemBuscarSinCodBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemBuscarSinCodBActionPerformed
        // TODO add your handling code here:    
        Clave result = Clave.RESULT_SIN_DEFINIR;

        try {
            result = iniciarProc43();
        } catch (ExceptionBD e0) {
            result = Clave.RESULT_ERROR_BD;
        } catch (Exception e1) {
            result = Clave.RESULT_ERROR_PROGRAMA;
        }

        switch (result) {
            case RESULT_ERROR_BD: {
                Mensaje.mostrarMensaje3(rootPane);
                break;
            }
            case RESULT_ERROR_PROGRAMA: {
                Mensaje.mostrarMensaje5(rootPane);
                break;
            }
            case RESULT_LISTA_VACIA: {
                Mensaje.mostrarMensajeNoEncontrado(rootPane);
                break;
            }
            case RESULT_OK: {
                break;
            }
        }
    }//GEN-LAST:event_mItemBuscarSinCodBActionPerformed

    private void mItemLimpiarListaImpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemLimpiarListaImpActionPerformed
        // TODO add your handling code here:
        this.limpiarListaImpresion();
    }//GEN-LAST:event_mItemLimpiarListaImpActionPerformed

    private void mItemBuscarDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemBuscarDocActionPerformed
        // TODO add your handling code here:
        try {
            iniciarProc47();
        } catch (Exception e) {
        }
    }//GEN-LAST:event_mItemBuscarDocActionPerformed

    private void mItemEliminarTIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemEliminarTIActionPerformed
        // TODO add your handling code here:
        String codigo = Utiles.obtenerValor(tablaInventario, COL_CODIGO_TI);

        if (codigo.isEmpty()) {
            // Hacer nada.
        } else {
            try {
                int respuesta = JOptionPane.showConfirmDialog(this, "¿Desea eliminar el siguiente registro : " + codigo + " ?", "Eliminar", JOptionPane.YES_NO_OPTION);

                if (respuesta == JOptionPane.YES_OPTION) {
                    iniciarProc2(codigo);
                    actualizar();
                }
            } catch (ExceptionBD e0) {
                e0.printStackTrace();
            } catch (ExceptionProgram e1) {
                e1.printStackTrace();
            }
        }
    }//GEN-LAST:event_mItemEliminarTIActionPerformed

    private void edtCodigoPLAFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtCodigoPLAFocusGained
        // TODO add your handling code here:
        Utiles.establecerFocusActivoG(edtCodigoPLA);
    }//GEN-LAST:event_edtCodigoPLAFocusGained

    private void edtCodigoPLAFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edtCodigoPLAFocusLost
        // TODO add your handling code here:
        Utiles.establecerFocusInactivo(edtCodigoPLA);
    }//GEN-LAST:event_edtCodigoPLAFocusLost

    private void edtCodigoPLAKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCodigoPLAKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try {
                iniciarProc48();
            } catch (Exception e) {
            }
        }
        Utiles.seleccionarYBorrar(evt, edtCodigoPLA);
    }//GEN-LAST:event_edtCodigoPLAKeyPressed

    private void edtCodigoPLAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_edtCodigoPLAKeyTyped
        // TODO add your handling code here:
        Utiles.suprimirComilla(evt);
        Utiles.suprimirComilla(edtCodigoPLA);
    }//GEN-LAST:event_edtCodigoPLAKeyTyped

    private void mItemModInvTEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mItemModInvTEActionPerformed
        // TODO add your handling code here:
        try {
            iniciarProc49(tablaEntrada, COL_CODIGO_TE);
        } catch (Exception e) {
        }
    }//GEN-LAST:event_mItemModInvTEActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbrirCampeon;
    private javax.swing.JButton btnAbrirPapaNoel;
    private javax.swing.JButton btnAbrirSanPablo;
    private javax.swing.JButton btnBuscarCambiosPA;
    private javax.swing.JButton btnBuscarPIFS;
    private javax.swing.JButton btnBuscarSalPF;
    private javax.swing.JButton btnBuscarSalidas;
    private javax.swing.JButton btnEliminarPIG;
    private javax.swing.JButton btnEntradaLote;
    private javax.swing.JButton btnFacturarion;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnLimpiarPA;
    private javax.swing.JButton btnModificarInventario1;
    private javax.swing.JButton btnMostrarTodo;
    private javax.swing.JButton btnMostrarTodoPIFS;
    private javax.swing.JButton btnMostrarTodoPIG;
    private javax.swing.JButton btnMostrarTodoSalidas;
    private javax.swing.JButton btnMostrarTodoSalidas1;
    private javax.swing.JButton btnNuevaEntrada;
    private javax.swing.JButton btnNuevoInventario;
    private javax.swing.JButton btnVaciarPA;
    private javax.swing.JButton btnVerPF;
    private javax.swing.JCheckBox cbCampeon;
    private javax.swing.JCheckBox cbPapaNoel;
    private javax.swing.JCheckBox cbSanPablo;
    private javax.swing.JComboBox<String> cmbAnio;
    private javax.swing.JComboBox<String> cmbAnioPF;
    private javax.swing.JComboBox<String> cmbDia;
    private javax.swing.JComboBox<String> cmbDiaPF;
    private javax.swing.JComboBox<String> cmbMes;
    private javax.swing.JComboBox<String> cmbMesPF;
    private javax.swing.JTextField edtCantMin;
    private javax.swing.JTextField edtCodLotePI;
    private javax.swing.JTextField edtCodigoBusqPA;
    private javax.swing.JTextField edtCodigoLotePIG;
    private javax.swing.JTextField edtCodigoPI;
    private javax.swing.JTextField edtCodigoPIG;
    private javax.swing.JTextField edtCodigoPLA;
    private javax.swing.JTextField edtDesPS;
    private javax.swing.JTextField edtDescripcionPI;
    private javax.swing.JTextField edtFiltroCampeonPA;
    private javax.swing.JTextField edtFiltroPapaNoelPA;
    private javax.swing.JTextField edtFiltroSanPabloPA;
    private javax.swing.JMenuItem itemFijarTI;
    private javax.swing.JMenuItem itemFijarTLA;
    private javax.swing.JMenuItem itemModificar;
    private javax.swing.JMenuItem itemNuevo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JMenuItem jmCerrar;
    private javax.swing.JMenuItem jmGenCodigo;
    private javax.swing.JMenuItem jmGenNumeros;
    private javax.swing.JLabel lbl_n_art;
    private javax.swing.JMenu mArchivo;
    private javax.swing.JMenu mImpresion;
    private javax.swing.JMenuItem mItemAgImpTIG;
    private javax.swing.JMenuItem mItemAgregarImpTI;
    private javax.swing.JMenuItem mItemBuscarDoc;
    private javax.swing.JMenuItem mItemBuscarSinCodB;
    private javax.swing.JMenuItem mItemConsulta;
    private javax.swing.JMenuItem mItemConsulta1;
    private javax.swing.JMenuItem mItemConsultar;
    private javax.swing.JMenuItem mItemConsultarTIG;
    private javax.swing.JMenuItem mItemCopiarCodigo;
    private javax.swing.JMenuItem mItemCopiarTE;
    private javax.swing.JMenuItem mItemCopiarTI;
    private javax.swing.JMenuItem mItemCopiarTIFS;
    private javax.swing.JMenuItem mItemCopiarTIG;
    private javax.swing.JMenuItem mItemCopiarTS;
    private javax.swing.JMenuItem mItemEliminarTI;
    private javax.swing.JMenuItem mItemLimpiarListaImp;
    private javax.swing.JMenuItem mItemModInvTE;
    private javax.swing.JMenuItem mItemModificarInvTI;
    private javax.swing.JMenuItem mItemModificarInvTIG;
    private javax.swing.JMenu mLimpiar;
    private javax.swing.JMenuBar mbMain;
    private javax.swing.JPopupMenu menuTA;
    private javax.swing.JPopupMenu menuTE;
    private javax.swing.JPopupMenu menuTI;
    private javax.swing.JPopupMenu menuTIFS;
    private javax.swing.JPopupMenu menuTIG;
    private javax.swing.JPopupMenu menuTS;
    private javax.swing.JPanel pFecDesPS;
    private javax.swing.JPanel pFecDesPS1;
    private javax.swing.JPanel panelEntradas;
    private javax.swing.JPanel panelInfoGeneral;
    private javax.swing.JPanel panelInventario;
    private javax.swing.JPanel panelSalidas;
    private javax.swing.JPanel panelStockWarning;
    private javax.swing.JTabbedPane tabPaneMain;
    private javax.swing.JTable tablaEntrada;
    private javax.swing.JTable tablaFactura;
    private javax.swing.JTable tablaInfoFaltanteStock;
    private javax.swing.JTable tablaInfoGeneral;
    private javax.swing.JTable tablaInventario;
    private javax.swing.JTable tablaListaArchivos;
    private javax.swing.JTable tablaResumenInfoGeneral;
    private javax.swing.JTable tablaResumenSalida;
    private javax.swing.JTable tablaSalida;
    // End of variables declaration//GEN-END:variables

    // ************************* Formulario *****************************************
    // Limpieza.
    private void limpiarFormulario() {
        limpiarPanelInventario();
        limpiarPanelEntrada();
        limpiarPanelSalida();
        limpiarPanelInfoGeneral();
        limpiarPanelInfoFaltanteStock();
        limpiarPanelListaArchivos();
    }

    private void limpiarPanelInventario() {
        edtCodigoPI.setText("");
        edtCodLotePI.setText("");
        edtDescripcionPI.setText("");

        limpiarTI();
    }

    private void limpiarPanelEntrada() {
        limpiarTE();
    }

    private void limpiarPanelSalida() {
        this.edtDesPS.setText("");
        limpiarTRS();
        limpiarTS();
    }

    private void limpiarPanelInfoGeneral() {
        this.edtCodigoPIG.setText("");
        this.edtCodigoLotePIG.setText("");
        limpiarTRIG();
        limpiarTIG();
    }

    private void limpiarPanelInfoFaltanteStock() {
        edtCantMin.setText("");
        limpiarTIFS();
    }

    private void limpiarPanelFacturas() {
        limpiarTF();
    }

    private void limpiarPanelListaArchivos() {
        edtFiltroCampeonPA.setText("");
        edtFiltroSanPabloPA.setText("");
        edtFiltroPapaNoelPA.setText("");
        edtCodigoBusqPA.setText("");

        cbSanPablo.setSelected(false);
        cbCampeon.setSelected(false);
        cbPapaNoel.setSelected(false);

        iniciarProc18(null);
        Utiles.pararEdicion(tablaListaArchivos);
        limpiarTLA();
    }

    private void limpiarTI() {
        Utiles.limpiarTabla(tablaInventario);
    }

    private void limpiarTE() {
        String[] columnNames = {
            "<html><center> <br> Fecha <br> <br></html>",
            "<html><center> Código <br></html>",
            "<html> Descripción <br></html>",
            "<html> Cant. de <br>entrada </html>",
            "<html> <center>Costo unit. <br></html>",
            "<html> <center>Precio unit. <br></html>",
            "<html> <center>Unid. of. <br></html>",
            "<html> <center>Total de<br> costos </html>",
            "<html> <center>Total de<br> ventas </html>",
            "<html> <center>Total de<br> ganancias</html>"
        };

        Utiles.limpiarTabla(tablaEntrada, columnNames);
    }

    private void limpiarTRS() {
        int COUNT_FILAS = 1;

        Utiles.limpiarTabla(tablaResumenSalida, COUNT_FILAS);
    }

    private void limpiarTS() {
        Utiles.limpiarTabla(tablaSalida);
    }

    private void limpiarTRIG() {
        int COUNT_FILAS = 1;

        Utiles.limpiarTabla(tablaResumenInfoGeneral, COUNT_FILAS);
    }

    private void limpiarTIG() {
        Utiles.limpiarTabla(tablaInfoGeneral);
    }

    private void limpiarTIFS() {
        Utiles.limpiarTabla(tablaInfoFaltanteStock);
    }

    private void limpiarTF() {
        Utiles.limpiarTabla(tablaFactura);
    }

    private void limpiarTLA() {
        Utiles.limpiarTabla(tablaListaArchivos);
    }

    // Carga de información en paneles.
    private void cargarInformacionEnVistas() {
        cargarPanelInventario();
        cargarPanelEntrada();
        cargarPanelSalida();
        cargarPanelInfoGeneral();
        cargarPanelFaltanteStock();
        cargarPanelFactura();
    }

    private void cargarPanelInventario() {
        cargarTablaInventario(tablaInventario, listaInventarios);
    }

    private void cargarPanelEntrada() {
        cargarTablaEntrada(tablaEntrada, listaEntradas);
    }

    private void cargarPanelSalida() {
        limpiarTRS();
        limpiarTS();
        cargarTablaResumenSalida(tablaResumenSalida, resumenSalida);
        cargarTablaSalida(tablaSalida, listaSalidas);
        establecerConfiguracionPS();
    }

    private void cargarPanelInfoGeneral() {
        cargarTablaResumenInfoGeneral(tablaResumenInfoGeneral, resumenInventario);
        cargarTablaInfoGeneral(tablaInfoGeneral, listaInventarios);
    }

    private void cargarPanelFaltanteStock() {
        limpiarTIFS();
        cargarTablaInfoFaltanteStock(tablaInfoFaltanteStock, listaInventarios);
    }

    private void cargarPanelFactura() {
        limpiarTF();
        cargarTablaFactura(tablaFactura, listaFacturas);
        establecerConfiguracionPF();
    }

    private void cargarPanelListaArchivo() {
        limpiarTLA();
        cargarTablaListaPA(iniciarProc36());
        iniciarProc18(iniciarProc36());
    }

    // Carga de información en tablas.
    private void cargarTablaInventario(JTable tabla, List<Inventario> l) {

        if (l == null || l.isEmpty()) {
            //Hacer nada.
        } else {
            //  Muestra la lista
            int NUM_ROW = -1;
            DefaultTableModel model = (DefaultTableModel) tabla.getModel();

            for (Inventario i : l) {
                if (i.isEstado()) {
                    NUM_ROW++;
                    String p0 = i.getProducto().getCodigoLote();
                    String p1 = i.getProducto().getCodigo();
                    String p2 = i.getProducto().getDescripcion();
                    String p3 = Utiles.formatearM2(i.getUnidOf());
                    String p4 = "$ " + Utiles.formatear(i.getpVenta());
                    String p5 = "Ver";
                    String[] datos = {p0, p1, p2, p3, p4, p5};

                    model.insertRow(NUM_ROW, datos);

                    if (i.getlOferta().isEmpty()) {
                        // Hacer nada.
                    } else {
                        for (Oferta of : i.getlOferta()) {
                            NUM_ROW++;
                            String q0 = i.getProducto().getCodigoLote();
                            String q1 = of.getCodigo();
                            String q2 = of.getDescripcion();
                            String q3 = Utiles.formatearM2(of.getUnidOfert());
                            String q4 = "$ " + Utiles.formatear(of.getPrecioVenta());
                            String q5 = "Ver";
                            String[] datos2 = {q0, q1, q2, q3, q4, q5};

                            model.insertRow(NUM_ROW, datos2);
                        }
                    }
                }
            }
        }
    }

    private void cargarTablaEntrada(JTable tabla, List<Entrada> l) {

        DefaultTableModel model = (DefaultTableModel) tabla.getModel();

        if (l.isEmpty()) {
        } else {
            int NUM_ROW = -1;

            for (Entrada e : l) {
                String p0 = Utiles.toStringM3(e.getFechaEntrada());
                String p1 = e.getCodigo();
                String p2 = e.getDescripcion();
                String p3 = String.valueOf(e.getCantidadEntrada());
                String p4 = "$ " + Utiles.formatear(e.getPrecioCosto());
                String p5 = "$ " + Utiles.formatear(e.getPrecioVenta());
                String p5p6 = Utiles.formatearM2(e.getInventario().getUnidOf());
                String p6 = "$ " + Utiles.formatear(e.getTotalCosto());
                String p7 = "$ " + Utiles.formatear(e.getTotalVenta());
                String p8 = "$ " + Utiles.formatear(e.getTotalGanancia());

                String[] datos = {p0, p1, p2, p3, p4, p5, p5p6, p6, p7, p8};

                NUM_ROW++;
                model.insertRow(NUM_ROW, datos);
            }
        }
    }

    private void cargarTablaResumenSalida(JTable tabla, String[] datos) {
        String dato = "----";

        if (datos == null || datos.length == 0) {
            for (int c = 0; c < tabla.getColumnCount(); c++) {
                tabla.setValueAt(dato, 0, c);
            }
        } else {
            final int INDEX = 0;
            int col = -1;

            for (String obj : datos) {
                col++;

                if (obj == null) {
                    dato = "----";
                } else {
                    switch (col) {
                        case 0:
                            dato = String.valueOf(obj);
                            break;
                        case 1:
                            dato = "$ " + obj;
                            break;
                        case 2:
                            dato = "$ " + obj;
                            break;
                        case 3:
                            dato = "$ " + obj;
                            break;
                        default:
                            dato = "----";
                    }
                }
                tabla.setValueAt(dato, INDEX, col);
            }
        }
    }

    private void cargarTablaSalida(JTable tabla, List<Salida> l) {

        if (listaSalidas.isEmpty()) {
            // Hacer nada.
        } else {
            int NUM_ROW = -1;
            int NRO_ART = 0;
            DefaultTableModel model = (DefaultTableModel) tabla.getModel();

            for (Salida sal : l) {
                NUM_ROW++;
                NRO_ART++;

                String p0 = String.valueOf(NRO_ART);
                String p1 = sal.getCodigoM2();
                String p2 = sal.getDescripcionM2();
                String p3 = Utiles.formatearM2(sal.getUnidOf());
                String p4 = "$ " + Utiles.formatear(sal.getpVenta());
                String p5 = String.valueOf(sal.getCant());
                String p6 = "$ " + Utiles.formatear(sal.getTotalVenta());
                String p7 = Utiles.toStringM2(sal.getFechaSalida());

                String[] datos = {p0, p1, p2, p3, p4, p5, p6, p7};

                model.insertRow(NUM_ROW, datos);
            }
        }
    }

    private void cargarTablaResumenInfoGeneral(JTable tabla, Object[] datos) {
        String dato = "----";

        if (datos == null || datos.length == 0) {
            for (int c = 0; c < tabla.getColumnCount(); c++) {
                tabla.setValueAt(dato, 0, c);
            }
        } else {
            final int INDEX = 0;
            int col = -1;

            for (Object obj : datos) {
                col++;

                if (obj == null) {
                    dato = "----";
                } else {
                    switch (col) {
                        case 0:
                            dato = String.valueOf(obj);
                            break;
                        case 1:
                            dato = "$ " + obj;
                            break;
                        case 2:
                            dato = "$ " + obj;
                            break;
                        case 3:
                            dato = "$ " + obj;
                            break;
                        default:
                            dato = "----";
                    }
                }
                tabla.setValueAt(dato, INDEX, col);
            }
        }
    }

    /**
     *
     * @param tabla
     * @param l
     * @param ordenar Ordena alfabéticamente la lista.
     */
    private void cargarTablaInfoGeneral(JTable tabla, List<Inventario> l) {

        if (l.isEmpty()) {
            // Hacer nada.
        } else {
            int NUM_ROW = -1;
            int indexInv = 0;
            DefaultTableModel model = (DefaultTableModel) tabla.getModel();

            for (Iterator<Inventario> iter = l.iterator(); iter.hasNext();) {
                Inventario inv = iter.next();

                NUM_ROW++;
                indexInv++;

                String pref = "$ ";
                String p0 = String.valueOf(indexInv);
                String p1 = inv.getProducto().getCodigoLote();
                String p2 = inv.getProducto().getCodigo();
                String p3 = inv.getProducto().getDescripcion();
                String p3p4 = Utiles.formatearM2(inv.getUnidOf());
                String p4 = pref + Utiles.formatear(inv.getCostoUnitario());
                String p5 = pref + Utiles.formatear(inv.getpVenta());
                String p6 = pref + Utiles.formatear(inv.getTotalCosto());
                String p7 = pref + Utiles.formatear(inv.getTotalVenta());
                String p8 = pref + Utiles.formatear(inv.getTotalGanancia());
                String p9 = String.valueOf(inv.getAcumEntrada());
                String p10 = String.valueOf(inv.getAcumSalida());
                String p11 = String.valueOf(inv.getProducto().getStock());
                String p12 = inv.isEstado() ? "Activo" : "Eliminado";
                final String[] datos = {p0, p1, p2, p3, p3p4, p4, p5, p11, p6, p7, p8, p9, p10, p12};

                model.insertRow(NUM_ROW, datos);

                if (inv.getlOferta().isEmpty()) {
                    // Hacer nada.
                } else {
                    for (Oferta of : inv.getlOferta()) {
                        NUM_ROW++;
                        String q0 = "";
                        String q1 = inv.getProducto().getCodigoLote();
                        String q2 = of.getCodigo();
                        String q3 = of.getDescripcion();
                        String q3q4 = Utiles.formatearM2(of.getUnidOfert());
                        String q4 = "";
                        String q5 = "$ " + Utiles.formatear(of.getPrecioVenta());;
                        String q6 = "";
                        String q7 = "";
                        String q8 = "";
                        String q9 = "";
                        String q10 = "";
                        String q11 = "";
                        String q12 = "";
                        String[] datos2 = {q0, q1, q2, q3, q3q4, q4, q5, q6, q7, q8, q9, q10, q11, q12};

                        model.insertRow(NUM_ROW, datos2);
                    }
                }
            }
        }
    }

    private void cargarTablaInfoFaltanteStock(JTable tabla, List<Inventario> l) {

        if (l.isEmpty()) {
            // Hacer nada.
        } else {
            int NUM_ROW = -1;
            int indexInv = 0;
            DefaultTableModel model = (DefaultTableModel) tabla.getModel();
            final String sangria = " ";

            for (Iterator<Inventario> it = l.iterator(); it.hasNext();) {
                Inventario inv = it.next();

                indexInv++;
                NUM_ROW++;

                String p0 = String.valueOf(indexInv);
                String p1 = inv.getProducto().getCodigo();
                String p2 = inv.getProducto().getDescripcion();
                String p3 = String.valueOf(inv.getProducto().getStock());
                String p4 = sangria + "$ " + Utiles.formatear(inv.getpVenta());
                String[] datos = {p0, p1, p2, p3, p4};

                model.insertRow(NUM_ROW, datos);
            }
        }
    }

    private void cargarTablaFactura(JTable tabla, List<Factura> l) {
        if (l.isEmpty()) {
            // Hacer nada.
        } else {
            int NUM_ROW = -1;
            int indexInv = 0;
            String sangria = " ";
            DefaultTableModel model = (DefaultTableModel) tabla.getModel();

            for (Iterator<Factura> it = l.iterator(); it.hasNext();) {
                Factura fact = it.next();

                indexInv++;
                NUM_ROW++;

                String p0 = String.valueOf(indexInv);
                String p1 = sangria + fact.getCodigoFactura();
                String p2 = sangria + fact.getCliente();
                String p3 = sangria + Utiles.toStringM3(fact.getFecha());
                String[] datos = {p0, p1, p2, p3};

                model.insertRow(NUM_ROW, datos);
            }
        }
    }

    private void cargarTablaListaPA(List<String[]> lista) {

        int NUM_ROW = -1;
        int indexInv = 0;
        DefaultTableModel model = (DefaultTableModel) tablaListaArchivos.getModel();

        for (Iterator<String[]> it = lista.iterator(); it.hasNext();) {
            indexInv++;
            NUM_ROW++;
            String[] v = it.next();
            String p0 = String.valueOf(indexInv);
            String p1 = v[0];
            String p2 = v[1];
            String p3 = v[2];
            String p4 = v[3];
            String p5 = v[4];
            String p6 = v[5];
            String[] datos = {p0, p1, p2, p3, p4, p5, p6};

            model.insertRow(NUM_ROW, datos);
        }
    }

    // Actualizaciones
    public void actualizar() throws ExceptionBD, ExceptionProgram {
        borrarInformacionLogica();
        cargarInformacionLogica();

        limpiarPanelInventario();
        limpiarPanelEntrada();
        limpiarPanelSalida();
        limpiarPanelInfoGeneral();
        limpiarPanelInfoFaltanteStock();
        limpiarPanelFacturas();

        cargarInformacionEnVistas();
    }

    private void actualizarPI() {
        limpiarTI();
        cargarTablaInventario(tablaInventario, listaInventarios);
    }

    private void actualizarPE() {
        limpiarTE();
        cargarTablaEntrada(tablaEntrada, listaEntradas);
    }

    private void actualizarPS() {
        limpiarTS();
        limpiarTRS();
        cargarTablaResumenSalida(tablaResumenSalida, resumenSalida);
        cargarTablaSalida(tablaSalida, listaSalidas);
    }

    private void actualizarPIG() {
        limpiarTIG();
        cargarTablaInfoGeneral(tablaInfoGeneral, listaInventarios);
    }

    private void actualizarPIFS() {
        limpiarTIFS();
        cargarTablaInfoFaltanteStock(tablaInfoFaltanteStock, listaInventarios);
    }

    private void actualizarPF() {
        limpiarTF();
        cargarTablaFactura(tablaFactura, listaFacturas);
    }

    private void actualizarTI() {
        limpiarTI();
        cargarTablaInventario(tablaInventario, listaInventarios);
    }

    private void actualizarTE() {
        limpiarTE();
        cargarTablaEntrada(tablaEntrada, listaEntradas);
    }

    private void actualizarTS() {
        limpiarTS();
        cargarTablaSalida(tablaSalida, listaSalidas);
    }

    private void actualizarTRIG() {
        limpiarTRIG();
        cargarTablaResumenInfoGeneral(tablaResumenInfoGeneral, resumenInventario);
    }

    private void actualizarTIG() {
        limpiarTIG();
        cargarTablaInfoGeneral(tablaInfoGeneral, listaInventarios);
    }

    private void actualizarTF() {
        limpiarTF();
        cargarTablaFactura(tablaFactura, listaFacturas);
    }

    // Configuraciones.
    private void establecerConfiguracionPS() {
        Calendar fecha = Calendar.getInstance();

        int anio = fecha.get(Calendar.YEAR);
        int mes = fecha.get(Calendar.MONTH);
        int dia = fecha.get(Calendar.DAY_OF_MONTH) - 1;

        try {
            this.cmbDia.setSelectedIndex(dia);
            this.cmbMes.setSelectedIndex(mes);
            this.cmbAnio.setSelectedItem(String.valueOf(anio));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void establecerConfiguracionPF() {
        Calendar fecha = Calendar.getInstance();

        int anio = fecha.get(Calendar.YEAR);
        int mes = fecha.get(Calendar.MONTH);
        int dia = fecha.get(Calendar.DAY_OF_MONTH) - 1;

        try {
            this.cmbDiaPF.setSelectedIndex(dia);
            this.cmbMesPF.setSelectedIndex(mes);
            this.cmbAnioPF.setSelectedItem(String.valueOf(anio));
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // ***************************** Procedimientos ******************************
    private void cargarInformacion() {
        Clave result = Clave.RESULT_SIN_DEFINIR;

        try {
            cargarInformacionLogica();
        } catch (ExceptionBD e0) {
            e0.printStackTrace();
            result = Clave.RESULT_ERROR_BD;
        }

        try {
            cargarInformacionEnVistas();
        } catch (Exception e) {
            result = Clave.RESULT_ERROR_PROGRAMA;
        }

        switch (result) {
            case RESULT_ERROR_BD: {
                this.dispose();
                Mensaje.mostrarMensaje3(rootPane);
                break;
            }
            case RESULT_ERROR_PROGRAMA: {
                Mensaje.mostrarMensaje5(rootPane);
                this.dispose();
                break;
            }
            default:
        }
    }

    private void borrarInformacionLogica() {
        listaInventarios.clear();
        listaEntradas.clear();
        listaSalidas.clear();
        listaFacturas.clear();
        resumenInventario = null;
        resumenSalida = null;
    }

    private void cargarInformacionLogica() throws ExceptionBD {
        listaInventarios.addAll(gestor.obtenerInventariosAZ());
        listaEntradas.addAll(gestor.obtenerEntradasAZ());
        listaSalidas.addAll(gestor.obtenerSalidasAZ());
        resumenSalida = null;
        resumenInventario = gestor.obtenerResumenInvenarios();
        listaFacturas.addAll(gestor.obtenerFacturasAZ());
    }

    private void deshabilitarComponentes() {
        this.edtFiltroCampeonPA.setEnabled(false);
        this.edtFiltroPapaNoelPA.setEnabled(false);
        this.edtFiltroSanPabloPA.setEnabled(false);
        this.cbCampeon.setEnabled(false);
        this.cbPapaNoel.setEnabled(false);
        this.cbSanPablo.setEnabled(false);
    }

    private void iniciarConfiguraciones() {
        Clave result = Clave.RESULT_SIN_DEFINIR;

        Utiles.establecerFocusActivoG(edtCodigoPI);
        this.deshabilitarComponentes();

        try {
            result = iniciarProc44();
        } catch (Exception e) {
            result = Clave.RESULT_ERROR;
        }

        switch (result) {
            case RESULT_EXITO: {
                Mensaje.mostrarMensajeDirectorioCreado(rootPane);
                break;
            }
            case RESULT_ERROR: {
                Mensaje.mostrarMensajeErrorDirectorio(rootPane);
                break;
            }
        }
    }

    private void deshabilitarCompPA() {
        edtFiltroCampeonPA.setEnabled(false);
        edtFiltroSanPabloPA.setEnabled(false);
        edtFiltroPapaNoelPA.setEnabled(false);
        cbCampeon.setSelected(false);
        cbPapaNoel.setSelected(false);
        cbSanPablo.setSelected(false);
    }

    //****************************** Formulario ************************************
    /**
     * Muestra una lista de acuerdo al código de lote del inventario.
     *
     * @param codLot
     * @return
     */
    private Clave iniciarProc0() {
        Clave result = Clave.RESULT_SIN_DEFINIR;
        List<Inventario> l = new ArrayList<>();

        String codLot = Utiles.limpiar(edtCodigoLotePIG.getText(), "'");

        if (codLot == null || codLot.isEmpty()) {
            result = Clave.RESULT_CAMPO_BLANCO;
        } else {
            try {
                l.addAll(gestor.obtenerInventariosPorCodigoLote(codLot));

                if (l.isEmpty()) {
                    result = Clave.RESULT_LISTA_VACIA;
                } else {
                    result = Clave.RESULT_ENCONTRADOS;
                }
            } catch (Exception e) {
                e.printStackTrace();
                return Clave.RESULT_ERROR_BD;
            }
        }

        if (l.isEmpty()) {
            Utiles.limpiarSeleccion(tablaInfoGeneral);
        } else {
            Utiles.seleccionarFila0(tablaInfoGeneral);
        }

        switch (result) {
            case RESULT_CAMPO_BLANCO: {
                actualizarTIG();
                actualizarTRIG();
                Utiles.posicionarPrincipio(tablaInfoGeneral);
                Utiles.limpiarSeleccion(tablaInfoGeneral);
                break;
            }
            case RESULT_LISTA_VACIA: {
                limpiarTRIG();
                limpiarTIG();
                cargarTablaResumenInfoGeneral(tablaResumenInfoGeneral, null);
                Utiles.posicionarPrincipio(tablaInfoGeneral);
                Utiles.limpiarSeleccion(tablaInfoGeneral);
                break;
            }
            case RESULT_ENCONTRADOS: {
                limpiarTRIG();
                limpiarTIG();
                cargarTablaResumenInfoGeneral(tablaResumenInfoGeneral, null);
                cargarTablaInfoGeneral(tablaInfoGeneral, l);
                Utiles.posicionarPrincipio(tablaInfoGeneral);
                Utiles.seleccionarFila0(tablaInfoGeneral);
                break;
            }
            case RESULT_ERROR_BD: {
                Mensaje.mostrarMensaje3(rootPane);
                break;
            }
            default:
                Mensaje.mostrarMensaje5(rootPane);
        }

        return result;
    }

    /**
     * Muestra una lista de acuerdo a la cantidad de stock del inventario.
     *
     * @param cant
     * @return
     */
    private Clave iniciarProc1(int cant) {
        Clave result = Clave.RESULT_OK;
        List<Inventario> l = new ArrayList<>();

        try {
            l.addAll(gestor.obtenerInvCantMin(cant));
        } catch (Exception e) {
            e.printStackTrace();
        }

        limpiarTIFS();
        cargarTablaInfoFaltanteStock(tablaInfoFaltanteStock, l);

        if (l.isEmpty()) {
            Utiles.limpiarSeleccion(tablaInfoFaltanteStock);
        } else {
            Utiles.seleccionarFila0(tablaInfoFaltanteStock);
        }

        return result;
    }

    /**
     * Procedimiento que elimina de la base de datos un inventario.
     *
     * @param codigo
     * @return
     */
    private Clave iniciarProc2(String codigo) throws ExceptionBD {
        Clave result = Clave.RESULT_SIN_DEFINIR;

        if (gestor.consultarInvPorCodigo(codigo)) {
            gestor.eliminarInventarioM2(codigo);
            result = Clave.RESULT_OK;
        } else {
            result = Clave.RESULT_NO_EXISTE;
        }

        return result;
    }

    private Clave iniciarProc3() {
        Clave result = Clave.RESULT_OK;
        List<Inventario> l = new ArrayList<>();
        String cod = Utiles.limpiar(edtCodigoPIG.getText(), "'");

        if (cod == null || cod.isEmpty()) {
            result = Clave.RESULT_CAMPO_BLANCO;
        } else {
            try {
                l.addAll(gestor.obtenerInvPorCodigoM3(cod));

                if (l.isEmpty()) {
                    result = Clave.RESULT_LISTA_VACIA;
                } else {
                    result = Clave.RESULT_ENCONTRADOS;
                }
            } catch (Exception e) {
                e.printStackTrace();
                result = Clave.RESULT_ERROR_BD;
            }
        }

        switch (result) {
            case RESULT_CAMPO_BLANCO: {
                actualizarTIG();
                actualizarTRIG();
                Utiles.posicionarPrincipio(tablaInfoGeneral);
                Utiles.limpiarSeleccion(tablaInfoGeneral);
                break;
            }
            case RESULT_LISTA_VACIA: {
                limpiarTRIG();
                limpiarTIG();
                cargarTablaResumenInfoGeneral(tablaResumenInfoGeneral, null);
                Utiles.posicionarPrincipio(tablaInfoGeneral);
                Utiles.limpiarSeleccion(tablaInfoGeneral);
                break;
            }
            case RESULT_ENCONTRADOS: {
                limpiarTRIG();
                limpiarTIG();
                cargarTablaResumenInfoGeneral(tablaResumenInfoGeneral, null);
                cargarTablaInfoGeneral(tablaInfoGeneral, l);
                Utiles.posicionarPrincipio(tablaInfoGeneral);
                Utiles.seleccionarFila0(tablaInfoGeneral);
                break;
            }
            case RESULT_ERROR_BD: {
                Mensaje.mostrarMensaje3(rootPane);
                break;
            }
            default:
                Mensaje.mostrarMensaje5(rootPane);
        }

        return result;
    }

    /**
     * Muestra una lista de acuerdo al código de lote del inventario.
     *
     * @param codLot
     * @return
     */
    private Clave iniciarProc4() {
        Clave result = Clave.RESULT_SIN_DEFINIR;
        String codLot = Utiles.limpiar(edtCodLotePI.getText(), "'");;
        List<Inventario> l = new ArrayList<>();

        if (codLot == null || codLot.isEmpty()) {
            result = Clave.RESULT_CAMPO_BLANCO;
        } else {

            try {
                l.addAll(gestor.obtenerInventariosPorCodigoLote(codLot));

                if (l.isEmpty()) {
                    result = Clave.RESULT_LISTA_VACIA;
                } else {
                    result = Clave.RESULT_ENCONTRADOS;
                }
            } catch (Exception e) {
                e.printStackTrace();
                result = Clave.RESULT_ERROR_BD;
            }
        }

        switch (result) {
            case RESULT_CAMPO_BLANCO: {
                actualizarTI();
                Utiles.posicionarPrincipio(tablaInventario);
                Utiles.limpiarSeleccion(tablaInventario);
                break;
            }
            case RESULT_LISTA_VACIA: {
                limpiarTI();
                Utiles.posicionarPrincipio(tablaInventario);
                Utiles.limpiarSeleccion(tablaInventario);
                break;
            }
            case RESULT_ENCONTRADOS: {
                limpiarTI();
                cargarTablaInventario(tablaInventario, l);
                Utiles.posicionarPrincipio(tablaInventario);
                Utiles.seleccionarFila0(tablaInventario);
                break;
            }
            case RESULT_ERROR_BD: {
                Mensaje.mostrarMensaje3(rootPane);
                break;
            }
        }

        return result;
    }

    /**
     * Obtiene una lista de acuerdo al código del inventario.
     *
     * @param cod
     * @return
     */
    private Clave iniciarProc5() {
        Clave result = null;

        String cod = Utiles.limpiar(edtCodigoPI.getText(), "'");
        List<Inventario> l = new ArrayList<>();

        if (cod == null || cod.trim().isEmpty()) {
            // Hacer nada.
            result = Clave.RESULT_CAMPO_BLANCO;
        } else {

            try {
                l.addAll(gestor.obtenerInvPorCodigoM3(cod));

                if (l.isEmpty()) {
                    result = Clave.RESULT_LISTA_VACIA;
                } else {
                    result = Clave.RESULT_ENCONTRADOS;
                }
            } catch (Exception e) {
                e.printStackTrace();
                result = Clave.RESULT_ERROR_BD;
            }

        }

        switch (result) {
            case RESULT_CAMPO_BLANCO: {
                actualizarTI();
                Utiles.limpiarSeleccion(tablaInventario);
                break;
            }
            case RESULT_LISTA_VACIA: {
                limpiarTI();
                Utiles.limpiarSeleccion(tablaInventario);
                break;
            }
            case RESULT_ENCONTRADOS: {
                limpiarTI();
                cargarTablaInventario(tablaInventario, l);
                Utiles.posicionarPrincipio(tablaInventario);
                Utiles.seleccionarFila0(tablaInventario);
                break;
            }
            case RESULT_ERROR_BD: {
                Mensaje.mostrarMensaje3(rootPane);
                break;
            }
        }

        return result;
    }

    /**
     * Muestra una lista de acuerdo a la descripción del inventario.
     *
     * @param desc
     * @return
     */
    private Clave iniciarProc6() {
        //  Acciones
        List<Inventario> l = new ArrayList<>();
        Clave result = Clave.RESULT_SIN_DEFINIR;
        String desc = Utiles.limpiar(edtDescripcionPI.getText(), "'");

        if (desc.isEmpty()) {
            result = Clave.RESULT_CAMPO_BLANCO;
        } else {
            try {
                l.addAll(gestor.obtenerInventarioPropDescripcion(desc));

                if (l.isEmpty()) {
                    result = Clave.RESULT_LISTA_VACIA;
                } else {
                    result = Clave.RESULT_ENCONTRADOS;
                }
            } catch (Exception e) {
                e.printStackTrace();
                result = Clave.RESULT_ERROR_BD;
            }
        }

        switch (result) {
            case RESULT_CAMPO_BLANCO: {
                actualizarTI();
                Utiles.limpiarSeleccion(tablaInventario);
                Utiles.posicionarPrincipio(tablaInventario);
                break;
            }
            case RESULT_LISTA_VACIA: {
                limpiarTI();
                Utiles.limpiarSeleccion(tablaInventario);
                Utiles.posicionarPrincipio(tablaInventario);
                break;
            }
            case RESULT_ENCONTRADOS: {
                limpiarTI();
                cargarTablaInventario(tablaInventario, l);
                Utiles.posicionarPrincipio(tablaInventario);
                Utiles.seleccionarFila0(tablaInventario);
                break;
            }
            case RESULT_ERROR_BD: {
                Mensaje.mostrarMensaje3(rootPane);
                break;
            }
        }

        return result;
    }

    /**
     * Muestra un formulario con la imagen del inventario de acuerdo al código.
     *
     * @param codigo
     * @return
     */
    private Clave iniciarProc7(String codigo) {
        Inventario inv = null;
        Clave result = Clave.RESULT_OK;

        try {
            if (gestor.consultarInvPorCodigo(codigo)) {
                inv = gestor.obtenerInvPorCodigoM2(codigo);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return Clave.RESULT_ERROR_BD;
        }

        if (inv == null) {
            Mensaje.mostrarMensajeNoEncontrado(rootPane);
        } else {
            (new FImagenInv()).setVisible(true);
        }

        return result;
    }

    private Clave iniciarProc8() throws ParseException {
        Clave result = Clave.RESULT_OK;
        String dia = String.valueOf(cmbDia.getSelectedIndex() + 1);
        String mes = String.valueOf(cmbMes.getSelectedIndex() + 1);
        String anio = (String) cmbAnio.getSelectedItem();

        List<Salida> nuevaLista = new ArrayList<>();
        String[] datos = new String[4];

        try {
            nuevaLista.addAll(gestor.obtenerSalidas(dia, mes, anio));
            datos = gestor.obtenerResumenSalidas(dia, mes, anio);
        } catch (Exception e) {
            e.printStackTrace();
            return Clave.RESULT_ERROR_BD;
        }

        limpiarTRS();
        limpiarTS();
        cargarTablaResumenSalida(tablaResumenSalida, datos);
        cargarTablaSalida(tablaSalida, nuevaLista);

        if (nuevaLista.isEmpty()) {
            Mensaje.mostrarMensajeNoEncontrado(rootPane);
            return Clave.RESULT_LISTA_VACIA;
        }

        return result;
    }

    /**
     * Abre un archivo factura.
     *
     * @param codigo
     * @return
     * @throws JRException
     */
    private Clave iniciarProc9(String codigo) throws JRException {
        Clave result = Clave.RESULT_OK;

        if (codigo == null || codigo.isEmpty()) {
            // Hacer nada.
            result = Clave.RESULT_ERROR_SELECCION;
        } else {
            if (gestor.abrirDocumento(codigo)) {
                // Hacer nada.
            } else {
                result = Clave.RESULT_NO_EXISTE;
            }
        }

        return result;
    }

    private void iniciarProc10() throws IOException {
        String rLista = Path.PATH_LISTAS.getNombre();
        JSystemFileChooser abrirArchivo = new JSystemFileChooser();
        Clave result = Clave.RESULT_SIN_DEFINIR;

        //Con esto solamente podamos abrir archivos
        abrirArchivo.setFileSelectionMode(JFileChooser.FILES_ONLY);
        abrirArchivo.setCurrentDirectory(new File(rLista));
        int seleccion = abrirArchivo.showOpenDialog(this);

        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File f = abrirArchivo.getSelectedFile();

            PdfReader reader = new PdfReader(f.toPath().toString());

            List<String[]> l = Utiles.obtenerLista3P(reader, 0, 8, CAMPEON);

            listaC.addAll(l);
            result = Clave.RESULT_ENCONTRADOS;
        }

        switch (result) {
            case RESULT_SIN_DEFINIR: {
                listaC.clear();
                Mensaje.mostrarMensaje16(rootPane);
                break;
            }
            case RESULT_ENCONTRADOS: {
                cbCampeon.setSelected(true);
                cbCampeon.setEnabled(true);
                edtFiltroCampeonPA.setEnabled(true);
                edtFiltroCampeonPA.setText("");
                btnAbrirCampeon.setEnabled(false);
                limpiarTLA();
                iniciarProc18(iniciarProc35());
                cargarTablaListaPA(iniciarProc35());
                break;
            }
        }
    }

    private void iniciarProc12() {
        List<String[]> nLista = new ArrayList<>();

        if (cbPapaNoel.isSelected()) {
            String value2 = Utiles.obtenerValor(edtFiltroPapaNoelPA);

            if (value2.isEmpty()) {
                nLista.addAll(listaPN);
            } else {
                List<String[]> nLPNT = iniciarProc15(listaPN, value2);

                nLista.addAll(nLPNT);
            }
            edtFiltroPapaNoelPA.setEnabled(true);
        } else {
            edtFiltroPapaNoelPA.setEnabled(false);
        }

        if (cbSanPablo.isSelected()) {
            String value0 = Utiles.obtenerValor(edtFiltroSanPabloPA);

            if (value0.isEmpty()) {
                nLista.addAll(listaSP);
            } else {
                List<String[]> nLSPT = iniciarProc15(listaSP, value0);

                nLista.addAll(nLSPT);
            }
            edtFiltroSanPabloPA.setEnabled(true);
        } else {
            edtFiltroSanPabloPA.setEnabled(false);
        }

        if (cbCampeon.isSelected()) {
            String value1 = Utiles.obtenerValor(edtFiltroCampeonPA);

            if (value1.isEmpty()) {
                nLista.addAll(listaC);
            } else {
                List<String[]> nLCT = iniciarProc15(listaC, value1);

                nLista.addAll(nLCT);
            }
            edtFiltroCampeonPA.setEnabled(true);
        } else {
            edtFiltroCampeonPA.setEnabled(false);
        }

        limpiarTLA();
        cargarTablaListaPA(nLista);
        iniciarProc18(nLista);
        Utiles.posicionarPrincipio(tablaListaArchivos);
    }

    private List<String[]> iniciarProc15(List<String[]> lista, String vector) {

        List<String> lFiltro = Utiles.separar(vector);
        List<String[]> lRetorno = new ArrayList<>();

        if (lFiltro.isEmpty()) {
            // Hacer nada.
        } else {
            lRetorno.addAll(lista);

            for (String cadena : lFiltro) {
                Iterator<String[]> iter = lRetorno.iterator();

                while (iter.hasNext()) {
                    String[] datos = iter.next();

                    String desc = datos[1];

                    if (Utiles.existeCoincidencia(desc, cadena)) {
                        // Hacer nada.
                        continue;
                    } else {
                        iter.remove();
                    }
                }
            }
        }

        return lRetorno;
    }

    private void iniciarProc14() throws IOException {

        String rLista = Path.PATH_LISTAS.getNombre();
        Clave result = Clave.RESULT_SIN_DEFINIR;
        JSystemFileChooser abrirArchivo = new JSystemFileChooser();
        //Con esto solamente podamos abrir archivos
        abrirArchivo.setFileSelectionMode(JFileChooser.FILES_ONLY);
        abrirArchivo.setCurrentDirectory(new File(rLista));
        int seleccion = abrirArchivo.showOpenDialog(this);

        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File f = abrirArchivo.getSelectedFile();

            PdfReader reader = new PdfReader(f.toPath().toString());
            List<String[]> lRet = new ArrayList<>();

            try {
                lRet.addAll(Utiles.obtenerLista5P(reader, 8, 13, SAN_PABLO));
            } catch (Exception e) {
                e.printStackTrace();
            }

            listaSP.addAll(lRet);

            result = Clave.RESULT_ENCONTRADOS;
        }

        switch (result) {

            case RESULT_SIN_DEFINIR: {
                listaSP.clear();
                Mensaje.mostrarMensaje16(rootPane);
                break;
            }
            case RESULT_ENCONTRADOS: {
                cbSanPablo.setSelected(true);
                cbSanPablo.setEnabled(true);
                edtFiltroSanPabloPA.setEnabled(true);
                edtFiltroSanPabloPA.setText("");
                btnAbrirSanPablo.setEnabled(false);
                limpiarTLA();
                iniciarProc18(iniciarProc35());
                cargarTablaListaPA(iniciarProc35());
                break;
            }
            default:
        }
    }

    private void iniciarProc16() throws IOException {
        String rLista = Path.PATH_LISTAS.getNombre();
        Clave result = Clave.RESULT_SIN_DEFINIR;
        JSystemFileChooser abrirArchivo = new JSystemFileChooser();

        //Con esto solamente podamos abrir archivos
        abrirArchivo.setFileSelectionMode(JFileChooser.FILES_ONLY);
        abrirArchivo.setCurrentDirectory(new File(rLista));
        int seleccion = abrirArchivo.showOpenDialog(this);

        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File f = abrirArchivo.getSelectedFile();

            PdfReader reader = new PdfReader(f.toPath().toString());

            List<String[]> l = Utiles.obtenerLista2P(reader,
                    0, 6,
                    13, 40,
                    30,
                    30,
                    PAPA_NOEL);

            listaPN.addAll(l);
            result = Clave.RESULT_ENCONTRADOS;
        }

        switch (result) {
            case RESULT_SIN_DEFINIR: {
                listaPN.clear();
                Mensaje.mostrarMensaje16(rootPane);
                break;
            }
            case RESULT_ENCONTRADOS: {
                cbPapaNoel.setSelected(true);
                cbPapaNoel.setEnabled(true);
                edtFiltroPapaNoelPA.setEnabled(true);
                edtFiltroPapaNoelPA.setText("");
                btnAbrirPapaNoel.setEnabled(false);
                limpiarTLA();
                iniciarProc18(iniciarProc35());
                cargarTablaListaPA(iniciarProc35());
                break;
            }
        }
    }

    /**
     * Muestra el número de resultados de la lista.
     *
     * @param lista
     */
    private void iniciarProc18(List<String[]> lista) {

        if (lista == null || lista.isEmpty()) {
            lbl_n_art.setText("0");
            lbl_n_art.setHorizontalAlignment(JLabel.CENTER);
            lbl_n_art.setVerticalAlignment(JLabel.CENTER);
            lbl_n_art.setBackground(Color.RED);
        } else {
            lbl_n_art.setText(String.valueOf(lista.size()));
            lbl_n_art.setHorizontalAlignment(JLabel.CENTER);
            lbl_n_art.setVerticalAlignment(JLabel.CENTER);
            lbl_n_art.setBackground(Color.yellow);
        }
    }

    /**
     * Fija en la primera fila de la tabla al elemento seleccionado.
     */
    private void iniciarProc19() {
        final int COL_DESC = 2;
        final int COL_SUCURSAL = 6;

        String desc = Utiles.obtenerValor(tablaListaArchivos, COL_DESC);
        String sucursal = Utiles.obtenerValor(tablaListaArchivos, COL_SUCURSAL);

        if (sucursal.isEmpty()) {
            // Hacer nada.
        } else {
            switch (sucursal) {
                case SAN_PABLO: {
                    edtFiltroSanPabloPA.setText(desc);
                    iniciarProc12();
                    break;
                }
                case CAMPEON: {
                    edtFiltroCampeonPA.setText(desc);
                    iniciarProc12();
                    break;
                }
                case PAPA_NOEL: {
                    edtFiltroPapaNoelPA.setText(desc);
                    iniciarProc12();
                    break;
                }
            }
        }
    }

    /**
     * Procedimiento que inicia el formulario de Alta de Inventario.
     *
     * @return
     */
    private Clave iniciarProc22() {
        Clave result = Clave.RESULT_OK;

        String value0 = Utiles.obtenerValor(tablaListaArchivos, COL_CODIGO_TLA);
        String value1 = Utiles.obtenerValor(tablaListaArchivos, COL_DESCRIPCION_TLA);
        String value2 = Utiles.obtenerValor(tablaListaArchivos, COL_PRECIO_CONTADO_LA);

        if (value0.isEmpty() & value1.isEmpty() & value2.isEmpty()) {
            Mensaje.mostrarMensajeSeleccion(rootPane);
        } else {
            new FAltaInventario(this, gestor, value0, value1, value2).setVisible(true);
        }

        return result;
    }

    /**
     * Procedimiento que agrega a la lista de impresión un código de inventario.
     *
     * @param codigo
     */
    public void iniciarProc23(String codigo) {
        this.lImpresion.add(codigo);
    }

    /**
     * Procedimiento que inicia el Formulario de Consulta.
     *
     * @param codigo
     * @return
     */
    private Clave iniciarProc24(String codigo) {
        Clave result = Clave.RESULT_OK;
        Inventario i = null;

        try {
            if (gestor.consultarInvPorCodigo(codigo)) {
                i = gestor.obtenerInvPorCodigoM2(codigo);
            }
        } catch (Exception e) {
            e.printStackTrace();
            result = Clave.RESULT_ERROR_BD;
        }

        if (i == null) {
            // Hacer nada.
        } else {
            FConsultaInventario frame = new FConsultaInventario();

            frame.setVisible(true);
            frame.cargarInventario(i);
            frame.mostrarInformacion();
        }

        return result;
    }

    /**
     * Muestra una lista de acuerdo a la descripción de la salida.
     *
     * @param desc
     * @return
     */
    public Clave iniciarProc25() {
        Clave result = Clave.RESULT_SIN_DEFINIR;
        List<Salida> lista = new ArrayList<>();

        String desc = Utiles.limpiar(edtDesPS.getText(), "'");

        if (desc.isEmpty()) {
            result = Clave.RESULT_CAMPO_BLANCO;
        } else {
            try {
                lista.addAll(gestor.obtenerSalidasPorDescripcion(desc));

                if (lista.isEmpty()) {
                    result = Clave.RESULT_LISTA_VACIA;
                } else {
                    result = Clave.RESULT_ENCONTRADOS;
                }
            } catch (Exception e) {
                e.printStackTrace();
                result = Clave.RESULT_ERROR;
            }
        }

        switch (result) {
            case RESULT_CAMPO_BLANCO: {
                limpiarTRS();
                cargarTablaResumenSalida(tablaResumenSalida, null);
                actualizarTS();
                Utiles.posicionarPrincipio(tablaSalida);
                Utiles.limpiarSeleccion(tablaSalida);
                break;
            }
            case RESULT_LISTA_VACIA: {
                limpiarTRS();
                cargarTablaResumenSalida(tablaResumenSalida, null);
                limpiarTS();
                Utiles.posicionarPrincipio(tablaSalida);
                Utiles.limpiarSeleccion(tablaSalida);
                break;
            }
            case RESULT_ENCONTRADOS: {
                limpiarTRS();
                cargarTablaResumenSalida(tablaResumenSalida, null);
                limpiarTS();
                cargarTablaSalida(tablaSalida, lista);
                Utiles.posicionarPrincipio(tablaSalida);
                Utiles.seleccionarFila0(tablaSalida);
                break;
            }
            case RESULT_ERROR_BD: {
                Mensaje.mostrarMensaje3(rootPane);
                break;
            }
            default:
                Mensaje.mostrarMensaje5(rootPane);
        }

        return result;
    }

    private void iniciarProc26P1() {
        List<String[]> nLista = iniciarProc36();
        List<String[]> lRetorno = new ArrayList<>();
        Progreso progreso = new Progreso();

        FProgressBar form = new FProgressBar(nLista.size());

        form.setVisible(true);

        TimerTask timerTask2 = new TimerTask() {
            public void run() {
                // Aquí el código que queremos ejecutar.
                form.obtenerProgreso().setValue(progreso.getProgreso());
            }
        };

        TimerTask timerTask = new TimerTask() {
            public void run() {
                // Aquí el código que queremos ejecutar.
                Clave result = Clave.RESULT_SIN_DEFINIR;

                try {
                    lRetorno.addAll(gestor.obtenerCambios(nLista, progreso));
                } catch (Exception e) {
                    result = Clave.RESULT_ERROR_PROGRAMA;
                    timerTask2.cancel();
                    this.cancel();
                } finally {
                    if (lRetorno.isEmpty()) {
                        result = Clave.RESULT_LISTA_VACIA;
                    } else {
                        result = Clave.RESULT_ENCONTRADOS;
                    }
                    iniciarProc26P2(lRetorno, result);
                    timerTask2.cancel();
                    form.dispose();
                    this.cancel();
                }
            }
        };

        // Aquí se pone en marcha el timer cada segundo.
        Timer timer = new Timer();
        // Dentro de 0 milisegundos avísame cada 1000 milisegundos
        timer.scheduleAtFixedRate(timerTask, 0, 200);
        // Aquí se pone en marcha el timer cada segundo.
        Timer timer2 = new Timer();
        // Dentro de 0 milisegundos avísame cada 1000 milisegundos
        timer2.scheduleAtFixedRate(timerTask2, 0, 500);

    }

    private Clave iniciarProc26P2(List<String[]> lRetorno, Clave result) {

        switch (result) {
            case RESULT_LISTA_VACIA: {
                Mensaje.mostrarMensaje16(rootPane);
                break;
            }
            case RESULT_ERROR: {
                Mensaje.mostrarMensaje5(rootPane);
                break;
            }
            case RESULT_SIN_CAMBIOS: {
                Mensaje.mostrarMensaje28(rootPane);
                break;
            }
            case RESULT_ERROR_BD: {
                Mensaje.mostrarMensaje3(rootPane);
                break;
            }
            case RESULT_ENCONTRADOS: {
                this.edtFiltroCampeonPA.setEnabled(false);
                this.edtFiltroPapaNoelPA.setEnabled(false);
                this.edtFiltroSanPabloPA.setEnabled(false);
                this.cbCampeon.setSelected(false);
                this.cbPapaNoel.setSelected(false);
                this.cbSanPablo.setSelected(false);
                limpiarPanelListaArchivos();
                cargarTablaListaPA(lRetorno);
                iniciarProc18(lRetorno);
                break;
            }
        }

        return result;
    }

    private Clave iniciarProc27() {
        Clave result = Clave.RESULT_OK;

        String codigoBusq = Utiles.obtenerValor(tablaListaArchivos, COL_CODIGO_TLA);

        if (codigoBusq.isEmpty()) {
            Mensaje.mostrarMensajeNoExisteInventario(rootPane);
        } else {
            try {
                if (gestor.consultarPorCodBusqP1(codigoBusq)) {
                    List<Inventario> l = gestor.obtenerPorCodBusqP1(codigoBusq);
                    Clave codAccion = Clave.RESULT_ACT_LISTA_ARCHIVO_DIF;

                    if (l.size() == 1) {
                        Inventario inv = l.get(0);

                        iniciarProc30(inv, true, codAccion);
                    } else {
                        FInventarios form = new FInventarios(this, l);

                        form.setVisible(true);
                    }

                } else {
                    Mensaje.mostrarMensajeNoExisteInventario(rootPane);
                }
            } catch (Exception e) {
                e.printStackTrace();
                return Clave.RESULT_ERROR_BD;
            }
        }

        Utiles.copiarAPortapapeles(tablaListaArchivos, COL_PRECIO_CONTADO_LA);
        return result;
    }

    /**
     * Procedimiento que inicia un formulario de FModificarInventario.
     *
     * @param inv
     */
    private void iniciarProc30(Inventario inv) {
        FModificarInventario form = new FModificarInventario(this, gestor, inv.getProducto().getCodigo());

        form.setVisible(true);
    }

    /**
     * Procedimiento que inicia un formulario de FModificarInventario,y
     * actualiza la lista de la la tabla archivos.
     *
     * @param inv
     */
    public void iniciarProc30(Inventario inv, boolean band, Clave codAccion) {
        FModificarInventario form = new FModificarInventario(this, gestor, inv.getProducto().getCodigo(), band, codAccion);

        form.setVisible(true);
    }

    private Clave iniciarProc32() {
        Clave result = Clave.RESULT_OK;

        final int COL_CODIGO = 1;

        String codigoBusq = Utiles.obtenerValor(tablaListaArchivos, COL_CODIGO);

        if (codigoBusq.isEmpty()) {
            Mensaje.mostrarMensajeNoExisteInventario(rootPane);
        } else {
            try {
                if (gestor.consultarPorCodBusqP1(codigoBusq)) {
                    List<Inventario> l = gestor.obtenerPorCodBusqP1(codigoBusq);
                    Inventario inv = null;

                    if (l.size() == 1) {
                        inv = l.get(0);
                    } else {
                        Clave mensaje = Clave.MESSAGE_CONSULTA;
                        FInventarios form = new FInventarios(this, l, mensaje);

                        form.setVisible(true);
                    }

                    if (inv == null) {
                        // Hacer nada.
                    } else {
                        iniciarProc33(inv);
                    }

                } else {
                    Mensaje.mostrarMensajeNoExisteInventario(rootPane);
                }
            } catch (Exception e) {
                e.printStackTrace();
                return Clave.RESULT_ERROR_BD;
            }
        }

        return result;
    }

    public void iniciarProc33(Inventario inv) {
        FConsultaInventario frame = new FConsultaInventario();

        frame.setVisible(true);
        frame.cargarInventario(inv);
        frame.mostrarInformacion();
    }

    private List<String[]> iniciarProc35() {
        List<String[]> totList = new ArrayList<>();

        if (cbCampeon.isSelected()) {
            totList.addAll(listaC);
        }

        if (cbSanPablo.isSelected()) {
            totList.addAll(listaSP);
        }

        if (cbPapaNoel.isSelected()) {
            totList.addAll(listaPN);
        }

        return totList;
    }

    private List<String[]> iniciarProc36() {
        List<String[]> totList = new ArrayList<>();

        totList.addAll(listaC);

        totList.addAll(listaSP);

        totList.addAll(listaPN);

        return totList;
    }

    private void iniciarProc37() {
        // TODO add your handling code here:
        Clave result = Clave.RESULT_SIN_DEFINIR;

        String codigo = Utiles.obtenerValor(tablaInventario, COL_CODIGO_TI);

        if (codigo.isEmpty()) {
            result = Clave.RESULT_CAMPO_BLANCO;
        } else {
            try {
                if (gestor.consultarInvPorCodigo(codigo)) {
                    List<Inventario> l = gestor.obtenerInvPorCodigoM0(codigo);
                    Inventario inv = null;

                    if (l.size() == 1) {
                        inv = l.get(0);
                        iniciarProc33(inv);
                    } else {
                        Clave mensaje = Clave.MESSAGE_CONSULTA;
                        FInventarios form = new FInventarios(this, l, mensaje);

                        form.setVisible(true);
                    }

                } else {
                    result = Clave.RESULT_NO_EXISTE;
                }
            } catch (Exception e) {
                e.printStackTrace();
                result = Clave.RESULT_ERROR_BD;
            }
        }

        switch (result) {
            case RESULT_ERROR: {
                Mensaje.mostrarMensaje5(rootPane);
                break;
            }
            case RESULT_ERROR_BD: {
                Mensaje.mostrarMensaje3(rootPane);
                break;
            }
            case RESULT_NO_EXISTE: {
                Mensaje.mostrarMensajeNoExisteInventario(rootPane);
                break;
            }
            case RESULT_CAMPO_BLANCO: {
                // Hacer nada.
                break;
            }
        }
    }

    private void iniciarProc38(String codBusq1, String codBusq2, String codBusq3) {
        List<String[]> listaTot = iniciarProc36();
        List<String[]> nLista = new ArrayList<>();

        for (String[] datos : listaTot) {
            String codigo = datos[0].trim();

            if (codigo == null || codigo.isEmpty()) {
                // Hacer nada.
            } else {
                if (codBusq1.equals(codigo)
                        || codBusq2.equals(codigo)
                        || codBusq3.equals(codigo)) {
                    nLista.add(datos);
                }
            }
        }

        if (nLista.isEmpty()) {
            Mensaje.mostrarMensajeNoEncontrado(rootPane);
        } else {
            limpiarPanelListaArchivos();
            iniciarProc18(nLista);
            cargarTablaListaPA(nLista);            
            Utiles.seleccionarFila0(tablaListaArchivos);
            edtCodigoBusqPA.setText(codBusq1);
            tabPaneMain.setSelectedIndex(INDEX_PANEL_DOCUMENTOS);
            cbCampeon.setSelected(false);
            cbPapaNoel.setSelected(false);
            cbSanPablo.setSelected(false);
            edtFiltroCampeonPA.setEnabled(false);
            edtFiltroPapaNoelPA.setEnabled(false);
            edtFiltroSanPabloPA.setEnabled(false);
        }
        Utiles.posicionarPrincipio(tablaListaArchivos);
    }

    private void iniciarProc39() {
        Clave result = Clave.RESULT_SIN_DEFINIR;

        String codigo = Utiles.obtenerValor(tablaInfoGeneral, COL_CODIGO_TIG);

        if (codigo.isEmpty()) {
            result = Clave.RESULT_CAMPO_BLANCO;
        } else {
            try {
                if (gestor.consultarInvPorCodigo(codigo)) {
                    List<Inventario> l = gestor.obtenerInvPorCodigoM0(codigo);
                    Inventario inv = null;

                    if (l.size() == 1) {
                        inv = l.get(0);
                        iniciarProc33(inv);
                    } else {
                        Clave mensaje = Clave.MESSAGE_CONSULTA;
                        FInventarios form = new FInventarios(this, l, mensaje);

                        form.setVisible(true);
                    }

                } else {
                    result = Clave.RESULT_NO_EXISTE;
                }
            } catch (Exception e) {
                e.printStackTrace();
                result = Clave.RESULT_ERROR_BD;
            }
        }

        switch (result) {
            case RESULT_ERROR: {
                Mensaje.mostrarMensaje5(rootPane);
                break;
            }
            case RESULT_ERROR_BD: {
                Mensaje.mostrarMensaje3(rootPane);
                break;
            }
            case RESULT_NO_EXISTE: {
                Mensaje.mostrarMensajeNoExisteInventario(rootPane);
                break;
            }
            case RESULT_CAMPO_BLANCO: {
                // Hacer nada.
                break;
            }
        }
    }

    private void iniciarProc40() {
        final int PANE_INVENTARIO = 0;
        final int PANE_INVENTARIO_GENERAL = 3;

        int index = tabPaneMain.getSelectedIndex();

        switch (index) {
            case PANE_INVENTARIO: {
                Utiles.establecerFocusActivoGM2(edtCodigoPI);
                break;
            }
            case PANE_INVENTARIO_GENERAL: {
                Utiles.establecerFocusActivoG(edtCodigoPIG);
                break;
            }
        }
    }

    private void iniciarProc41() {
        String codBusq = Utiles.obtenerValor(tablaListaArchivos, COL_CODIGO_TLA);

        if (gestor.consultarPorCodBusqP1(codBusq)) {
            List<Inventario> lista = gestor.obtenerPorCodBusqP1(codBusq);

            FModificarInventarioPorLote form = new FModificarInventarioPorLote(this, gestor);

            form.setVisible(true);

            form.iniciarProc1(lista);
        }
    }

    private void iniciarProc42() {
        String dia = String.valueOf(cmbDiaPF.getSelectedIndex() + 1);
        String mes = String.valueOf(cmbMesPF.getSelectedIndex() + 1);
        String anio = (String) cmbAnioPF.getSelectedItem();

        if (gestor.consultarFacturaPorFecha(dia, mes, anio)) {
            List<Factura> lista = gestor.obtenerFacturaPorFecha(dia, mes, anio);

            limpiarTF();
            cargarTablaFactura(tablaFactura, lista);
            Utiles.seleccionarFila0(tablaFactura);
        } else {
            limpiarTF();
            Mensaje.mostrarMensajeNoEncontrado(rootPane);
        }
    }

    private Clave iniciarProc43() throws ExceptionBD {
        Clave result = Clave.RESULT_SIN_DEFINIR;
        List<Inventario> lista = new ArrayList<>();

        try {
            if (gestor.consultarInvSinCodigoBusq()) {
                lista.addAll(gestor.obtenerInvSinCodigoBusq());
                result = Clave.RESULT_OK;
            } else {
                result = Clave.RESULT_LISTA_VACIA;
            }
        } catch (Exception e) {
            throw new ExceptionBD();
        }

        switch (result) {
            case RESULT_LISTA_VACIA: {
                limpiarTIG();
                limpiarTRIG();
                break;
            }
            case RESULT_OK: {
                limpiarTIG();
                limpiarTRIG();
                cargarTablaResumenInfoGeneral(tablaResumenInfoGeneral, null);
                cargarTablaInfoGeneral(tablaInfoGeneral, lista);
                break;
            }
        }

        return result;
    }

    private Clave iniciarProc44() {
        Clave result = Clave.RESULT_SIN_DEFINIR;
        //  Creación de un directorio.
        String carpNombre = "Facturas LIBRERIA PERRY";
        String carpListas = "listas";
        String dir = Path.HOME_PATH.getNombre() + "\\Documents\\" + carpNombre;
        String dirListas = Path.HOME_PATH.getNombre() + "\\Documents\\" + carpNombre + "\\" + carpListas;

        File carpeta1 = new File(dir);
        File carpeta2 = new File(dirListas);

        if (carpeta1.exists()) {
            // Hacer nada.
            if (carpeta2.exists()) {
                // Hacer nada.
            } else {
                if (carpeta2.mkdir()) {
                    // Hacer nada.
                }
            }
            result = Clave.RESULT_OK;
        } else {
            if (carpeta1.mkdirs()) {
                if (carpeta2.mkdir()) {
                    // Hacer nada.
                    result = Clave.RESULT_EXITO;
                } else {
                    result = Clave.RESULT_ERROR;
                }
            } else {
                result = Clave.RESULT_ERROR;
            }
        }

        return result;
    }

    private void iniciarProc45(JTable tabla, int col) {
        int[] rows = tabla.getSelectedRows();
        List<Inventario> lista = new ArrayList<>();

        for (int i : rows) {
            String codigo = Utiles.obtenerValor(tabla, i, col);

            try {
                if (gestor.consultarInvPorCodigo(codigo)) {
                    Inventario inv = gestor.obtenerInvPorCodigoM2(codigo);

                    lista.add(inv);
                }
            } catch (Exception e) {
            }
        }

        FModificarInventarioPorLote form = new FModificarInventarioPorLote(this, gestor);

        form.iniciarProc12(lista);
        form.setVisible(true);
    }

    private void iniciarProc46() {
        String codBusq = Utiles.obtenerValor(tablaListaArchivos, COL_CODIGO_TLA);
        String detalle = Utiles.obtenerValor(tablaListaArchivos, COL_DESCRIPCION_TLA);
        String pCosto = Utiles.obtenerValor(tablaListaArchivos, COL_PRECIO_CONTADO_LA);

        FAltaInventarioLote form = new FAltaInventarioLote(this, gestor);

        form.iniciarProc5(codBusq, detalle, pCosto);
        form.setVisible(true);
    }

    private void iniciarProc47() {
        Clave result = Clave.RESULT_SIN_DEFINIR;
        String codigo = Utiles.obtenerValor(tablaInventario, COL_CODIGO_TI);
        String codBusq1 = "";
        String codBusq2 = "";
        String codBusq3 = "";

        if (codigo.isEmpty()) {
            // Hacer nada.
            result = Clave.RESULT_CAMPO_BLANCO;
        } else {
            if (gestor.consultarInvPorCodigo(codigo)) {
                Inventario inv = gestor.obtenerInvPorCodigoM2(codigo);

                codBusq1 = inv.getProducto().getCodigoBusq1();
                codBusq2 = inv.getProducto().getCodigoBusq2();
                codBusq3 = inv.getProducto().getCodigoBusq3();

                result = Clave.RESULT_ENCONTRADOS;
            } else {
                result = Clave.RESULT_CAMPO_BLANCO;
            }
        }

        switch (result) {
            case RESULT_CAMPO_BLANCO: {
                // Hacer nada.
                Mensaje.mostrarMensajeSeleccion(rootPane);
                break;
            }
            case RESULT_ENCONTRADOS: {
                try {
                    iniciarProc38(codBusq1, codBusq2, codBusq3);
                } catch (Exception e) {
                    e.printStackTrace();
                }

                break;
            }
            default:
        }
    }

    private void iniciarProc48() {
        String codigo = Utiles.obtenerValor(edtCodigoPLA);
        this.deshabilitarCompPA();
        this.iniciarProc18(null);
        this.limpiarTLA();

        if (gestor.consultarInvPorCodigo(codigo)) {
            Inventario inv = gestor.obtenerInvPorCodigoM2(codigo);

            iniciarProc38(inv.getProducto().getCodigoBusq1(),
                    inv.getProducto().getCodigoBusq2(),
                    inv.getProducto().getCodigoBusq3());
        } else {
            Mensaje.mostrarMensajeNoEncontrado(rootPane);
        }
    }

    private void iniciarProc49(JTable tabla, int COL_OBJ) {
        String codigo = Utiles.obtenerValor(tabla, COL_OBJ);

        if (codigo.isEmpty()) {
            Mensaje.mostrarMensajeSeleccion(this);
        } else {
            // Accion
            FModificarInventario form = new FModificarInventario(this, gestor, codigo);

            form.setVisible(true);
        }
    }

    public List<String> obtenerListaImpresion() {
        return lImpresion;
    }

    private void limpiarListaImpresion() {
        this.lImpresion.clear();
    }

    private void resetearListas() {
        listaSP.clear();
        listaC.clear();
        listaPN.clear();
    }
}
